/*@strict if ("hello world") 18 end

@const[false] @not-null var a =  if ("Hello World") 
							18
						else if (false)
							78
						else if (true)
							if (false) "lkj" end
						else false end

@not-null b = 15 if (6)*/

/*@lazy foreach (var id : String in @strict if ("Hello World") 18 else 35 end)
	@lazy-load foreach (id2 in 34) 35*/

/*var func = function(@optional number: @not-null Integer) : Integer do 
	35 
end*/
/*
var a = (function() do (12); end).ToString();
var f = a((function() do (10 + 5) * 5 / 7; end).ToString());
var f = "f".ToString;
var f = a.a(("f".ToString()));

if ("Hello World") 
  if ("Hello")
  	true;
  end;
else 
	false;
end;
*/

/*(5 + 5).ToString();

var a = ToString().Parse("Hello World!").Hiii;

var a : System.Boolean = false;

foreach (var i: Integer in 1 to 100 by 34) do
	skip;
end;

if (not (@convert false))
	@cast("System.Int32") (0 to 3 by 2);
end;


@tail-recursive(false) 
@not-null
@logged(true)
function max(a: Integer, b: Integer): Integer do
	if ({ if } < b)
		a;
	else 
		b;
	end;
end;

implicit macro hello_world( tree : { if[attribute="strict"] > body } ) do
	skip;
end;

macro hello_world (
	do
		foreach (var __index__ in [1,2,3]) do
			skip;
		end;
	end
);

object Person
	name: string;
	age: number;
end;

attribute @not-null;
attribute @id(name: string);

@strict var p: Person;
@strict p.name = "John Winchester";
p.age = 45;

@strict(5+5) foreach (var i : integer in [1, 2, 3, 4]) @id("my-foreach") do
	skip;
end;
*/

macro generic ("Point", 
	object Disposable
		_object: TYPE;
		isDisposed: boolean;
	end
);

object Point 
	x: number;
	y: number;
end;

@extends(Point)
object Point3
	z: number;
end;

macro static(
	Point3, function __static__Zero(): Point3 do 
		var p: Point3;
		p.x = 0;
		p.y = 0;
		p.z = 0;

		return p;
	end
);

var p3: Point3 = Point3.Zero;

@generic(Point) 
object Disposable 

	@require(value.x != 0) 
	@require(not (value.y == 0)) 
	@ensure(this != null) 
	actualObject: TYPE;

	@invariant(this.actualObject == null)
	isDisposed: boolean;
end;

macro 