//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\C#\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\TreeSelector.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TreeSelectorParser : Parser {
	public const int
		T__5=1, T__4=2, T__3=3, T__2=4, T__1=5, T__0=6, OPERATOR=7, ID=8, WHITESPACE=9, 
		NEWLINE=10;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'{'", "','", "'['", "'='", "'}'", "OPERATOR", "ID", 
		"WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_selectors = 1, RULE_selector = 2, RULE_attribute = 3, 
		RULE_statement = 4;
	public static readonly string[] ruleNames = {
		"init", "selectors", "selector", "attribute", "statement"
	};

	public override string GrammarFileName { get { return "TreeSelector.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TreeSelectorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public SelectorsContext selectors() {
			return GetRuleContext<SelectorsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; Match(2);
			State = 11; selectors();
			State = 12; Match(6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorsContext : ParserRuleContext {
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public IReadOnlyList<SelectorContext> selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public SelectorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selectors; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterSelectors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitSelectors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorsContext selectors() {
		SelectorsContext _localctx = new SelectorsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_selectors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; selector();
			State = 19;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 15; Match(3);
				State = 16; selector();
				}
				}
				State = 21;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public StatementContext Parent;
		public IToken Operator;
		public SelectorContext Child;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public ITerminalNode OPERATOR() { return GetToken(TreeSelectorParser.OPERATOR, 0); }
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selector; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; _localctx.Parent = statement();
			State = 27;
			_la = _input.La(1);
			if (_la==OPERATOR || _la==ID) {
				{
				State = 24;
				_la = _input.La(1);
				if (_la==OPERATOR) {
					{
					State = 23; _localctx.Operator = Match(OPERATOR);
					}
				}

				State = 26; _localctx.Child = selector();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Property;
		public IToken Value;
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TreeSelectorParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TreeSelectorParser.ID, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(4);
			State = 30; _localctx.Property = Match(ID);
			State = 33;
			_la = _input.La(1);
			if (_la==5) {
				{
				State = 31; Match(5);
				State = 32; _localctx.Value = Match(ID);
				}
			}

			State = 35; Match(1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IToken Selector;
		public AttributeContext Attributes;
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public ITerminalNode ID() { return GetToken(TreeSelectorParser.ID, 0); }
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; _localctx.Selector = Match(ID);
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==4) {
				{
				{
				State = 38; _localctx.Attributes = attribute();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\f/\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\a\x3\x14\n\x3\f\x3\xE\x3\x17\v\x3\x3\x4\x3\x4\x5\x4\x1B\n"+
		"\x4\x3\x4\x5\x4\x1E\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5$\n\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\a\x6*\n\x6\f\x6\xE\x6-\v\x6\x3\x6\x2\x2\x2\a\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\x2\x2.\x2\f\x3\x2\x2\x2\x4\x10\x3\x2\x2\x2\x6\x18"+
		"\x3\x2\x2\x2\b\x1F\x3\x2\x2\x2\n\'\x3\x2\x2\x2\f\r\a\x4\x2\x2\r\xE\x5"+
		"\x4\x3\x2\xE\xF\a\b\x2\x2\xF\x3\x3\x2\x2\x2\x10\x15\x5\x6\x4\x2\x11\x12"+
		"\a\x5\x2\x2\x12\x14\x5\x6\x4\x2\x13\x11\x3\x2\x2\x2\x14\x17\x3\x2\x2\x2"+
		"\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x5\x3\x2\x2\x2\x17\x15\x3"+
		"\x2\x2\x2\x18\x1D\x5\n\x6\x2\x19\x1B\a\t\x2\x2\x1A\x19\x3\x2\x2\x2\x1A"+
		"\x1B\x3\x2\x2\x2\x1B\x1C\x3\x2\x2\x2\x1C\x1E\x5\x6\x4\x2\x1D\x1A\x3\x2"+
		"\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\a\x3\x2\x2\x2\x1F \a\x6\x2\x2 #\a\n\x2"+
		"\x2!\"\a\a\x2\x2\"$\a\n\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$%\x3\x2\x2\x2"+
		"%&\a\x3\x2\x2&\t\x3\x2\x2\x2\'+\a\n\x2\x2(*\x5\b\x5\x2)(\x3\x2\x2\x2*"+
		"-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,\v\x3\x2\x2\x2-+\x3\x2\x2\x2"+
		"\a\x15\x1A\x1D#+";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
