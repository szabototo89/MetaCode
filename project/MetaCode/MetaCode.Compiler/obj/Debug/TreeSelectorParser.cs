//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\C#\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\TreeSelector.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class TreeSelectorParser : Parser {
	public const int
		T__5=1, T__4=2, T__3=3, T__2=4, T__1=5, T__0=6, WHILE=7, FOREACH=8, FUNCTION=9, 
		IF=10, TRUE_STATEMENT=11, ELSE_STATEMENT=12, BODY=13, EXPRESSION=14, VARIABLE=15, 
		DECLARATION=16, ALL=17, ID=18, WHITESPACE=19, NEWLINE=20;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'>'", "','", "'+'", "'['", "'='", "'while'", "'foreach'", 
		"'function'", "'if'", "'else-if'", "'else'", "'body'", "'expression'", 
		"'variable'", "'declaration'", "'*'", "ID", "WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_selectors = 1, RULE_selector = 2, RULE_attribute = 3, 
		RULE_operator = 4, RULE_statement = 5, RULE_baseStatement = 6;
	public static readonly string[] ruleNames = {
		"init", "selectors", "selector", "attribute", "operator", "statement", 
		"baseStatement"
	};

	public override string GrammarFileName { get { return "TreeSelector.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public TreeSelectorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public SelectorsContext selectors() {
			return GetRuleContext<SelectorsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; Match(5);
			State = 15; selectors();
			State = 16; Match(1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorsContext : ParserRuleContext {
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public IReadOnlyList<SelectorContext> selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public SelectorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selectors; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterSelectors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitSelectors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorsContext selectors() {
		SelectorsContext _localctx = new SelectorsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_selectors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; selector(0);
			State = 23;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 19; Match(3);
				State = 20; selector(0);
				}
				}
				State = 25;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		public OperatorContext @operator() {
			return GetRuleContext<OperatorContext>(0);
		}
		public IReadOnlyList<SelectorContext> selector() {
			return GetRuleContexts<SelectorContext>();
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_selector; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		return selector(0);
	}

	private SelectorContext selector(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		SelectorContext _localctx = new SelectorContext(_ctx, _parentState);
		SelectorContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_selector, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 27; statement();
			}
			_ctx.stop = _input.Lt(-1);
			State = 35;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_selector);
					State = 29;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 30; @operator();
					State = 31; selector(2);
					}
					} 
				}
				State = 37;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(TreeSelectorParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(TreeSelectorParser.ID, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(5);
			State = 39; Match(ID);
			State = 40; Match(6);
			State = 41; Match(ID);
			State = 42; Match(1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorContext : ParserRuleContext {
		public OperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_operator; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperatorContext @operator() {
		OperatorContext _localctx = new OperatorContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			_la = _input.La(1);
			if ( !(_la==2 || _la==4) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public BaseStatementContext baseStatement() {
			return GetRuleContext<BaseStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_statement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; baseStatement();
			State = 50;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 47; attribute();
					}
					} 
				}
				State = 52;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseStatementContext : ParserRuleContext {
		public IToken Statement;
		public ITerminalNode ELSE_STATEMENT() { return GetToken(TreeSelectorParser.ELSE_STATEMENT, 0); }
		public ITerminalNode WHILE() { return GetToken(TreeSelectorParser.WHILE, 0); }
		public ITerminalNode BODY() { return GetToken(TreeSelectorParser.BODY, 0); }
		public ITerminalNode IF() { return GetToken(TreeSelectorParser.IF, 0); }
		public ITerminalNode ALL() { return GetToken(TreeSelectorParser.ALL, 0); }
		public ITerminalNode VARIABLE() { return GetToken(TreeSelectorParser.VARIABLE, 0); }
		public ITerminalNode EXPRESSION() { return GetToken(TreeSelectorParser.EXPRESSION, 0); }
		public ITerminalNode FUNCTION() { return GetToken(TreeSelectorParser.FUNCTION, 0); }
		public ITerminalNode TRUE_STATEMENT() { return GetToken(TreeSelectorParser.TRUE_STATEMENT, 0); }
		public ITerminalNode FOREACH() { return GetToken(TreeSelectorParser.FOREACH, 0); }
		public BaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_baseStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.EnterBaseStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITreeSelectorListener typedListener = listener as ITreeSelectorListener;
			if (typedListener != null) typedListener.ExitBaseStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITreeSelectorVisitor<TResult> typedVisitor = visitor as ITreeSelectorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseStatementContext baseStatement() {
		BaseStatementContext _localctx = new BaseStatementContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_baseStatement);
		try {
			State = 63;
			switch (_input.La(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; _localctx.Statement = Match(WHILE);
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; _localctx.Statement = Match(FOREACH);
				}
				break;
			case FUNCTION:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; _localctx.Statement = Match(FUNCTION);
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 4);
				{
				State = 56; _localctx.Statement = Match(IF);
				}
				break;
			case TRUE_STATEMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 57; _localctx.Statement = Match(TRUE_STATEMENT);
				}
				break;
			case ELSE_STATEMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 58; _localctx.Statement = Match(ELSE_STATEMENT);
				}
				break;
			case BODY:
				EnterOuterAlt(_localctx, 7);
				{
				State = 59; _localctx.Statement = Match(BODY);
				}
				break;
			case EXPRESSION:
				EnterOuterAlt(_localctx, 8);
				{
				State = 60; _localctx.Statement = Match(EXPRESSION);
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 61; _localctx.Statement = Match(VARIABLE);
				}
				break;
			case ALL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 62; _localctx.Statement = Match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return selector_sempred((SelectorContext)_localctx, predIndex);
		}
		return true;
	}
	private bool selector_sempred(SelectorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x16\x44\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x18\n\x3\f\x3\xE\x3\x1B\v\x3"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4$\n\x4\f\x4\xE\x4\'\v\x4"+
		"\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\a\a\x33\n\a"+
		"\f\a\xE\a\x36\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5"+
		"\b\x42\n\b\x3\b\x2\x2\x3\x6\t\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x2"+
		"\x3\x4\x2\x4\x4\x6\x6H\x2\x10\x3\x2\x2\x2\x4\x14\x3\x2\x2\x2\x6\x1C\x3"+
		"\x2\x2\x2\b(\x3\x2\x2\x2\n.\x3\x2\x2\x2\f\x30\x3\x2\x2\x2\xE\x41\x3\x2"+
		"\x2\x2\x10\x11\a\a\x2\x2\x11\x12\x5\x4\x3\x2\x12\x13\a\x3\x2\x2\x13\x3"+
		"\x3\x2\x2\x2\x14\x19\x5\x6\x4\x2\x15\x16\a\x5\x2\x2\x16\x18\x5\x6\x4\x2"+
		"\x17\x15\x3\x2\x2\x2\x18\x1B\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x19\x1A\x3"+
		"\x2\x2\x2\x1A\x5\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1C\x1D\b\x4\x1\x2\x1D"+
		"\x1E\x5\f\a\x2\x1E%\x3\x2\x2\x2\x1F \f\x3\x2\x2 !\x5\n\x6\x2!\"\x5\x6"+
		"\x4\x4\"$\x3\x2\x2\x2#\x1F\x3\x2\x2\x2$\'\x3\x2\x2\x2%#\x3\x2\x2\x2%&"+
		"\x3\x2\x2\x2&\a\x3\x2\x2\x2\'%\x3\x2\x2\x2()\a\a\x2\x2)*\a\x14\x2\x2*"+
		"+\a\b\x2\x2+,\a\x14\x2\x2,-\a\x3\x2\x2-\t\x3\x2\x2\x2./\t\x2\x2\x2/\v"+
		"\x3\x2\x2\x2\x30\x34\x5\xE\b\x2\x31\x33\x5\b\x5\x2\x32\x31\x3\x2\x2\x2"+
		"\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\r\x3"+
		"\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x42\a\t\x2\x2\x38\x42\a\n\x2\x2\x39"+
		"\x42\a\v\x2\x2:\x42\a\f\x2\x2;\x42\a\r\x2\x2<\x42\a\xE\x2\x2=\x42\a\xF"+
		"\x2\x2>\x42\a\x10\x2\x2?\x42\a\x11\x2\x2@\x42\a\x13\x2\x2\x41\x37\x3\x2"+
		"\x2\x2\x41\x38\x3\x2\x2\x2\x41\x39\x3\x2\x2\x2\x41:\x3\x2\x2\x2\x41;\x3"+
		"\x2\x2\x2\x41<\x3\x2\x2\x2\x41=\x3\x2\x2\x2\x41>\x3\x2\x2\x2\x41?\x3\x2"+
		"\x2\x2\x41@\x3\x2\x2\x2\x42\xF\x3\x2\x2\x2\x6\x19%\x34\x41";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
