//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\C#\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__7=1, T__6=2, T__5=3, T__4=4, T__3=5, T__2=6, T__1=7, T__0=8, FUNCTION=9, 
		FOREACH=10, WHILE=11, IF=12, ELSE=13, DO=14, END=15, BOOLEAN=16, SKIP=17, 
		VAR=18, IN=19, ASSIGN=20, ID=21, COMMENT=22, MULTILINE_COMMENT=23, ATTRIBUTE_ID=24, 
		STRING=25, NUMBER=26, WHITESPACE=27, NEWLINE=28;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "')'", "','", "'by'", "'['", "':'", "'('", "'..'", 
		"'function'", "'foreach'", "'while'", "'if'", "'else'", "'do'", "'end'", 
		"BOOLEAN", "'skip'", "'var'", "'in'", "'='", "ID", "COMMENT", "MULTILINE_COMMENT", 
		"ATTRIBUTE_ID", "STRING", "NUMBER", "WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_expression = 4, RULE_functionExpression = 5, RULE_foreachExpression = 6, 
		RULE_whileExpression = 7, RULE_blockExpression = 8, RULE_assignmentExpression = 9, 
		RULE_ifExpression = 10, RULE_elseIfExpression = 11, RULE_parameterList = 12, 
		RULE_parameter = 13, RULE_typeName = 14, RULE_constant = 15, RULE_numberConstant = 16, 
		RULE_stringConstant = 17, RULE_booleanConstant = 18, RULE_arrayConstant = 19, 
		RULE_intervalConstant = 20, RULE_attributes = 21, RULE_attribute = 22;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "expression", 
		"functionExpression", "foreachExpression", "whileExpression", "blockExpression", 
		"assignmentExpression", "ifExpression", "elseIfExpression", "parameterList", 
		"parameter", "typeName", "constant", "numberConstant", "stringConstant", 
		"booleanConstant", "arrayConstant", "intervalConstant", "attributes", 
		"attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext Values;
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 48; _localctx.Values = statement();
				}
				}
				State = 51;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 5) | (1L << 7) | (1L << FUNCTION) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << DO) | (1L << BOOLEAN) | (1L << SKIP) | (1L << VAR) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER) | (1L << NEWLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public VariableDeclarationContext VariableDeclaration;
		public ITerminalNode NEWLINE() { return GetToken(MetaCodeParser.NEWLINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 56;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 53; _localctx.Expression = expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 54; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 58; _localctx.Attributes = attributes();
				}
			}

			State = 61; Match(VAR);
			State = 62; _localctx.VariableName = Match(ID);
			State = 65;
			_la = _input.La(1);
			if (_la==6) {
				{
				State = 63; Match(6);
				State = 64; _localctx.VariableType = typeName();
				}
			}

			State = 67; Match(ASSIGN);
			State = 68; _localctx.VariableDefaultValue = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IToken Skip;
		public FunctionExpressionContext Function;
		public BlockExpressionContext Block;
		public IfExpressionContext If;
		public ForeachExpressionContext Foreach;
		public WhileExpressionContext While;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public WhileExpressionContext whileExpression() {
			return GetRuleContext<WhileExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ForeachExpressionContext foreachExpression() {
			return GetRuleContext<ForeachExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_expression);
		int _la;
		try {
			State = 109;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 70; _localctx.Attributes = attributes();
					}
				}

				State = 73; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 74; _localctx.Attributes = attributes();
					}
				}

				State = 77; _localctx.Skip = Match(SKIP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 78; _localctx.Attributes = attributes();
					}
				}

				State = 81; _localctx.Function = functionExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 83;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 82; _localctx.Attributes = attributes();
					}
				}

				State = 85; _localctx.Block = blockExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 86; _localctx.Attributes = attributes();
					}
				}

				State = 89; _localctx.If = ifExpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 91;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 90; _localctx.Attributes = attributes();
					}
				}

				State = 93; _localctx.Foreach = foreachExpression();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 95;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 94; _localctx.Attributes = attributes();
					}
				}

				State = 97; _localctx.While = whileExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 99;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 98; _localctx.Attributes = attributes();
					}
				}

				State = 101; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 103;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 102; _localctx.Attributes = attributes();
					}
				}

				State = 105; Match(7);
				State = 106; _localctx.InnerExpression = expression();
				State = 107; Match(2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		public IToken FunctionName;
		public ParameterListContext Parameters;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public ExpressionContext BodyExpression;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionExpression);
		int _la;
		try {
			State = 143;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; Match(FUNCTION);
				State = 113;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 112; _localctx.FunctionName = Match(ID);
					}
				}

				State = 115; Match(7);
				State = 117;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 116; _localctx.Parameters = parameterList();
					}
				}

				State = 119; Match(2);
				State = 122;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 120; Match(6);
					State = 121; _localctx.ReturnType = typeName();
					}
				}

				State = 124; Match(DO);
				State = 125; _localctx.BodyStatements = statements();
				State = 126; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128; Match(FUNCTION);
				State = 130;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 129; _localctx.FunctionName = Match(ID);
					}
				}

				State = 132; Match(7);
				State = 134;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 133; _localctx.Parameters = parameterList();
					}
				}

				State = 136; Match(2);
				State = 139;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 137; Match(6);
					State = 138; _localctx.ReturnType = typeName();
					}
				}

				State = 141; Match(ASSIGN);
				State = 142; _localctx.BodyExpression = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachExpressionContext : ParserRuleContext {
		public ExpressionContext Body;
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public ForeachExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachExpressionContext foreachExpression() {
		ForeachExpressionContext _localctx = new ForeachExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_foreachExpression);
		try {
			State = 164;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; Match(FOREACH);
				State = 146; Match(7);
				State = 147; Match(ID);
				State = 148; Match(IN);
				State = 149; expression();
				State = 150; Match(2);
				State = 151; _localctx.Body = expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 153; Match(FOREACH);
				State = 154; Match(7);
				State = 155; Match(VAR);
				State = 156; Match(ID);
				State = 157; Match(6);
				State = 158; Match(ID);
				State = 159; Match(IN);
				State = 160; expression();
				State = 161; Match(2);
				State = 162; _localctx.Body = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileExpressionContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public ExpressionContext Body;
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public WhileExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileExpressionContext whileExpression() {
		WhileExpressionContext _localctx = new WhileExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_whileExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(WHILE);
			State = 167; Match(7);
			State = 168; _localctx.ConditionExpression = expression();
			State = 169; Match(2);
			State = 170; _localctx.Body = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExpressionContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExpressionContext blockExpression() {
		BlockExpressionContext _localctx = new BlockExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_blockExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172; Match(DO);
			State = 173; _localctx.Body = statements();
			State = 174; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IToken Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; _localctx.Variable = Match(ID);
			State = 177; Match(ASSIGN);
			State = 178; _localctx.Value = expression();
			State = 187;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 180;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 179; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 182; Match(IF);
				State = 183; Match(7);
				State = 184; _localctx.ConditionalExpression = expression();
				State = 185; Match(2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		public ExpressionContext Condition;
		public ElseIfExpressionContext ElseIfExpressions;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<ElseIfExpressionContext> elseIfExpression() {
			return GetRuleContexts<ElseIfExpressionContext>();
		}
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public ElseIfExpressionContext elseIfExpression(int i) {
			return GetRuleContext<ElseIfExpressionContext>(i);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ifExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(IF);
			State = 190; Match(7);
			State = 191; _localctx.Condition = expression();
			State = 192; Match(2);
			State = 193; statements();
			State = 197;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 194; _localctx.ElseIfExpressions = elseIfExpression();
					}
					} 
				}
				State = 199;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			State = 202;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 200; Match(ELSE);
				State = 201; _localctx.ElseStatements = statements();
				}
			}

			State = 204; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfExpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfExpressionContext elseIfExpression() {
		ElseIfExpressionContext _localctx = new ElseIfExpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_elseIfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; Match(ELSE);
			State = 207; Match(IF);
			State = 208; Match(7);
			State = 209; expression();
			State = 210; Match(2);
			State = 211; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public IReadOnlyList<ParameterContext> parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; parameter();
			State = 218;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 214; Match(3);
				State = 215; parameter();
				}
				}
				State = 220;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 221; attributes();
				}
			}

			State = 224; Match(ID);
			State = 225; Match(6);
			State = 226; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 228; attributes();
				}
			}

			State = 231; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberConstantContext Number;
		public StringConstantContext String;
		public BooleanConstantContext Boolean;
		public ArrayConstantContext Array;
		public IntervalConstantContext Interval;
		public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		public ArrayConstantContext arrayConstant() {
			return GetRuleContext<ArrayConstantContext>(0);
		}
		public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		public IntervalConstantContext intervalConstant() {
			return GetRuleContext<IntervalConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_constant);
		try {
			State = 238;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; _localctx.Number = numberConstant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; _localctx.String = stringConstant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235; _localctx.Boolean = booleanConstant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 236; _localctx.Array = arrayConstant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 237; _localctx.Interval = intervalConstant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numberConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_numberConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_stringConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_booleanConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstantContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arrayConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArrayConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArrayConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstantContext arrayConstant() {
		ArrayConstantContext _localctx = new ArrayConstantContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_arrayConstant);
		int _la;
		try {
			State = 259;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 246; Match(5);
				State = 247; expression();
				State = 252;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 248; Match(3);
					State = 249; expression();
					}
					}
					State = 254;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 255; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257; Match(5);
				State = 258; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalConstantContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_intervalConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIntervalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIntervalConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalConstantContext intervalConstant() {
		IntervalConstantContext _localctx = new IntervalConstantContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_intervalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; _localctx.Start = Match(NUMBER);
			State = 262; Match(8);
			State = 263; _localctx.End = Match(NUMBER);
			{
			State = 264; Match(4);
			State = 265; _localctx.By = Match(NUMBER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 267; attribute();
				}
				}
				State = 270;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ATTRIBUTE_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_attribute);
		int _la;
		try {
			State = 285;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; _localctx.Name = Match(ATTRIBUTE_ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; _localctx.Name = Match(ATTRIBUTE_ID);
				State = 274; Match(5);
				State = 275; constant();
				State = 280;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 276; Match(3);
					State = 277; constant();
					}
					}
					State = 282;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 283; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E\x122\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x3\x2\x3\x2\x3\x3\x6\x3\x34\n"+
		"\x3\r\x3\xE\x3\x35\x3\x4\x3\x4\x3\x4\x5\x4;\n\x4\x3\x5\x5\x5>\n\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x5\x5\x44\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x5\x6J\n"+
		"\x6\x3\x6\x3\x6\x5\x6N\n\x6\x3\x6\x3\x6\x5\x6R\n\x6\x3\x6\x3\x6\x5\x6"+
		"V\n\x6\x3\x6\x3\x6\x5\x6Z\n\x6\x3\x6\x3\x6\x5\x6^\n\x6\x3\x6\x3\x6\x5"+
		"\x6\x62\n\x6\x3\x6\x3\x6\x5\x6\x66\n\x6\x3\x6\x3\x6\x5\x6j\n\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x5\x6p\n\x6\x3\a\x3\a\x5\at\n\a\x3\a\x3\a\x5\ax\n\a"+
		"\x3\a\x3\a\x3\a\x5\a}\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x85\n\a\x3"+
		"\a\x3\a\x5\a\x89\n\a\x3\a\x3\a\x3\a\x5\a\x8E\n\a\x3\a\x3\a\x5\a\x92\n"+
		"\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA7\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x5\v\xB7\n\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x5\v\xBE\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\a\f\xC6\n\f\f\f\xE"+
		"\f\xC9\v\f\x3\f\x3\f\x5\f\xCD\n\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\xDB\n\xE\f\xE\xE\xE\xDE\v\xE\x3\xF\x5\xF"+
		"\xE1\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x5\x10\xE8\n\x10\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\xF1\n\x11\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\xFD\n\x15"+
		"\f\x15\xE\x15\x100\v\x15\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x106\n\x15"+
		"\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x6\x17\x10F\n\x17\r"+
		"\x17\xE\x17\x110\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\a\x18\x119"+
		"\n\x18\f\x18\xE\x18\x11C\v\x18\x3\x18\x3\x18\x5\x18\x120\n\x18\x3\x18"+
		"\x2\x2\x2\x19\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14"+
		"\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2"+
		"\x2\x2\x138\x2\x30\x3\x2\x2\x2\x4\x33\x3\x2\x2\x2\x6:\x3\x2\x2\x2\b=\x3"+
		"\x2\x2\x2\no\x3\x2\x2\x2\f\x91\x3\x2\x2\x2\xE\xA6\x3\x2\x2\x2\x10\xA8"+
		"\x3\x2\x2\x2\x12\xAE\x3\x2\x2\x2\x14\xB2\x3\x2\x2\x2\x16\xBF\x3\x2\x2"+
		"\x2\x18\xD0\x3\x2\x2\x2\x1A\xD7\x3\x2\x2\x2\x1C\xE0\x3\x2\x2\x2\x1E\xE7"+
		"\x3\x2\x2\x2 \xF0\x3\x2\x2\x2\"\xF2\x3\x2\x2\x2$\xF4\x3\x2\x2\x2&\xF6"+
		"\x3\x2\x2\x2(\x105\x3\x2\x2\x2*\x107\x3\x2\x2\x2,\x10E\x3\x2\x2\x2.\x11F"+
		"\x3\x2\x2\x2\x30\x31\x5\x4\x3\x2\x31\x3\x3\x2\x2\x2\x32\x34\x5\x6\x4\x2"+
		"\x33\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2\x35\x33\x3\x2\x2\x2\x35\x36\x3"+
		"\x2\x2\x2\x36\x5\x3\x2\x2\x2\x37;\x5\n\x6\x2\x38;\x5\b\x5\x2\x39;\a\x1E"+
		"\x2\x2:\x37\x3\x2\x2\x2:\x38\x3\x2\x2\x2:\x39\x3\x2\x2\x2;\a\x3\x2\x2"+
		"\x2<>\x5,\x17\x2=<\x3\x2\x2\x2=>\x3\x2\x2\x2>?\x3\x2\x2\x2?@\a\x14\x2"+
		"\x2@\x43\a\x17\x2\x2\x41\x42\a\b\x2\x2\x42\x44\x5\x1E\x10\x2\x43\x41\x3"+
		"\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x46\a\x16\x2\x2"+
		"\x46G\x5\n\x6\x2G\t\x3\x2\x2\x2HJ\x5,\x17\x2IH\x3\x2\x2\x2IJ\x3\x2\x2"+
		"\x2JK\x3\x2\x2\x2Kp\x5 \x11\x2LN\x5,\x17\x2ML\x3\x2\x2\x2MN\x3\x2\x2\x2"+
		"NO\x3\x2\x2\x2Op\a\x13\x2\x2PR\x5,\x17\x2QP\x3\x2\x2\x2QR\x3\x2\x2\x2"+
		"RS\x3\x2\x2\x2Sp\x5\f\a\x2TV\x5,\x17\x2UT\x3\x2\x2\x2UV\x3\x2\x2\x2VW"+
		"\x3\x2\x2\x2Wp\x5\x12\n\x2XZ\x5,\x17\x2YX\x3\x2\x2\x2YZ\x3\x2\x2\x2Z["+
		"\x3\x2\x2\x2[p\x5\x16\f\x2\\^\x5,\x17\x2]\\\x3\x2\x2\x2]^\x3\x2\x2\x2"+
		"^_\x3\x2\x2\x2_p\x5\xE\b\x2`\x62\x5,\x17\x2\x61`\x3\x2\x2\x2\x61\x62\x3"+
		"\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63p\x5\x10\t\x2\x64\x66\x5,\x17\x2\x65"+
		"\x64\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66g\x3\x2\x2\x2gp\x5\x14\v\x2hj"+
		"\x5,\x17\x2ih\x3\x2\x2\x2ij\x3\x2\x2\x2jk\x3\x2\x2\x2kl\a\t\x2\x2lm\x5"+
		"\n\x6\x2mn\a\x4\x2\x2np\x3\x2\x2\x2oI\x3\x2\x2\x2oM\x3\x2\x2\x2oQ\x3\x2"+
		"\x2\x2oU\x3\x2\x2\x2oY\x3\x2\x2\x2o]\x3\x2\x2\x2o\x61\x3\x2\x2\x2o\x65"+
		"\x3\x2\x2\x2oi\x3\x2\x2\x2p\v\x3\x2\x2\x2qs\a\v\x2\x2rt\a\x17\x2\x2sr"+
		"\x3\x2\x2\x2st\x3\x2\x2\x2tu\x3\x2\x2\x2uw\a\t\x2\x2vx\x5\x1A\xE\x2wv"+
		"\x3\x2\x2\x2wx\x3\x2\x2\x2xy\x3\x2\x2\x2y|\a\x4\x2\x2z{\a\b\x2\x2{}\x5"+
		"\x1E\x10\x2|z\x3\x2\x2\x2|}\x3\x2\x2\x2}~\x3\x2\x2\x2~\x7F\a\x10\x2\x2"+
		"\x7F\x80\x5\x4\x3\x2\x80\x81\a\x11\x2\x2\x81\x92\x3\x2\x2\x2\x82\x84\a"+
		"\v\x2\x2\x83\x85\a\x17\x2\x2\x84\x83\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85"+
		"\x86\x3\x2\x2\x2\x86\x88\a\t\x2\x2\x87\x89\x5\x1A\xE\x2\x88\x87\x3\x2"+
		"\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2\x8A\x8D\a\x4\x2\x2\x8B"+
		"\x8C\a\b\x2\x2\x8C\x8E\x5\x1E\x10\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2"+
		"\x2\x2\x8E\x8F\x3\x2\x2\x2\x8F\x90\a\x16\x2\x2\x90\x92\x5\n\x6\x2\x91"+
		"q\x3\x2\x2\x2\x91\x82\x3\x2\x2\x2\x92\r\x3\x2\x2\x2\x93\x94\a\f\x2\x2"+
		"\x94\x95\a\t\x2\x2\x95\x96\a\x17\x2\x2\x96\x97\a\x15\x2\x2\x97\x98\x5"+
		"\n\x6\x2\x98\x99\a\x4\x2\x2\x99\x9A\x5\n\x6\x2\x9A\xA7\x3\x2\x2\x2\x9B"+
		"\x9C\a\f\x2\x2\x9C\x9D\a\t\x2\x2\x9D\x9E\a\x14\x2\x2\x9E\x9F\a\x17\x2"+
		"\x2\x9F\xA0\a\b\x2\x2\xA0\xA1\a\x17\x2\x2\xA1\xA2\a\x15\x2\x2\xA2\xA3"+
		"\x5\n\x6\x2\xA3\xA4\a\x4\x2\x2\xA4\xA5\x5\n\x6\x2\xA5\xA7\x3\x2\x2\x2"+
		"\xA6\x93\x3\x2\x2\x2\xA6\x9B\x3\x2\x2\x2\xA7\xF\x3\x2\x2\x2\xA8\xA9\a"+
		"\r\x2\x2\xA9\xAA\a\t\x2\x2\xAA\xAB\x5\n\x6\x2\xAB\xAC\a\x4\x2\x2\xAC\xAD"+
		"\x5\n\x6\x2\xAD\x11\x3\x2\x2\x2\xAE\xAF\a\x10\x2\x2\xAF\xB0\x5\x4\x3\x2"+
		"\xB0\xB1\a\x11\x2\x2\xB1\x13\x3\x2\x2\x2\xB2\xB3\a\x17\x2\x2\xB3\xB4\a"+
		"\x16\x2\x2\xB4\xBD\x5\n\x6\x2\xB5\xB7\x5,\x17\x2\xB6\xB5\x3\x2\x2\x2\xB6"+
		"\xB7\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\a\xE\x2\x2\xB9\xBA\a\t\x2"+
		"\x2\xBA\xBB\x5\n\x6\x2\xBB\xBC\a\x4\x2\x2\xBC\xBE\x3\x2\x2\x2\xBD\xB6"+
		"\x3\x2\x2\x2\xBD\xBE\x3\x2\x2\x2\xBE\x15\x3\x2\x2\x2\xBF\xC0\a\xE\x2\x2"+
		"\xC0\xC1\a\t\x2\x2\xC1\xC2\x5\n\x6\x2\xC2\xC3\a\x4\x2\x2\xC3\xC7\x5\x4"+
		"\x3\x2\xC4\xC6\x5\x18\r\x2\xC5\xC4\x3\x2\x2\x2\xC6\xC9\x3\x2\x2\x2\xC7"+
		"\xC5\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xCC\x3\x2\x2\x2\xC9\xC7\x3\x2"+
		"\x2\x2\xCA\xCB\a\xF\x2\x2\xCB\xCD\x5\x4\x3\x2\xCC\xCA\x3\x2\x2\x2\xCC"+
		"\xCD\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\a\x11\x2\x2\xCF\x17\x3\x2"+
		"\x2\x2\xD0\xD1\a\xF\x2\x2\xD1\xD2\a\xE\x2\x2\xD2\xD3\a\t\x2\x2\xD3\xD4"+
		"\x5\n\x6\x2\xD4\xD5\a\x4\x2\x2\xD5\xD6\x5\x4\x3\x2\xD6\x19\x3\x2\x2\x2"+
		"\xD7\xDC\x5\x1C\xF\x2\xD8\xD9\a\x5\x2\x2\xD9\xDB\x5\x1C\xF\x2\xDA\xD8"+
		"\x3\x2\x2\x2\xDB\xDE\x3\x2\x2\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2"+
		"\x2\xDD\x1B\x3\x2\x2\x2\xDE\xDC\x3\x2\x2\x2\xDF\xE1\x5,\x17\x2\xE0\xDF"+
		"\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3\a\x17\x2"+
		"\x2\xE3\xE4\a\b\x2\x2\xE4\xE5\x5\x1E\x10\x2\xE5\x1D\x3\x2\x2\x2\xE6\xE8"+
		"\x5,\x17\x2\xE7\xE6\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8\xE9\x3\x2\x2\x2"+
		"\xE9\xEA\a\x17\x2\x2\xEA\x1F\x3\x2\x2\x2\xEB\xF1\x5\"\x12\x2\xEC\xF1\x5"+
		"$\x13\x2\xED\xF1\x5&\x14\x2\xEE\xF1\x5(\x15\x2\xEF\xF1\x5*\x16\x2\xF0"+
		"\xEB\x3\x2\x2\x2\xF0\xEC\x3\x2\x2\x2\xF0\xED\x3\x2\x2\x2\xF0\xEE\x3\x2"+
		"\x2\x2\xF0\xEF\x3\x2\x2\x2\xF1!\x3\x2\x2\x2\xF2\xF3\a\x1C\x2\x2\xF3#\x3"+
		"\x2\x2\x2\xF4\xF5\a\x1B\x2\x2\xF5%\x3\x2\x2\x2\xF6\xF7\a\x12\x2\x2\xF7"+
		"\'\x3\x2\x2\x2\xF8\xF9\a\a\x2\x2\xF9\xFE\x5\n\x6\x2\xFA\xFB\a\x5\x2\x2"+
		"\xFB\xFD\x5\n\x6\x2\xFC\xFA\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE\xFC\x3"+
		"\x2\x2\x2\xFE\xFF\x3\x2\x2\x2\xFF\x101\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2"+
		"\x101\x102\a\x3\x2\x2\x102\x106\x3\x2\x2\x2\x103\x104\a\a\x2\x2\x104\x106"+
		"\a\x3\x2\x2\x105\xF8\x3\x2\x2\x2\x105\x103\x3\x2\x2\x2\x106)\x3\x2\x2"+
		"\x2\x107\x108\a\x1C\x2\x2\x108\x109\a\n\x2\x2\x109\x10A\a\x1C\x2\x2\x10A"+
		"\x10B\a\x6\x2\x2\x10B\x10C\a\x1C\x2\x2\x10C+\x3\x2\x2\x2\x10D\x10F\x5"+
		".\x18\x2\x10E\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x10E\x3\x2\x2"+
		"\x2\x110\x111\x3\x2\x2\x2\x111-\x3\x2\x2\x2\x112\x120\a\x1A\x2\x2\x113"+
		"\x114\a\x1A\x2\x2\x114\x115\a\a\x2\x2\x115\x11A\x5 \x11\x2\x116\x117\a"+
		"\x5\x2\x2\x117\x119\x5 \x11\x2\x118\x116\x3\x2\x2\x2\x119\x11C\x3\x2\x2"+
		"\x2\x11A\x118\x3\x2\x2\x2\x11A\x11B\x3\x2\x2\x2\x11B\x11D\x3\x2\x2\x2"+
		"\x11C\x11A\x3\x2\x2\x2\x11D\x11E\a\x3\x2\x2\x11E\x120\x3\x2\x2\x2\x11F"+
		"\x112\x3\x2\x2\x2\x11F\x113\x3\x2\x2\x2\x120/\x3\x2\x2\x2%\x35:=\x43I"+
		"MQUY]\x61\x65iosw|\x84\x88\x8D\x91\xA6\xB6\xBD\xC7\xCC\xDC\xE0\xE7\xF0"+
		"\xFE\x105\x110\x11A\x11F";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
