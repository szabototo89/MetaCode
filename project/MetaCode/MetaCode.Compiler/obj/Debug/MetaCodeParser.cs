//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\C#\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__17=1, T__16=2, T__15=3, T__14=4, T__13=5, T__12=6, T__11=7, T__10=8, 
		T__9=9, T__8=10, T__7=11, T__6=12, T__5=13, T__4=14, T__3=15, T__2=16, 
		T__1=17, T__0=18, FUNCTION=19, FOREACH=20, WHILE=21, IF=22, ELSE=23, DO=24, 
		END=25, BOOLEAN=26, SKIP=27, VAR=28, IN=29, ASSIGN=30, AND=31, OR=32, 
		NOT=33, NULL=34, LEFT_PARENTHESIS=35, RIGHT_PARENTHESIS=36, ID=37, COMMENT=38, 
		MULTILINE_COMMENT=39, ATTRIBUTE_ID=40, STRING=41, NUMBER=42, WHITESPACE=43, 
		NEWLINE=44;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'.'", "','", "'+'", "'*'", "'-'", "'['", "':'", "'<'", 
		"'!='", "';'", "'<='", "'to'", "'>'", "'by'", "'=='", "'/'", "'>='", "'function'", 
		"'foreach'", "'while'", "'if'", "'else'", "'do'", "'end'", "BOOLEAN", 
		"'skip'", "'var'", "'in'", "'='", "'and'", "'or'", "'not'", "'null'", 
		"'('", "')'", "ID", "COMMENT", "MULTILINE_COMMENT", "ATTRIBUTE_ID", "STRING", 
		"NUMBER", "WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_expression = 4, RULE_functionCallExpression = 5, RULE_memberExpression = 6, 
		RULE_primaryExpression = 7, RULE_functionExpression = 8, RULE_foreachStatement = 9, 
		RULE_whileStatement = 10, RULE_blockStatement = 11, RULE_skipStatement = 12, 
		RULE_assignmentExpression = 13, RULE_ifStatement = 14, RULE_elseIfStatement = 15, 
		RULE_formalParameterList = 16, RULE_formalParameter = 17, RULE_actualParameterList = 18, 
		RULE_typeName = 19, RULE_constant = 20, RULE_identifier = 21, RULE_numberConstant = 22, 
		RULE_stringConstant = 23, RULE_booleanConstant = 24, RULE_arrayConstant = 25, 
		RULE_intervalConstant = 26, RULE_attributes = 27, RULE_attribute = 28;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "expression", 
		"functionCallExpression", "memberExpression", "primaryExpression", "functionExpression", 
		"foreachStatement", "whileStatement", "blockStatement", "skipStatement", 
		"assignmentExpression", "ifStatement", "elseIfStatement", "formalParameterList", 
		"formalParameter", "actualParameterList", "typeName", "constant", "identifier", 
		"numberConstant", "stringConstant", "booleanConstant", "arrayConstant", 
		"intervalConstant", "attributes", "attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 60; statement();
				State = 61; Match(11);
				}
				}
				State = 65;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << FUNCTION) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << DO) | (1L << BOOLEAN) | (1L << SKIP) | (1L << VAR) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public AttributesContext Attributes;
		public VariableDeclarationContext VariableDeclaration;
		public IfStatementContext If;
		public BlockStatementContext Block;
		public ForeachStatementContext Foreach;
		public WhileStatementContext While;
		public SkipStatementContext Skip;
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public SkipStatementContext skipStatement() {
			return GetRuleContext<SkipStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 92;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67; _localctx.Expression = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 68; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 71; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 72; _localctx.Attributes = attributes();
					}
				}

				State = 75; _localctx.If = ifStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 76; _localctx.Attributes = attributes();
					}
				}

				State = 79; _localctx.Block = blockStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 80; _localctx.Attributes = attributes();
					}
				}

				State = 83; _localctx.Foreach = foreachStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 85;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 84; _localctx.Attributes = attributes();
					}
				}

				State = 87; _localctx.While = whileStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 89;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 88; _localctx.Attributes = attributes();
					}
				}

				State = 91; _localctx.Skip = skipStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 94; _localctx.Attributes = attributes();
				}
			}

			State = 97; Match(VAR);
			State = 98; _localctx.VariableName = Match(ID);
			State = 101;
			_la = _input.La(1);
			if (_la==8) {
				{
				State = 99; Match(8);
				State = 100; _localctx.VariableType = typeName();
				}
			}

			State = 103; Match(ASSIGN);
			State = 104; _localctx.VariableDefaultValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Expression;
		public PrimaryExpressionContext PrimaryExpression;
		public FunctionCallExpressionContext FunctionCallExpression;
		public MemberExpressionContext MemberExpression;
		public ExpressionContext Right;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(MetaCodeParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MetaCodeParser.OR, 0); }
		public MemberExpressionContext memberExpression() {
			return GetRuleContext<MemberExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MetaCodeParser.NOT, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 107; _localctx.Operator = Match(NOT);
				State = 108; _localctx.Expression = expression(13);
				}
				break;

			case 2:
				{
				State = 109; _localctx.PrimaryExpression = primaryExpression();
				}
				break;

			case 3:
				{
				State = 110; _localctx.FunctionCallExpression = functionCallExpression();
				}
				break;

			case 4:
				{
				State = 111; _localctx.MemberExpression = memberExpression();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 152;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 150;
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 114;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 115; _localctx.Operator = Match(4);
						State = 116; _localctx.Right = expression(13);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 117;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 118; _localctx.Operator = Match(6);
						State = 119; _localctx.Right = expression(12);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 120;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 121; _localctx.Operator = Match(5);
						State = 122; _localctx.Right = expression(11);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 123;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 124; _localctx.Operator = Match(17);
						State = 125; _localctx.Right = expression(10);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 126;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 127; _localctx.Operator = Match(9);
						State = 128; _localctx.Right = expression(9);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 129;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 130; _localctx.Operator = Match(14);
						State = 131; _localctx.Right = expression(8);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 133; _localctx.Operator = Match(12);
						State = 134; _localctx.Right = expression(7);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 136; _localctx.Operator = Match(18);
						State = 137; _localctx.Right = expression(6);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 139; _localctx.Operator = Match(16);
						State = 140; _localctx.Right = expression(5);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 141;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 142; _localctx.Operator = Match(10);
						State = 143; _localctx.Right = expression(4);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 145; _localctx.Operator = Match(AND);
						State = 146; _localctx.Right = expression(3);
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 148; _localctx.Operator = Match(OR);
						State = 149; _localctx.Right = expression(2);
						}
						break;
					}
					} 
				}
				State = 154;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionCallExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; primaryExpression();
			State = 156; Match(LEFT_PARENTHESIS);
			State = 158;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << FUNCTION) | (1L << BOOLEAN) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 157; expression(0);
				}
			}

			State = 160; Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberExpressionContext : ParserRuleContext {
		public FunctionCallExpressionContext functionCallExpression(int i) {
			return GetRuleContext<FunctionCallExpressionContext>(i);
		}
		public IReadOnlyList<FunctionCallExpressionContext> functionCallExpression() {
			return GetRuleContexts<FunctionCallExpressionContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public IReadOnlyList<IdentifierContext> identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public MemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_memberExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberExpressionContext memberExpression() {
		MemberExpressionContext _localctx = new MemberExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_memberExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; primaryExpression();
			State = 168;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 163; Match(2);
					State = 166;
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						State = 164; identifier();
						}
						break;

					case 2:
						{
						State = 165; functionCallExpression();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 170;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IdentifierContext Id;
		public FunctionExpressionContext Function;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_primaryExpression);
		int _la;
		try {
			State = 195;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 172; _localctx.Attributes = attributes();
					}
				}

				State = 175; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 177;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 176; _localctx.Attributes = attributes();
					}
				}

				State = 179; _localctx.Id = identifier();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 180; _localctx.Attributes = attributes();
					}
				}

				State = 183; _localctx.Function = functionExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 184; _localctx.Attributes = attributes();
					}
				}

				State = 187; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 189;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 188; _localctx.Attributes = attributes();
					}
				}

				State = 191; Match(LEFT_PARENTHESIS);
				State = 192; _localctx.InnerExpression = expression(0);
				State = 193; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		public IdentifierContext FunctionName;
		public FormalParameterListContext Parameters;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public ExpressionContext BodyExpression;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionExpression);
		int _la;
		try {
			State = 229;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 197; Match(FUNCTION);
				State = 199;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 198; _localctx.FunctionName = identifier();
					}
				}

				State = 201; Match(LEFT_PARENTHESIS);
				State = 203;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 202; _localctx.Parameters = formalParameterList();
					}
				}

				State = 205; Match(RIGHT_PARENTHESIS);
				State = 208;
				_la = _input.La(1);
				if (_la==8) {
					{
					State = 206; Match(8);
					State = 207; _localctx.ReturnType = typeName();
					}
				}

				State = 210; Match(DO);
				State = 211; _localctx.BodyStatements = statements();
				State = 212; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(FUNCTION);
				State = 216;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 215; _localctx.FunctionName = identifier();
					}
				}

				State = 218; Match(LEFT_PARENTHESIS);
				State = 220;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 219; _localctx.Parameters = formalParameterList();
					}
				}

				State = 222; Match(RIGHT_PARENTHESIS);
				State = 225;
				_la = _input.La(1);
				if (_la==8) {
					{
					State = 223; Match(8);
					State = 224; _localctx.ReturnType = typeName();
					}
				}

				State = 227; Match(ASSIGN);
				State = 228; _localctx.BodyExpression = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken Var;
		public IdentifierContext Id;
		public TypeNameContext VariableType;
		public ExpressionContext ArrayExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(FOREACH);
			State = 232; Match(LEFT_PARENTHESIS);
			State = 234;
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 233; _localctx.Var = Match(VAR);
				}
			}

			State = 236; _localctx.Id = identifier();
			State = 239;
			_la = _input.La(1);
			if (_la==8) {
				{
				State = 237; Match(8);
				State = 238; _localctx.VariableType = typeName();
				}
			}

			State = 241; Match(IN);
			State = 242; _localctx.ArrayExpression = expression(0);
			State = 243; Match(RIGHT_PARENTHESIS);
			State = 244; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(WHILE);
			State = 247; Match(LEFT_PARENTHESIS);
			State = 248; _localctx.ConditionExpression = expression(0);
			State = 249; Match(RIGHT_PARENTHESIS);
			State = 250; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252; Match(DO);
			State = 253; _localctx.Body = statements();
			State = 254; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipStatementContext : ParserRuleContext {
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public SkipStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_skipStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterSkipStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitSkipStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipStatementContext skipStatement() {
		SkipStatementContext _localctx = new SkipStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_skipStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(SKIP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IdentifierContext Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; _localctx.Variable = identifier();
			State = 259; Match(ASSIGN);
			State = 260; _localctx.Value = expression(0);
			State = 269;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 262;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 261; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 264; Match(IF);
				State = 265; Match(LEFT_PARENTHESIS);
				State = 266; _localctx.ConditionalExpression = expression(0);
				State = 267; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext Condition;
		public StatementsContext Statements;
		public ElseIfStatementContext ElseIfExpressions;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public IReadOnlyList<ElseIfStatementContext> elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(IF);
			State = 272; Match(LEFT_PARENTHESIS);
			State = 273; _localctx.Condition = expression(0);
			State = 274; Match(RIGHT_PARENTHESIS);
			State = 275; _localctx.Statements = statements();
			State = 279;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 276; _localctx.ElseIfExpressions = elseIfStatement();
					}
					} 
				}
				State = 281;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,33,_ctx);
			}
			State = 284;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 282; Match(ELSE);
				State = 283; _localctx.ElseStatements = statements();
				}
			}

			State = 286; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(ELSE);
			State = 289; Match(IF);
			State = 290; Match(LEFT_PARENTHESIS);
			State = 291; expression(0);
			State = 292; Match(RIGHT_PARENTHESIS);
			State = 293; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; formalParameter();
			State = 300;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 296; Match(3);
				State = 297; formalParameter();
				}
				}
				State = 302;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 303; attributes();
				}
			}

			State = 306; identifier();
			State = 307; Match(8);
			State = 308; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actualParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; expression(0);
			State = 315;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 311; Match(3);
				State = 312; expression(0);
				}
				}
				State = 317;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 318; attributes();
				}
			}

			State = 321; Match(ID);
			State = 326;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==2) {
				{
				{
				State = 322; Match(2);
				State = 323; Match(ID);
				}
				}
				State = 328;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberConstantContext Number;
		public StringConstantContext String;
		public BooleanConstantContext Boolean;
		public ArrayConstantContext Array;
		public IntervalConstantContext Interval;
		public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		public ArrayConstantContext arrayConstant() {
			return GetRuleContext<ArrayConstantContext>(0);
		}
		public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		public IntervalConstantContext intervalConstant() {
			return GetRuleContext<IntervalConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constant);
		try {
			State = 334;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 329; _localctx.Number = numberConstant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330; _localctx.String = stringConstant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 331; _localctx.Boolean = booleanConstant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 332; _localctx.Array = arrayConstant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 333; _localctx.Interval = intervalConstant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken Id;
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_identifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; _localctx.Id = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numberConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_numberConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_stringConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_booleanConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstantContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arrayConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArrayConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArrayConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstantContext arrayConstant() {
		ArrayConstantContext _localctx = new ArrayConstantContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_arrayConstant);
		int _la;
		try {
			State = 357;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 344; Match(7);
				State = 345; expression(0);
				State = 350;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 346; Match(3);
					State = 347; expression(0);
					}
					}
					State = 352;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 353; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 355; Match(7);
				State = 356; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalConstantContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_intervalConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIntervalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIntervalConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalConstantContext intervalConstant() {
		IntervalConstantContext _localctx = new IntervalConstantContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_intervalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359; _localctx.Start = Match(NUMBER);
			State = 360; Match(13);
			State = 361; _localctx.End = Match(NUMBER);
			State = 364;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 362; Match(15);
				State = 363; _localctx.By = Match(NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 366; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 369;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,44,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 371; _localctx.Name = Match(ATTRIBUTE_ID);
			State = 383;
			switch ( Interpreter.AdaptivePredict(_input,46,_ctx) ) {
			case 1:
				{
				State = 372; Match(LEFT_PARENTHESIS);
				State = 373; constant();
				State = 378;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 374; Match(3);
					State = 375; constant();
					}
					}
					State = 380;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 381; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3.\x184\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x6\x3\x42\n\x3\r\x3\xE\x3\x43\x3\x4\x3\x4\x5\x4H\n\x4\x3\x4\x3"+
		"\x4\x5\x4L\n\x4\x3\x4\x3\x4\x5\x4P\n\x4\x3\x4\x3\x4\x5\x4T\n\x4\x3\x4"+
		"\x3\x4\x5\x4X\n\x4\x3\x4\x3\x4\x5\x4\\\n\x4\x3\x4\x5\x4_\n\x4\x3\x5\x5"+
		"\x5\x62\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5h\n\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6s\n\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x99\n\x6\f"+
		"\x6\xE\x6\x9C\v\x6\x3\a\x3\a\x3\a\x5\a\xA1\n\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\b\x3\b\x5\b\xA9\n\b\x6\b\xAB\n\b\r\b\xE\b\xAC\x3\t\x5\t\xB0\n\t\x3\t"+
		"\x3\t\x5\t\xB4\n\t\x3\t\x3\t\x5\t\xB8\n\t\x3\t\x3\t\x5\t\xBC\n\t\x3\t"+
		"\x3\t\x5\t\xC0\n\t\x3\t\x3\t\x3\t\x3\t\x5\t\xC6\n\t\x3\n\x3\n\x5\n\xCA"+
		"\n\n\x3\n\x3\n\x5\n\xCE\n\n\x3\n\x3\n\x3\n\x5\n\xD3\n\n\x3\n\x3\n\x3\n"+
		"\x3\n\x3\n\x3\n\x5\n\xDB\n\n\x3\n\x3\n\x5\n\xDF\n\n\x3\n\x3\n\x3\n\x5"+
		"\n\xE4\n\n\x3\n\x3\n\x5\n\xE8\n\n\x3\v\x3\v\x3\v\x5\v\xED\n\v\x3\v\x3"+
		"\v\x3\v\x5\v\xF2\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x109"+
		"\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x110\n\xF\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\a\x10\x118\n\x10\f\x10\xE\x10\x11B\v\x10\x3\x10"+
		"\x3\x10\x5\x10\x11F\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\a\x12\x12D\n\x12\f\x12\xE\x12"+
		"\x130\v\x12\x3\x13\x5\x13\x133\n\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14"+
		"\x3\x14\x3\x14\a\x14\x13C\n\x14\f\x14\xE\x14\x13F\v\x14\x3\x15\x5\x15"+
		"\x142\n\x15\x3\x15\x3\x15\x3\x15\a\x15\x147\n\x15\f\x15\xE\x15\x14A\v"+
		"\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5\x16\x151\n\x16\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\a\x1B\x15F\n\x1B\f\x1B\xE\x1B\x162\v\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x168\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x16F\n\x1C"+
		"\x3\x1D\x6\x1D\x172\n\x1D\r\x1D\xE\x1D\x173\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\a\x1E\x17B\n\x1E\f\x1E\xE\x1E\x17E\v\x1E\x3\x1E\x3\x1E\x5\x1E"+
		"\x182\n\x1E\x3\x1E\x2\x2\x3\n\x1F\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE"+
		"\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$"+
		"\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2\x2\x2\x1AC"+
		"\x2<\x3\x2\x2\x2\x4\x41\x3\x2\x2\x2\x6^\x3\x2\x2\x2\b\x61\x3\x2\x2\x2"+
		"\nr\x3\x2\x2\x2\f\x9D\x3\x2\x2\x2\xE\xA4\x3\x2\x2\x2\x10\xC5\x3\x2\x2"+
		"\x2\x12\xE7\x3\x2\x2\x2\x14\xE9\x3\x2\x2\x2\x16\xF8\x3\x2\x2\x2\x18\xFE"+
		"\x3\x2\x2\x2\x1A\x102\x3\x2\x2\x2\x1C\x104\x3\x2\x2\x2\x1E\x111\x3\x2"+
		"\x2\x2 \x122\x3\x2\x2\x2\"\x129\x3\x2\x2\x2$\x132\x3\x2\x2\x2&\x138\x3"+
		"\x2\x2\x2(\x141\x3\x2\x2\x2*\x150\x3\x2\x2\x2,\x152\x3\x2\x2\x2.\x154"+
		"\x3\x2\x2\x2\x30\x156\x3\x2\x2\x2\x32\x158\x3\x2\x2\x2\x34\x167\x3\x2"+
		"\x2\x2\x36\x169\x3\x2\x2\x2\x38\x171\x3\x2\x2\x2:\x175\x3\x2\x2\x2<=\x5"+
		"\x4\x3\x2=\x3\x3\x2\x2\x2>?\x5\x6\x4\x2?@\a\r\x2\x2@\x42\x3\x2\x2\x2\x41"+
		">\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x41\x3\x2\x2\x2\x43\x44\x3\x2\x2"+
		"\x2\x44\x5\x3\x2\x2\x2\x45_\x5\n\x6\x2\x46H\x5\x38\x1D\x2G\x46\x3\x2\x2"+
		"\x2GH\x3\x2\x2\x2HI\x3\x2\x2\x2I_\x5\b\x5\x2JL\x5\x38\x1D\x2KJ\x3\x2\x2"+
		"\x2KL\x3\x2\x2\x2LM\x3\x2\x2\x2M_\x5\x1E\x10\x2NP\x5\x38\x1D\x2ON\x3\x2"+
		"\x2\x2OP\x3\x2\x2\x2PQ\x3\x2\x2\x2Q_\x5\x18\r\x2RT\x5\x38\x1D\x2SR\x3"+
		"\x2\x2\x2ST\x3\x2\x2\x2TU\x3\x2\x2\x2U_\x5\x14\v\x2VX\x5\x38\x1D\x2WV"+
		"\x3\x2\x2\x2WX\x3\x2\x2\x2XY\x3\x2\x2\x2Y_\x5\x16\f\x2Z\\\x5\x38\x1D\x2"+
		"[Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\]\x3\x2\x2\x2]_\x5\x1A\xE\x2^\x45\x3\x2"+
		"\x2\x2^G\x3\x2\x2\x2^K\x3\x2\x2\x2^O\x3\x2\x2\x2^S\x3\x2\x2\x2^W\x3\x2"+
		"\x2\x2^[\x3\x2\x2\x2_\a\x3\x2\x2\x2`\x62\x5\x38\x1D\x2\x61`\x3\x2\x2\x2"+
		"\x61\x62\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\a\x1E\x2\x2\x64g\a\'"+
		"\x2\x2\x65\x66\a\n\x2\x2\x66h\x5(\x15\x2g\x65\x3\x2\x2\x2gh\x3\x2\x2\x2"+
		"hi\x3\x2\x2\x2ij\a \x2\x2jk\x5\n\x6\x2k\t\x3\x2\x2\x2lm\b\x6\x1\x2mn\a"+
		"#\x2\x2ns\x5\n\x6\xFos\x5\x10\t\x2ps\x5\f\a\x2qs\x5\xE\b\x2rl\x3\x2\x2"+
		"\x2ro\x3\x2\x2\x2rp\x3\x2\x2\x2rq\x3\x2\x2\x2s\x9A\x3\x2\x2\x2tu\f\xE"+
		"\x2\x2uv\a\x6\x2\x2v\x99\x5\n\x6\xFwx\f\r\x2\x2xy\a\b\x2\x2y\x99\x5\n"+
		"\x6\xEz{\f\f\x2\x2{|\a\a\x2\x2|\x99\x5\n\x6\r}~\f\v\x2\x2~\x7F\a\x13\x2"+
		"\x2\x7F\x99\x5\n\x6\f\x80\x81\f\n\x2\x2\x81\x82\a\v\x2\x2\x82\x99\x5\n"+
		"\x6\v\x83\x84\f\t\x2\x2\x84\x85\a\x10\x2\x2\x85\x99\x5\n\x6\n\x86\x87"+
		"\f\b\x2\x2\x87\x88\a\xE\x2\x2\x88\x99\x5\n\x6\t\x89\x8A\f\a\x2\x2\x8A"+
		"\x8B\a\x14\x2\x2\x8B\x99\x5\n\x6\b\x8C\x8D\f\x6\x2\x2\x8D\x8E\a\x12\x2"+
		"\x2\x8E\x99\x5\n\x6\a\x8F\x90\f\x5\x2\x2\x90\x91\a\f\x2\x2\x91\x99\x5"+
		"\n\x6\x6\x92\x93\f\x4\x2\x2\x93\x94\a!\x2\x2\x94\x99\x5\n\x6\x5\x95\x96"+
		"\f\x3\x2\x2\x96\x97\a\"\x2\x2\x97\x99\x5\n\x6\x4\x98t\x3\x2\x2\x2\x98"+
		"w\x3\x2\x2\x2\x98z\x3\x2\x2\x2\x98}\x3\x2\x2\x2\x98\x80\x3\x2\x2\x2\x98"+
		"\x83\x3\x2\x2\x2\x98\x86\x3\x2\x2\x2\x98\x89\x3\x2\x2\x2\x98\x8C\x3\x2"+
		"\x2\x2\x98\x8F\x3\x2\x2\x2\x98\x92\x3\x2\x2\x2\x98\x95\x3\x2\x2\x2\x99"+
		"\x9C\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9B\v\x3\x2\x2"+
		"\x2\x9C\x9A\x3\x2\x2\x2\x9D\x9E\x5\x10\t\x2\x9E\xA0\a%\x2\x2\x9F\xA1\x5"+
		"\n\x6\x2\xA0\x9F\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2"+
		"\xA3\a&\x2\x2\xA3\r\x3\x2\x2\x2\xA4\xAA\x5\x10\t\x2\xA5\xA8\a\x4\x2\x2"+
		"\xA6\xA9\x5,\x17\x2\xA7\xA9\x5\f\a\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA7\x3\x2"+
		"\x2\x2\xA9\xAB\x3\x2\x2\x2\xAA\xA5\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC"+
		"\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xF\x3\x2\x2\x2\xAE\xB0\x5\x38"+
		"\x1D\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1"+
		"\xC6\x5*\x16\x2\xB2\xB4\x5\x38\x1D\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2"+
		"\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5\xC6\x5,\x17\x2\xB6\xB8\x5\x38\x1D\x2\xB7"+
		"\xB6\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xC6\x5\x12"+
		"\n\x2\xBA\xBC\x5\x38\x1D\x2\xBB\xBA\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC"+
		"\xBD\x3\x2\x2\x2\xBD\xC6\x5\x1C\xF\x2\xBE\xC0\x5\x38\x1D\x2\xBF\xBE\x3"+
		"\x2\x2\x2\xBF\xC0\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xC2\a%\x2\x2\xC2"+
		"\xC3\x5\n\x6\x2\xC3\xC4\a&\x2\x2\xC4\xC6\x3\x2\x2\x2\xC5\xAF\x3\x2\x2"+
		"\x2\xC5\xB3\x3\x2\x2\x2\xC5\xB7\x3\x2\x2\x2\xC5\xBB\x3\x2\x2\x2\xC5\xBF"+
		"\x3\x2\x2\x2\xC6\x11\x3\x2\x2\x2\xC7\xC9\a\x15\x2\x2\xC8\xCA\x5,\x17\x2"+
		"\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCD\a"+
		"%\x2\x2\xCC\xCE\x5\"\x12\x2\xCD\xCC\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE"+
		"\xCF\x3\x2\x2\x2\xCF\xD2\a&\x2\x2\xD0\xD1\a\n\x2\x2\xD1\xD3\x5(\x15\x2"+
		"\xD2\xD0\x3\x2\x2\x2\xD2\xD3\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD5\a"+
		"\x1A\x2\x2\xD5\xD6\x5\x4\x3\x2\xD6\xD7\a\x1B\x2\x2\xD7\xE8\x3\x2\x2\x2"+
		"\xD8\xDA\a\x15\x2\x2\xD9\xDB\x5,\x17\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3"+
		"\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDE\a%\x2\x2\xDD\xDF\x5\"\x12\x2\xDE"+
		"\xDD\x3\x2\x2\x2\xDE\xDF\x3\x2\x2\x2\xDF\xE0\x3\x2\x2\x2\xE0\xE3\a&\x2"+
		"\x2\xE1\xE2\a\n\x2\x2\xE2\xE4\x5(\x15\x2\xE3\xE1\x3\x2\x2\x2\xE3\xE4\x3"+
		"\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5\xE6\a \x2\x2\xE6\xE8\x5\n\x6\x2\xE7"+
		"\xC7\x3\x2\x2\x2\xE7\xD8\x3\x2\x2\x2\xE8\x13\x3\x2\x2\x2\xE9\xEA\a\x16"+
		"\x2\x2\xEA\xEC\a%\x2\x2\xEB\xED\a\x1E\x2\x2\xEC\xEB\x3\x2\x2\x2\xEC\xED"+
		"\x3\x2\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xF1\x5,\x17\x2\xEF\xF0\a\n\x2\x2"+
		"\xF0\xF2\x5(\x15\x2\xF1\xEF\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF3\x3"+
		"\x2\x2\x2\xF3\xF4\a\x1F\x2\x2\xF4\xF5\x5\n\x6\x2\xF5\xF6\a&\x2\x2\xF6"+
		"\xF7\x5\x6\x4\x2\xF7\x15\x3\x2\x2\x2\xF8\xF9\a\x17\x2\x2\xF9\xFA\a%\x2"+
		"\x2\xFA\xFB\x5\n\x6\x2\xFB\xFC\a&\x2\x2\xFC\xFD\x5\x6\x4\x2\xFD\x17\x3"+
		"\x2\x2\x2\xFE\xFF\a\x1A\x2\x2\xFF\x100\x5\x4\x3\x2\x100\x101\a\x1B\x2"+
		"\x2\x101\x19\x3\x2\x2\x2\x102\x103\a\x1D\x2\x2\x103\x1B\x3\x2\x2\x2\x104"+
		"\x105\x5,\x17\x2\x105\x106\a \x2\x2\x106\x10F\x5\n\x6\x2\x107\x109\x5"+
		"\x38\x1D\x2\x108\x107\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10A\x3\x2"+
		"\x2\x2\x10A\x10B\a\x18\x2\x2\x10B\x10C\a%\x2\x2\x10C\x10D\x5\n\x6\x2\x10D"+
		"\x10E\a&\x2\x2\x10E\x110\x3\x2\x2\x2\x10F\x108\x3\x2\x2\x2\x10F\x110\x3"+
		"\x2\x2\x2\x110\x1D\x3\x2\x2\x2\x111\x112\a\x18\x2\x2\x112\x113\a%\x2\x2"+
		"\x113\x114\x5\n\x6\x2\x114\x115\a&\x2\x2\x115\x119\x5\x4\x3\x2\x116\x118"+
		"\x5 \x11\x2\x117\x116\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2"+
		"\x2\x2\x119\x11A\x3\x2\x2\x2\x11A\x11E\x3\x2\x2\x2\x11B\x119\x3\x2\x2"+
		"\x2\x11C\x11D\a\x19\x2\x2\x11D\x11F\x5\x4\x3\x2\x11E\x11C\x3\x2\x2\x2"+
		"\x11E\x11F\x3\x2\x2\x2\x11F\x120\x3\x2\x2\x2\x120\x121\a\x1B\x2\x2\x121"+
		"\x1F\x3\x2\x2\x2\x122\x123\a\x19\x2\x2\x123\x124\a\x18\x2\x2\x124\x125"+
		"\a%\x2\x2\x125\x126\x5\n\x6\x2\x126\x127\a&\x2\x2\x127\x128\x5\x4\x3\x2"+
		"\x128!\x3\x2\x2\x2\x129\x12E\x5$\x13\x2\x12A\x12B\a\x5\x2\x2\x12B\x12D"+
		"\x5$\x13\x2\x12C\x12A\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2"+
		"\x2\x2\x12E\x12F\x3\x2\x2\x2\x12F#\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131"+
		"\x133\x5\x38\x1D\x2\x132\x131\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x134"+
		"\x3\x2\x2\x2\x134\x135\x5,\x17\x2\x135\x136\a\n\x2\x2\x136\x137\x5(\x15"+
		"\x2\x137%\x3\x2\x2\x2\x138\x13D\x5\n\x6\x2\x139\x13A\a\x5\x2\x2\x13A\x13C"+
		"\x5\n\x6\x2\x13B\x139\x3\x2\x2\x2\x13C\x13F\x3\x2\x2\x2\x13D\x13B\x3\x2"+
		"\x2\x2\x13D\x13E\x3\x2\x2\x2\x13E\'\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2"+
		"\x140\x142\x5\x38\x1D\x2\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142"+
		"\x143\x3\x2\x2\x2\x143\x148\a\'\x2\x2\x144\x145\a\x4\x2\x2\x145\x147\a"+
		"\'\x2\x2\x146\x144\x3\x2\x2\x2\x147\x14A\x3\x2\x2\x2\x148\x146\x3\x2\x2"+
		"\x2\x148\x149\x3\x2\x2\x2\x149)\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14B"+
		"\x151\x5.\x18\x2\x14C\x151\x5\x30\x19\x2\x14D\x151\x5\x32\x1A\x2\x14E"+
		"\x151\x5\x34\x1B\x2\x14F\x151\x5\x36\x1C\x2\x150\x14B\x3\x2\x2\x2\x150"+
		"\x14C\x3\x2\x2\x2\x150\x14D\x3\x2\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x14F"+
		"\x3\x2\x2\x2\x151+\x3\x2\x2\x2\x152\x153\a\'\x2\x2\x153-\x3\x2\x2\x2\x154"+
		"\x155\a,\x2\x2\x155/\x3\x2\x2\x2\x156\x157\a+\x2\x2\x157\x31\x3\x2\x2"+
		"\x2\x158\x159\a\x1C\x2\x2\x159\x33\x3\x2\x2\x2\x15A\x15B\a\t\x2\x2\x15B"+
		"\x160\x5\n\x6\x2\x15C\x15D\a\x5\x2\x2\x15D\x15F\x5\n\x6\x2\x15E\x15C\x3"+
		"\x2\x2\x2\x15F\x162\x3\x2\x2\x2\x160\x15E\x3\x2\x2\x2\x160\x161\x3\x2"+
		"\x2\x2\x161\x163\x3\x2\x2\x2\x162\x160\x3\x2\x2\x2\x163\x164\a\x3\x2\x2"+
		"\x164\x168\x3\x2\x2\x2\x165\x166\a\t\x2\x2\x166\x168\a\x3\x2\x2\x167\x15A"+
		"\x3\x2\x2\x2\x167\x165\x3\x2\x2\x2\x168\x35\x3\x2\x2\x2\x169\x16A\a,\x2"+
		"\x2\x16A\x16B\a\xF\x2\x2\x16B\x16E\a,\x2\x2\x16C\x16D\a\x11\x2\x2\x16D"+
		"\x16F\a,\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x37\x3"+
		"\x2\x2\x2\x170\x172\x5:\x1E\x2\x171\x170\x3\x2\x2\x2\x172\x173\x3\x2\x2"+
		"\x2\x173\x171\x3\x2\x2\x2\x173\x174\x3\x2\x2\x2\x174\x39\x3\x2\x2\x2\x175"+
		"\x181\a*\x2\x2\x176\x177\a%\x2\x2\x177\x17C\x5*\x16\x2\x178\x179\a\x5"+
		"\x2\x2\x179\x17B\x5*\x16\x2\x17A\x178\x3\x2\x2\x2\x17B\x17E\x3\x2\x2\x2"+
		"\x17C\x17A\x3\x2\x2\x2\x17C\x17D\x3\x2\x2\x2\x17D\x17F\x3\x2\x2\x2\x17E"+
		"\x17C\x3\x2\x2\x2\x17F\x180\a&\x2\x2\x180\x182\x3\x2\x2\x2\x181\x176\x3"+
		"\x2\x2\x2\x181\x182\x3\x2\x2\x2\x182;\x3\x2\x2\x2\x31\x43GKOSW[^\x61g"+
		"r\x98\x9A\xA0\xA8\xAC\xAF\xB3\xB7\xBB\xBF\xC5\xC9\xCD\xD2\xDA\xDE\xE3"+
		"\xE7\xEC\xF1\x108\x10F\x119\x11E\x12E\x132\x13D\x141\x148\x150\x160\x167"+
		"\x16E\x173\x17C\x181";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
