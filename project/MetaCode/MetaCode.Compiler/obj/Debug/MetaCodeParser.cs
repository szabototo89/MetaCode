//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\C#\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__17=1, T__16=2, T__15=3, T__14=4, T__13=5, T__12=6, T__11=7, T__10=8, 
		T__9=9, T__8=10, T__7=11, T__6=12, T__5=13, T__4=14, T__3=15, T__2=16, 
		T__1=17, T__0=18, FUNCTION=19, FOREACH=20, WHILE=21, IF=22, ELSE=23, DO=24, 
		END=25, BOOLEAN=26, IMPLICIT=27, EXPLICIT=28, MACRO=29, SKIP=30, VAR=31, 
		IN=32, ASSIGN=33, AND=34, OR=35, NOT=36, NULL=37, RETURN=38, LEFT_PARENTHESIS=39, 
		RIGHT_PARENTHESIS=40, ID=41, COMMENT=42, MULTILINE_COMMENT=43, TREE_SELECTOR=44, 
		ATTRIBUTE_ID=45, STRING=46, NUMBER=47, WHITESPACE=48, NEWLINE=49;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'.'", "','", "'+'", "'*'", "'-'", "'['", "':'", "'<'", 
		"'!='", "';'", "'<='", "'to'", "'>'", "'by'", "'=='", "'/'", "'>='", "'function'", 
		"'foreach'", "'while'", "'if'", "'else'", "'do'", "'end'", "BOOLEAN", 
		"'implicit'", "'explicit'", "'macro'", "'skip'", "'var'", "'in'", "'='", 
		"'and'", "'or'", "'not'", "'null'", "'return'", "'('", "')'", "ID", "COMMENT", 
		"MULTILINE_COMMENT", "TREE_SELECTOR", "ATTRIBUTE_ID", "STRING", "NUMBER", 
		"WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_expression = 4, RULE_functionCallExpression = 5, RULE_macroCallExpression = 6, 
		RULE_memberExpression = 7, RULE_memberTagExpression = 8, RULE_primaryExpression = 9, 
		RULE_functionStatement = 10, RULE_macroStatement = 11, RULE_foreachStatement = 12, 
		RULE_whileStatement = 13, RULE_blockStatement = 14, RULE_skipStatement = 15, 
		RULE_returnStatement = 16, RULE_assignmentExpression = 17, RULE_ifStatement = 18, 
		RULE_elseIfStatement = 19, RULE_formalParameterList = 20, RULE_formalParameter = 21, 
		RULE_actualParameterList = 22, RULE_typeName = 23, RULE_constant = 24, 
		RULE_identifier = 25, RULE_numberConstant = 26, RULE_stringConstant = 27, 
		RULE_booleanConstant = 28, RULE_arrayConstant = 29, RULE_intervalConstant = 30, 
		RULE_attributes = 31, RULE_attribute = 32;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "expression", 
		"functionCallExpression", "macroCallExpression", "memberExpression", "memberTagExpression", 
		"primaryExpression", "functionStatement", "macroStatement", "foreachStatement", 
		"whileStatement", "blockStatement", "skipStatement", "returnStatement", 
		"assignmentExpression", "ifStatement", "elseIfStatement", "formalParameterList", 
		"formalParameter", "actualParameterList", "typeName", "constant", "identifier", 
		"numberConstant", "stringConstant", "booleanConstant", "arrayConstant", 
		"intervalConstant", "attributes", "attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 68; statement();
				State = 69; Match(11);
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << FUNCTION) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << DO) | (1L << BOOLEAN) | (1L << IMPLICIT) | (1L << EXPLICIT) | (1L << MACRO) | (1L << SKIP) | (1L << VAR) | (1L << NOT) | (1L << RETURN) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << TREE_SELECTOR) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public ReturnStatementContext Return;
		public AttributesContext Attributes;
		public FunctionStatementContext FunctionDeclaration;
		public MacroStatementContext MacroDeclaration;
		public VariableDeclarationContext VariableDeclaration;
		public IfStatementContext If;
		public BlockStatementContext Block;
		public ForeachStatementContext Foreach;
		public WhileStatementContext While;
		public SkipStatementContext Skip;
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		public SkipStatementContext skipStatement() {
			return GetRuleContext<SkipStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 109;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; _localctx.Expression = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; _localctx.Return = returnStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 78;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 77; _localctx.Attributes = attributes();
					}
				}

				State = 80; _localctx.FunctionDeclaration = functionStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 82;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 81; _localctx.Attributes = attributes();
					}
				}

				State = 84; _localctx.MacroDeclaration = macroStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 86;
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 85; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 88; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 90;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 89; _localctx.Attributes = attributes();
					}
				}

				State = 92; _localctx.If = ifStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 94;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 93; _localctx.Attributes = attributes();
					}
				}

				State = 96; _localctx.Block = blockStatement();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 98;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 97; _localctx.Attributes = attributes();
					}
				}

				State = 100; _localctx.Foreach = foreachStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 102;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 101; _localctx.Attributes = attributes();
					}
				}

				State = 104; _localctx.While = whileStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 106;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 105; _localctx.Attributes = attributes();
					}
				}

				State = 108; _localctx.Skip = skipStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 111; _localctx.Attributes = attributes();
				}
			}

			State = 114; Match(VAR);
			State = 115; _localctx.VariableName = Match(ID);
			State = 118;
			_la = _input.La(1);
			if (_la==8) {
				{
				State = 116; Match(8);
				State = 117; _localctx.VariableType = typeName();
				}
			}

			State = 120; Match(ASSIGN);
			State = 121; _localctx.VariableDefaultValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Expression;
		public PrimaryExpressionContext PrimaryExpression;
		public FunctionCallExpressionContext FunctionCallExpression;
		public MacroCallExpressionContext MacroCallExpression;
		public MemberExpressionContext MemberExpression;
		public ExpressionContext Right;
		public MacroCallExpressionContext macroCallExpression() {
			return GetRuleContext<MacroCallExpressionContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(MetaCodeParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MetaCodeParser.OR, 0); }
		public MemberExpressionContext memberExpression() {
			return GetRuleContext<MemberExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MetaCodeParser.NOT, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 124; _localctx.Operator = Match(NOT);
				State = 125; _localctx.Expression = expression(13);
				}
				break;

			case 2:
				{
				State = 126; _localctx.PrimaryExpression = primaryExpression();
				}
				break;

			case 3:
				{
				State = 127; _localctx.FunctionCallExpression = functionCallExpression();
				}
				break;

			case 4:
				{
				State = 128; _localctx.MacroCallExpression = macroCallExpression();
				}
				break;

			case 5:
				{
				State = 129; _localctx.MemberExpression = memberExpression();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 170;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 168;
					switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 132;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 133; _localctx.Operator = Match(4);
						State = 134; _localctx.Right = expression(13);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 135;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 136; _localctx.Operator = Match(6);
						State = 137; _localctx.Right = expression(12);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 138;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 139; _localctx.Operator = Match(5);
						State = 140; _localctx.Right = expression(11);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 141;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 142; _localctx.Operator = Match(17);
						State = 143; _localctx.Right = expression(10);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 144;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 145; _localctx.Operator = Match(9);
						State = 146; _localctx.Right = expression(9);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 147;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 148; _localctx.Operator = Match(14);
						State = 149; _localctx.Right = expression(8);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 150;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 151; _localctx.Operator = Match(12);
						State = 152; _localctx.Right = expression(7);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 153;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 154; _localctx.Operator = Match(18);
						State = 155; _localctx.Right = expression(6);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 156;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 157; _localctx.Operator = Match(16);
						State = 158; _localctx.Right = expression(5);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 159;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 160; _localctx.Operator = Match(10);
						State = 161; _localctx.Right = expression(4);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 163; _localctx.Operator = Match(AND);
						State = 164; _localctx.Right = expression(3);
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 165;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 166; _localctx.Operator = Match(OR);
						State = 167; _localctx.Right = expression(2);
						}
						break;
					}
					} 
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionCallExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; primaryExpression();
			State = 174; Match(LEFT_PARENTHESIS);
			State = 176;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << BOOLEAN) | (1L << MACRO) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << TREE_SELECTOR) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 175; expression(0);
				}
			}

			State = 178; Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroCallExpressionContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode MACRO() { return GetToken(MetaCodeParser.MACRO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public MacroCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_macroCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMacroCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMacroCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroCallExpressionContext macroCallExpression() {
		MacroCallExpressionContext _localctx = new MacroCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_macroCallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(MACRO);
			State = 181; Match(ID);
			State = 182; Match(LEFT_PARENTHESIS);
			State = 183; statement();
			State = 184; Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberExpressionContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public MemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_memberExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberExpressionContext memberExpression() {
		MemberExpressionContext _localctx = new MemberExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_memberExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 186; Match(ID);
			State = 189;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 187; Match(2);
					State = 188; Match(ID);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 191;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberTagExpressionContext : ParserRuleContext {
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberTagExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_memberTagExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMemberTagExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMemberTagExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberTagExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberTagExpressionContext memberTagExpression() {
		MemberTagExpressionContext _localctx = new MemberTagExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_memberTagExpression);
		try {
			State = 195;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; identifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 194; functionCallExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IToken Id;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_primaryExpression);
		int _la;
		try {
			State = 216;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 198;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 197; _localctx.Attributes = attributes();
					}
				}

				State = 200; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 201; _localctx.Attributes = attributes();
					}
				}

				State = 204; _localctx.Id = Match(ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 206;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 205; _localctx.Attributes = attributes();
					}
				}

				State = 208; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 210;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 209; _localctx.Attributes = attributes();
					}
				}

				State = 212; Match(LEFT_PARENTHESIS);
				State = 213; _localctx.InnerExpression = expression(0);
				State = 214; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		public IToken FunctionName;
		public FormalParameterListContext Parameters;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_functionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; Match(FUNCTION);
			State = 219; _localctx.FunctionName = Match(ID);
			State = 220; Match(LEFT_PARENTHESIS);
			State = 222;
			_la = _input.La(1);
			if (_la==ID || _la==ATTRIBUTE_ID) {
				{
				State = 221; _localctx.Parameters = formalParameterList();
				}
			}

			State = 224; Match(RIGHT_PARENTHESIS);
			{
			State = 225; Match(8);
			State = 226; _localctx.ReturnType = typeName();
			}
			State = 228; Match(DO);
			State = 229; _localctx.BodyStatements = statements();
			State = 230; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		public IToken Type;
		public IToken MacroName;
		public IToken Identifier;
		public IToken Selector;
		public StatementsContext BodyStatements;
		public ITerminalNode MACRO() { return GetToken(MetaCodeParser.MACRO, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode TREE_SELECTOR() { return GetToken(MetaCodeParser.TREE_SELECTOR, 0); }
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(MetaCodeParser.IMPLICIT, 0); }
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public ITerminalNode EXPLICIT() { return GetToken(MetaCodeParser.EXPLICIT, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_macroStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMacroStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMacroStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_macroStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			switch (_input.La(1)) {
			case IMPLICIT:
				{
				State = 232; _localctx.Type = Match(IMPLICIT);
				}
				break;
			case EXPLICIT:
				{
				State = 233; _localctx.Type = Match(EXPLICIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 236; Match(MACRO);
			State = 237; _localctx.MacroName = Match(ID);
			State = 238; Match(LEFT_PARENTHESIS);
			State = 239; _localctx.Identifier = Match(ID);
			State = 240; Match(8);
			State = 241; _localctx.Selector = Match(TREE_SELECTOR);
			State = 242; Match(RIGHT_PARENTHESIS);
			State = 243; Match(DO);
			State = 244; _localctx.BodyStatements = statements();
			State = 245; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken Var;
		public IToken Id;
		public TypeNameContext VariableType;
		public ExpressionContext ArrayExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(FOREACH);
			State = 248; Match(LEFT_PARENTHESIS);
			State = 250;
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 249; _localctx.Var = Match(VAR);
				}
			}

			State = 252; _localctx.Id = Match(ID);
			State = 255;
			_la = _input.La(1);
			if (_la==8) {
				{
				State = 253; Match(8);
				State = 254; _localctx.VariableType = typeName();
				}
			}

			State = 257; Match(IN);
			State = 258; _localctx.ArrayExpression = expression(0);
			State = 259; Match(RIGHT_PARENTHESIS);
			State = 260; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; Match(WHILE);
			State = 263; Match(LEFT_PARENTHESIS);
			State = 264; _localctx.ConditionExpression = expression(0);
			State = 265; Match(RIGHT_PARENTHESIS);
			State = 266; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(DO);
			State = 269; _localctx.Body = statements();
			State = 270; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipStatementContext : ParserRuleContext {
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public SkipStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_skipStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterSkipStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitSkipStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipStatementContext skipStatement() {
		SkipStatementContext _localctx = new SkipStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_skipStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(SKIP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(MetaCodeParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_returnStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(RETURN);
			State = 275; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IToken Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277; _localctx.Variable = Match(ID);
			State = 278; Match(ASSIGN);
			State = 279; _localctx.Value = expression(0);
			State = 288;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				State = 281;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 280; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 283; Match(IF);
				State = 284; Match(LEFT_PARENTHESIS);
				State = 285; _localctx.ConditionalExpression = expression(0);
				State = 286; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext Condition;
		public StatementsContext Statements;
		public ElseIfStatementContext ElseIfStatements;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public IReadOnlyList<ElseIfStatementContext> elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(IF);
			State = 291; Match(LEFT_PARENTHESIS);
			State = 292; _localctx.Condition = expression(0);
			State = 293; Match(RIGHT_PARENTHESIS);
			State = 294; _localctx.Statements = statements();
			State = 298;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 295; _localctx.ElseIfStatements = elseIfStatement();
					}
					} 
				}
				State = 300;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,29,_ctx);
			}
			State = 303;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 301; Match(ELSE);
				State = 302; _localctx.ElseStatements = statements();
				}
			}

			State = 305; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ExpressionContext Condition;
		public StatementsContext Statements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307; Match(ELSE);
			State = 308; Match(IF);
			State = 309; Match(LEFT_PARENTHESIS);
			State = 310; _localctx.Condition = expression(0);
			State = 311; Match(RIGHT_PARENTHESIS);
			State = 312; _localctx.Statements = statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; formalParameter();
			State = 319;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 315; Match(3);
				State = 316; formalParameter();
				}
				}
				State = 321;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken Name;
		public TypeNameContext Type;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 322; _localctx.Attributes = attributes();
				}
			}

			State = 325; _localctx.Name = Match(ID);
			State = 326; Match(8);
			State = 327; _localctx.Type = typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actualParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329; expression(0);
			State = 334;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 330; Match(3);
				State = 331; expression(0);
				}
				}
				State = 336;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 337; attributes();
				}
			}

			State = 340; Match(ID);
			State = 345;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==2) {
				{
				{
				State = 341; Match(2);
				State = 342; Match(ID);
				}
				}
				State = 347;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberConstantContext Number;
		public StringConstantContext String;
		public BooleanConstantContext Boolean;
		public ArrayConstantContext Array;
		public IntervalConstantContext Interval;
		public IToken TreeSelector;
		public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		public ITerminalNode TREE_SELECTOR() { return GetToken(MetaCodeParser.TREE_SELECTOR, 0); }
		public ArrayConstantContext arrayConstant() {
			return GetRuleContext<ArrayConstantContext>(0);
		}
		public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		public IntervalConstantContext intervalConstant() {
			return GetRuleContext<IntervalConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_constant);
		try {
			State = 354;
			switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 348; _localctx.Number = numberConstant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 349; _localctx.String = stringConstant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 350; _localctx.Boolean = booleanConstant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 351; _localctx.Array = arrayConstant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 352; _localctx.Interval = intervalConstant();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 353; _localctx.TreeSelector = Match(TREE_SELECTOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken Id;
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_identifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; _localctx.Id = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numberConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_numberConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 358; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_stringConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_booleanConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 362; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstantContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arrayConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArrayConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArrayConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstantContext arrayConstant() {
		ArrayConstantContext _localctx = new ArrayConstantContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_arrayConstant);
		int _la;
		try {
			State = 377;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; Match(7);
				State = 365; expression(0);
				State = 370;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 366; Match(3);
					State = 367; expression(0);
					}
					}
					State = 372;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 373; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375; Match(7);
				State = 376; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalConstantContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_intervalConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIntervalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIntervalConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalConstantContext intervalConstant() {
		IntervalConstantContext _localctx = new IntervalConstantContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_intervalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379; _localctx.Start = Match(NUMBER);
			State = 380; Match(13);
			State = 381; _localctx.End = Match(NUMBER);
			State = 384;
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 382; Match(15);
				State = 383; _localctx.By = Match(NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 386; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 389;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,40,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; _localctx.Name = Match(ATTRIBUTE_ID);
			State = 403;
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 392; Match(LEFT_PARENTHESIS);
				State = 393; constant();
				State = 398;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 394; Match(3);
					State = 395; constant();
					}
					}
					State = 400;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 401; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x33\x198\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x6\x3J\n\x3\r\x3\xE\x3K\x3"+
		"\x4\x3\x4\x3\x4\x5\x4Q\n\x4\x3\x4\x3\x4\x5\x4U\n\x4\x3\x4\x3\x4\x5\x4"+
		"Y\n\x4\x3\x4\x3\x4\x5\x4]\n\x4\x3\x4\x3\x4\x5\x4\x61\n\x4\x3\x4\x3\x4"+
		"\x5\x4\x65\n\x4\x3\x4\x3\x4\x5\x4i\n\x4\x3\x4\x3\x4\x5\x4m\n\x4\x3\x4"+
		"\x5\x4p\n\x4\x3\x5\x5\x5s\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5y\n\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6\x85\n"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\a\x6\xAB\n\x6\f\x6\xE\x6\xAE\v\x6\x3\a\x3\a\x3\a\x5\a\xB3"+
		"\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x6\t\xC0\n"+
		"\t\r\t\xE\t\xC1\x3\n\x3\n\x5\n\xC6\n\n\x3\v\x5\v\xC9\n\v\x3\v\x3\v\x5"+
		"\v\xCD\n\v\x3\v\x3\v\x5\v\xD1\n\v\x3\v\x3\v\x5\v\xD5\n\v\x3\v\x3\v\x3"+
		"\v\x3\v\x5\v\xDB\n\v\x3\f\x3\f\x3\f\x3\f\x5\f\xE1\n\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x5\r\xED\n\r\x3\r\x3\r\x3\r\x3\r\x3\r"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x5\xE\xFD\n\xE\x3\xE"+
		"\x3\xE\x3\xE\x5\xE\x102\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x11C\n\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x5\x13\x123\n\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x14\x3\x14\x3\x14\a\x14\x12B\n\x14\f\x14\xE\x14\x12E\v\x14\x3\x14\x3"+
		"\x14\x5\x14\x132\n\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\a\x16\x140\n\x16\f\x16\xE\x16\x143"+
		"\v\x16\x3\x17\x5\x17\x146\n\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3"+
		"\x18\x3\x18\a\x18\x14F\n\x18\f\x18\xE\x18\x152\v\x18\x3\x19\x5\x19\x155"+
		"\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x15A\n\x19\f\x19\xE\x19\x15D\v\x19\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x165\n\x1A\x3\x1B\x3\x1B"+
		"\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\a\x1F\x173\n\x1F\f\x1F\xE\x1F\x176\v\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x5\x1F\x17C\n\x1F\x3 \x3 \x3 \x3 \x3 \x5 \x183\n \x3!\x6!\x186\n!\r!"+
		"\xE!\x187\x3\"\x3\"\x3\"\x3\"\x3\"\a\"\x18F\n\"\f\"\xE\"\x192\v\"\x3\""+
		"\x3\"\x5\"\x196\n\"\x3\"\x2\x2\x3\n#\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x2\x2\x1BC\x2\x44\x3\x2\x2\x2\x4I\x3\x2\x2\x2\x6o\x3\x2\x2"+
		"\x2\br\x3\x2\x2\x2\n\x84\x3\x2\x2\x2\f\xAF\x3\x2\x2\x2\xE\xB6\x3\x2\x2"+
		"\x2\x10\xBC\x3\x2\x2\x2\x12\xC5\x3\x2\x2\x2\x14\xDA\x3\x2\x2\x2\x16\xDC"+
		"\x3\x2\x2\x2\x18\xEC\x3\x2\x2\x2\x1A\xF9\x3\x2\x2\x2\x1C\x108\x3\x2\x2"+
		"\x2\x1E\x10E\x3\x2\x2\x2 \x112\x3\x2\x2\x2\"\x114\x3\x2\x2\x2$\x117\x3"+
		"\x2\x2\x2&\x124\x3\x2\x2\x2(\x135\x3\x2\x2\x2*\x13C\x3\x2\x2\x2,\x145"+
		"\x3\x2\x2\x2.\x14B\x3\x2\x2\x2\x30\x154\x3\x2\x2\x2\x32\x164\x3\x2\x2"+
		"\x2\x34\x166\x3\x2\x2\x2\x36\x168\x3\x2\x2\x2\x38\x16A\x3\x2\x2\x2:\x16C"+
		"\x3\x2\x2\x2<\x17B\x3\x2\x2\x2>\x17D\x3\x2\x2\x2@\x185\x3\x2\x2\x2\x42"+
		"\x189\x3\x2\x2\x2\x44\x45\x5\x4\x3\x2\x45\x3\x3\x2\x2\x2\x46G\x5\x6\x4"+
		"\x2GH\a\r\x2\x2HJ\x3\x2\x2\x2I\x46\x3\x2\x2\x2JK\x3\x2\x2\x2KI\x3\x2\x2"+
		"\x2KL\x3\x2\x2\x2L\x5\x3\x2\x2\x2Mp\x5\n\x6\x2Np\x5\"\x12\x2OQ\x5@!\x2"+
		"PO\x3\x2\x2\x2PQ\x3\x2\x2\x2QR\x3\x2\x2\x2Rp\x5\x16\f\x2SU\x5@!\x2TS\x3"+
		"\x2\x2\x2TU\x3\x2\x2\x2UV\x3\x2\x2\x2Vp\x5\x18\r\x2WY\x5@!\x2XW\x3\x2"+
		"\x2\x2XY\x3\x2\x2\x2YZ\x3\x2\x2\x2Zp\x5\b\x5\x2[]\x5@!\x2\\[\x3\x2\x2"+
		"\x2\\]\x3\x2\x2\x2]^\x3\x2\x2\x2^p\x5&\x14\x2_\x61\x5@!\x2`_\x3\x2\x2"+
		"\x2`\x61\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62p\x5\x1E\x10\x2\x63\x65\x5"+
		"@!\x2\x64\x63\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66"+
		"p\x5\x1A\xE\x2gi\x5@!\x2hg\x3\x2\x2\x2hi\x3\x2\x2\x2ij\x3\x2\x2\x2jp\x5"+
		"\x1C\xF\x2km\x5@!\x2lk\x3\x2\x2\x2lm\x3\x2\x2\x2mn\x3\x2\x2\x2np\x5 \x11"+
		"\x2oM\x3\x2\x2\x2oN\x3\x2\x2\x2oP\x3\x2\x2\x2oT\x3\x2\x2\x2oX\x3\x2\x2"+
		"\x2o\\\x3\x2\x2\x2o`\x3\x2\x2\x2o\x64\x3\x2\x2\x2oh\x3\x2\x2\x2ol\x3\x2"+
		"\x2\x2p\a\x3\x2\x2\x2qs\x5@!\x2rq\x3\x2\x2\x2rs\x3\x2\x2\x2st\x3\x2\x2"+
		"\x2tu\a!\x2\x2ux\a+\x2\x2vw\a\n\x2\x2wy\x5\x30\x19\x2xv\x3\x2\x2\x2xy"+
		"\x3\x2\x2\x2yz\x3\x2\x2\x2z{\a#\x2\x2{|\x5\n\x6\x2|\t\x3\x2\x2\x2}~\b"+
		"\x6\x1\x2~\x7F\a&\x2\x2\x7F\x85\x5\n\x6\xF\x80\x85\x5\x14\v\x2\x81\x85"+
		"\x5\f\a\x2\x82\x85\x5\xE\b\x2\x83\x85\x5\x10\t\x2\x84}\x3\x2\x2\x2\x84"+
		"\x80\x3\x2\x2\x2\x84\x81\x3\x2\x2\x2\x84\x82\x3\x2\x2\x2\x84\x83\x3\x2"+
		"\x2\x2\x85\xAC\x3\x2\x2\x2\x86\x87\f\xE\x2\x2\x87\x88\a\x6\x2\x2\x88\xAB"+
		"\x5\n\x6\xF\x89\x8A\f\r\x2\x2\x8A\x8B\a\b\x2\x2\x8B\xAB\x5\n\x6\xE\x8C"+
		"\x8D\f\f\x2\x2\x8D\x8E\a\a\x2\x2\x8E\xAB\x5\n\x6\r\x8F\x90\f\v\x2\x2\x90"+
		"\x91\a\x13\x2\x2\x91\xAB\x5\n\x6\f\x92\x93\f\n\x2\x2\x93\x94\a\v\x2\x2"+
		"\x94\xAB\x5\n\x6\v\x95\x96\f\t\x2\x2\x96\x97\a\x10\x2\x2\x97\xAB\x5\n"+
		"\x6\n\x98\x99\f\b\x2\x2\x99\x9A\a\xE\x2\x2\x9A\xAB\x5\n\x6\t\x9B\x9C\f"+
		"\a\x2\x2\x9C\x9D\a\x14\x2\x2\x9D\xAB\x5\n\x6\b\x9E\x9F\f\x6\x2\x2\x9F"+
		"\xA0\a\x12\x2\x2\xA0\xAB\x5\n\x6\a\xA1\xA2\f\x5\x2\x2\xA2\xA3\a\f\x2\x2"+
		"\xA3\xAB\x5\n\x6\x6\xA4\xA5\f\x4\x2\x2\xA5\xA6\a$\x2\x2\xA6\xAB\x5\n\x6"+
		"\x5\xA7\xA8\f\x3\x2\x2\xA8\xA9\a%\x2\x2\xA9\xAB\x5\n\x6\x4\xAA\x86\x3"+
		"\x2\x2\x2\xAA\x89\x3\x2\x2\x2\xAA\x8C\x3\x2\x2\x2\xAA\x8F\x3\x2\x2\x2"+
		"\xAA\x92\x3\x2\x2\x2\xAA\x95\x3\x2\x2\x2\xAA\x98\x3\x2\x2\x2\xAA\x9B\x3"+
		"\x2\x2\x2\xAA\x9E\x3\x2\x2\x2\xAA\xA1\x3\x2\x2\x2\xAA\xA4\x3\x2\x2\x2"+
		"\xAA\xA7\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3"+
		"\x2\x2\x2\xAD\v\x3\x2\x2\x2\xAE\xAC\x3\x2\x2\x2\xAF\xB0\x5\x14\v\x2\xB0"+
		"\xB2\a)\x2\x2\xB1\xB3\x5\n\x6\x2\xB2\xB1\x3\x2\x2\x2\xB2\xB3\x3\x2\x2"+
		"\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\a*\x2\x2\xB5\r\x3\x2\x2\x2\xB6\xB7\a\x1F"+
		"\x2\x2\xB7\xB8\a+\x2\x2\xB8\xB9\a)\x2\x2\xB9\xBA\x5\x6\x4\x2\xBA\xBB\a"+
		"*\x2\x2\xBB\xF\x3\x2\x2\x2\xBC\xBF\a+\x2\x2\xBD\xBE\a\x4\x2\x2\xBE\xC0"+
		"\a+\x2\x2\xBF\xBD\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2"+
		"\xC1\xC2\x3\x2\x2\x2\xC2\x11\x3\x2\x2\x2\xC3\xC6\x5\x34\x1B\x2\xC4\xC6"+
		"\x5\f\a\x2\xC5\xC3\x3\x2\x2\x2\xC5\xC4\x3\x2\x2\x2\xC6\x13\x3\x2\x2\x2"+
		"\xC7\xC9\x5@!\x2\xC8\xC7\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCA\x3\x2"+
		"\x2\x2\xCA\xDB\x5\x32\x1A\x2\xCB\xCD\x5@!\x2\xCC\xCB\x3\x2\x2\x2\xCC\xCD"+
		"\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xDB\a+\x2\x2\xCF\xD1\x5@!\x2\xD0"+
		"\xCF\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xDB\x5$\x13"+
		"\x2\xD3\xD5\x5@!\x2\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD6\x3"+
		"\x2\x2\x2\xD6\xD7\a)\x2\x2\xD7\xD8\x5\n\x6\x2\xD8\xD9\a*\x2\x2\xD9\xDB"+
		"\x3\x2\x2\x2\xDA\xC8\x3\x2\x2\x2\xDA\xCC\x3\x2\x2\x2\xDA\xD0\x3\x2\x2"+
		"\x2\xDA\xD4\x3\x2\x2\x2\xDB\x15\x3\x2\x2\x2\xDC\xDD\a\x15\x2\x2\xDD\xDE"+
		"\a+\x2\x2\xDE\xE0\a)\x2\x2\xDF\xE1\x5*\x16\x2\xE0\xDF\x3\x2\x2\x2\xE0"+
		"\xE1\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3\a*\x2\x2\xE3\xE4\a\n\x2\x2"+
		"\xE4\xE5\x5\x30\x19\x2\xE5\xE6\x3\x2\x2\x2\xE6\xE7\a\x1A\x2\x2\xE7\xE8"+
		"\x5\x4\x3\x2\xE8\xE9\a\x1B\x2\x2\xE9\x17\x3\x2\x2\x2\xEA\xED\a\x1D\x2"+
		"\x2\xEB\xED\a\x1E\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xEB\x3\x2\x2\x2\xED\xEE"+
		"\x3\x2\x2\x2\xEE\xEF\a\x1F\x2\x2\xEF\xF0\a+\x2\x2\xF0\xF1\a)\x2\x2\xF1"+
		"\xF2\a+\x2\x2\xF2\xF3\a\n\x2\x2\xF3\xF4\a.\x2\x2\xF4\xF5\a*\x2\x2\xF5"+
		"\xF6\a\x1A\x2\x2\xF6\xF7\x5\x4\x3\x2\xF7\xF8\a\x1B\x2\x2\xF8\x19\x3\x2"+
		"\x2\x2\xF9\xFA\a\x16\x2\x2\xFA\xFC\a)\x2\x2\xFB\xFD\a!\x2\x2\xFC\xFB\x3"+
		"\x2\x2\x2\xFC\xFD\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE\x101\a+\x2\x2\xFF"+
		"\x100\a\n\x2\x2\x100\x102\x5\x30\x19\x2\x101\xFF\x3\x2\x2\x2\x101\x102"+
		"\x3\x2\x2\x2\x102\x103\x3\x2\x2\x2\x103\x104\a\"\x2\x2\x104\x105\x5\n"+
		"\x6\x2\x105\x106\a*\x2\x2\x106\x107\x5\x6\x4\x2\x107\x1B\x3\x2\x2\x2\x108"+
		"\x109\a\x17\x2\x2\x109\x10A\a)\x2\x2\x10A\x10B\x5\n\x6\x2\x10B\x10C\a"+
		"*\x2\x2\x10C\x10D\x5\x6\x4\x2\x10D\x1D\x3\x2\x2\x2\x10E\x10F\a\x1A\x2"+
		"\x2\x10F\x110\x5\x4\x3\x2\x110\x111\a\x1B\x2\x2\x111\x1F\x3\x2\x2\x2\x112"+
		"\x113\a \x2\x2\x113!\x3\x2\x2\x2\x114\x115\a(\x2\x2\x115\x116\x5\n\x6"+
		"\x2\x116#\x3\x2\x2\x2\x117\x118\a+\x2\x2\x118\x119\a#\x2\x2\x119\x122"+
		"\x5\n\x6\x2\x11A\x11C\x5@!\x2\x11B\x11A\x3\x2\x2\x2\x11B\x11C\x3\x2\x2"+
		"\x2\x11C\x11D\x3\x2\x2\x2\x11D\x11E\a\x18\x2\x2\x11E\x11F\a)\x2\x2\x11F"+
		"\x120\x5\n\x6\x2\x120\x121\a*\x2\x2\x121\x123\x3\x2\x2\x2\x122\x11B\x3"+
		"\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123%\x3\x2\x2\x2\x124\x125\a\x18\x2\x2"+
		"\x125\x126\a)\x2\x2\x126\x127\x5\n\x6\x2\x127\x128\a*\x2\x2\x128\x12C"+
		"\x5\x4\x3\x2\x129\x12B\x5(\x15\x2\x12A\x129\x3\x2\x2\x2\x12B\x12E\x3\x2"+
		"\x2\x2\x12C\x12A\x3\x2\x2\x2\x12C\x12D\x3\x2\x2\x2\x12D\x131\x3\x2\x2"+
		"\x2\x12E\x12C\x3\x2\x2\x2\x12F\x130\a\x19\x2\x2\x130\x132\x5\x4\x3\x2"+
		"\x131\x12F\x3\x2\x2\x2\x131\x132\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133"+
		"\x134\a\x1B\x2\x2\x134\'\x3\x2\x2\x2\x135\x136\a\x19\x2\x2\x136\x137\a"+
		"\x18\x2\x2\x137\x138\a)\x2\x2\x138\x139\x5\n\x6\x2\x139\x13A\a*\x2\x2"+
		"\x13A\x13B\x5\x4\x3\x2\x13B)\x3\x2\x2\x2\x13C\x141\x5,\x17\x2\x13D\x13E"+
		"\a\x5\x2\x2\x13E\x140\x5,\x17\x2\x13F\x13D\x3\x2\x2\x2\x140\x143\x3\x2"+
		"\x2\x2\x141\x13F\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142+\x3\x2\x2\x2\x143"+
		"\x141\x3\x2\x2\x2\x144\x146\x5@!\x2\x145\x144\x3\x2\x2\x2\x145\x146\x3"+
		"\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148\a+\x2\x2\x148\x149\a\n\x2\x2"+
		"\x149\x14A\x5\x30\x19\x2\x14A-\x3\x2\x2\x2\x14B\x150\x5\n\x6\x2\x14C\x14D"+
		"\a\x5\x2\x2\x14D\x14F\x5\n\x6\x2\x14E\x14C\x3\x2\x2\x2\x14F\x152\x3\x2"+
		"\x2\x2\x150\x14E\x3\x2\x2\x2\x150\x151\x3\x2\x2\x2\x151/\x3\x2\x2\x2\x152"+
		"\x150\x3\x2\x2\x2\x153\x155\x5@!\x2\x154\x153\x3\x2\x2\x2\x154\x155\x3"+
		"\x2\x2\x2\x155\x156\x3\x2\x2\x2\x156\x15B\a+\x2\x2\x157\x158\a\x4\x2\x2"+
		"\x158\x15A\a+\x2\x2\x159\x157\x3\x2\x2\x2\x15A\x15D\x3\x2\x2\x2\x15B\x159"+
		"\x3\x2\x2\x2\x15B\x15C\x3\x2\x2\x2\x15C\x31\x3\x2\x2\x2\x15D\x15B\x3\x2"+
		"\x2\x2\x15E\x165\x5\x36\x1C\x2\x15F\x165\x5\x38\x1D\x2\x160\x165\x5:\x1E"+
		"\x2\x161\x165\x5<\x1F\x2\x162\x165\x5> \x2\x163\x165\a.\x2\x2\x164\x15E"+
		"\x3\x2\x2\x2\x164\x15F\x3\x2\x2\x2\x164\x160\x3\x2\x2\x2\x164\x161\x3"+
		"\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x163\x3\x2\x2\x2\x165\x33\x3\x2\x2"+
		"\x2\x166\x167\a+\x2\x2\x167\x35\x3\x2\x2\x2\x168\x169\a\x31\x2\x2\x169"+
		"\x37\x3\x2\x2\x2\x16A\x16B\a\x30\x2\x2\x16B\x39\x3\x2\x2\x2\x16C\x16D"+
		"\a\x1C\x2\x2\x16D;\x3\x2\x2\x2\x16E\x16F\a\t\x2\x2\x16F\x174\x5\n\x6\x2"+
		"\x170\x171\a\x5\x2\x2\x171\x173\x5\n\x6\x2\x172\x170\x3\x2\x2\x2\x173"+
		"\x176\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x174\x175\x3\x2\x2\x2\x175\x177"+
		"\x3\x2\x2\x2\x176\x174\x3\x2\x2\x2\x177\x178\a\x3\x2\x2\x178\x17C\x3\x2"+
		"\x2\x2\x179\x17A\a\t\x2\x2\x17A\x17C\a\x3\x2\x2\x17B\x16E\x3\x2\x2\x2"+
		"\x17B\x179\x3\x2\x2\x2\x17C=\x3\x2\x2\x2\x17D\x17E\a\x31\x2\x2\x17E\x17F"+
		"\a\xF\x2\x2\x17F\x182\a\x31\x2\x2\x180\x181\a\x11\x2\x2\x181\x183\a\x31"+
		"\x2\x2\x182\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183?\x3\x2\x2\x2\x184"+
		"\x186\x5\x42\"\x2\x185\x184\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x185"+
		"\x3\x2\x2\x2\x187\x188\x3\x2\x2\x2\x188\x41\x3\x2\x2\x2\x189\x195\a/\x2"+
		"\x2\x18A\x18B\a)\x2\x2\x18B\x190\x5\x32\x1A\x2\x18C\x18D\a\x5\x2\x2\x18D"+
		"\x18F\x5\x32\x1A\x2\x18E\x18C\x3\x2\x2\x2\x18F\x192\x3\x2\x2\x2\x190\x18E"+
		"\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x193\x3\x2\x2\x2\x192\x190\x3"+
		"\x2\x2\x2\x193\x194\a*\x2\x2\x194\x196\x3\x2\x2\x2\x195\x18A\x3\x2\x2"+
		"\x2\x195\x196\x3\x2\x2\x2\x196\x43\x3\x2\x2\x2-KPTX\\`\x64hlorx\x84\xAA"+
		"\xAC\xB2\xC1\xC5\xC8\xCC\xD0\xD4\xDA\xE0\xEC\xFC\x101\x11B\x122\x12C\x131"+
		"\x141\x145\x150\x154\x15B\x164\x174\x17B\x182\x187\x190\x195";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
