//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\C#\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__19=1, T__18=2, T__17=3, T__16=4, T__15=5, T__14=6, T__13=7, T__12=8, 
		T__11=9, T__10=10, T__9=11, T__8=12, T__7=13, T__6=14, T__5=15, T__4=16, 
		T__3=17, T__2=18, T__1=19, T__0=20, FUNCTION=21, FOREACH=22, WHILE=23, 
		IF=24, ELSE=25, DO=26, END=27, BOOLEAN=28, IMPLICIT=29, EXPLICIT=30, MACRO=31, 
		SKIP=32, VAR=33, IN=34, ASSIGN=35, AND=36, OR=37, NOT=38, NULL=39, RETURN=40, 
		LEFT_PARENTHESIS=41, RIGHT_PARENTHESIS=42, ID=43, COMMENT=44, MULTILINE_COMMENT=45, 
		TREE_SELECTOR=46, ATTRIBUTE_ID=47, STRING=48, NUMBER=49, WHITESPACE=50, 
		NEWLINE=51;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'.'", "','", "'+'", "'*'", "'-'", "'attribute'", 
		"'['", "':'", "'<'", "'object'", "'!='", "';'", "'<='", "'to'", "'>'", 
		"'by'", "'/'", "'=='", "'>='", "'function'", "'foreach'", "'while'", "'if'", 
		"'else'", "'do'", "'end'", "BOOLEAN", "'implicit'", "'explicit'", "'macro'", 
		"'skip'", "'var'", "'in'", "'='", "'and'", "'or'", "'not'", "'null'", 
		"'return'", "'('", "')'", "ID", "COMMENT", "MULTILINE_COMMENT", "TREE_SELECTOR", 
		"ATTRIBUTE_ID", "STRING", "NUMBER", "WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_attributeDeclaration = 4, RULE_objectDeclaration = 5, RULE_expression = 6, 
		RULE_functionCallExpression = 7, RULE_macroCallExpression = 8, RULE_memberExpression = 9, 
		RULE_memberTagExpression = 10, RULE_primaryExpression = 11, RULE_functionStatement = 12, 
		RULE_macroStatement = 13, RULE_foreachStatement = 14, RULE_whileStatement = 15, 
		RULE_blockStatement = 16, RULE_skipStatement = 17, RULE_returnStatement = 18, 
		RULE_assignmentExpression = 19, RULE_ifStatement = 20, RULE_elseIfStatement = 21, 
		RULE_formalParameter = 22, RULE_actualParameterList = 23, RULE_typeName = 24, 
		RULE_constant = 25, RULE_identifier = 26, RULE_numberConstant = 27, RULE_stringConstant = 28, 
		RULE_booleanConstant = 29, RULE_arrayConstant = 30, RULE_intervalConstant = 31, 
		RULE_attributes = 32, RULE_attribute = 33;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "attributeDeclaration", 
		"objectDeclaration", "expression", "functionCallExpression", "macroCallExpression", 
		"memberExpression", "memberTagExpression", "primaryExpression", "functionStatement", 
		"macroStatement", "foreachStatement", "whileStatement", "blockStatement", 
		"skipStatement", "returnStatement", "assignmentExpression", "ifStatement", 
		"elseIfStatement", "formalParameter", "actualParameterList", "typeName", 
		"constant", "identifier", "numberConstant", "stringConstant", "booleanConstant", 
		"arrayConstant", "intervalConstant", "attributes", "attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 70; statement();
				State = 71; Match(13);
				}
				}
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << 8) | (1L << 11) | (1L << FUNCTION) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << DO) | (1L << BOOLEAN) | (1L << IMPLICIT) | (1L << EXPLICIT) | (1L << MACRO) | (1L << SKIP) | (1L << VAR) | (1L << NOT) | (1L << NULL) | (1L << RETURN) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << TREE_SELECTOR) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public ReturnStatementContext Return;
		public AttributesContext Attributes;
		public FunctionStatementContext FunctionDeclaration;
		public MacroStatementContext MacroDeclaration;
		public VariableDeclarationContext VariableDeclaration;
		public ObjectDeclarationContext ObjectDeclaration;
		public AttributeDeclarationContext AttributeDeclaration;
		public IfStatementContext If;
		public BlockStatementContext Block;
		public ForeachStatementContext Foreach;
		public WhileStatementContext While;
		public SkipStatementContext Skip;
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public MacroStatementContext macroStatement() {
			return GetRuleContext<MacroStatementContext>(0);
		}
		public AttributeDeclarationContext attributeDeclaration() {
			return GetRuleContext<AttributeDeclarationContext>(0);
		}
		public SkipStatementContext skipStatement() {
			return GetRuleContext<SkipStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionStatementContext functionStatement() {
			return GetRuleContext<FunctionStatementContext>(0);
		}
		public ObjectDeclarationContext objectDeclaration() {
			return GetRuleContext<ObjectDeclarationContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 119;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; _localctx.Expression = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; _localctx.Return = returnStatement();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 80;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 79; _localctx.Attributes = attributes();
					}
				}

				State = 82; _localctx.FunctionDeclaration = functionStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 84;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 83; _localctx.Attributes = attributes();
					}
				}

				State = 86; _localctx.MacroDeclaration = macroStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 88;
				switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
				case 1:
					{
					State = 87; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 90; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 92;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 91; _localctx.Attributes = attributes();
					}
				}

				State = 94; _localctx.ObjectDeclaration = objectDeclaration();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 96;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 95; _localctx.Attributes = attributes();
					}
				}

				State = 98; _localctx.AttributeDeclaration = attributeDeclaration();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 100;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 99; _localctx.Attributes = attributes();
					}
				}

				State = 102; _localctx.If = ifStatement();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 104;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 103; _localctx.Attributes = attributes();
					}
				}

				State = 106; _localctx.Block = blockStatement();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 108;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 107; _localctx.Attributes = attributes();
					}
				}

				State = 110; _localctx.Foreach = foreachStatement();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 112;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 111; _localctx.Attributes = attributes();
					}
				}

				State = 114; _localctx.While = whileStatement();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 116;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 115; _localctx.Attributes = attributes();
					}
				}

				State = 118; _localctx.Skip = skipStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 121; _localctx.Attributes = attributes();
				}
			}

			State = 124; Match(VAR);
			State = 125; _localctx.VariableName = Match(ID);
			State = 128;
			_la = _input.La(1);
			if (_la==9) {
				{
				State = 126; Match(9);
				State = 127; _localctx.VariableType = typeName();
				}
			}

			State = 130; Match(ASSIGN);
			State = 131; _localctx.VariableDefaultValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributeDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext attributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_attributeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(7);
			State = 134; Match(ID);
			State = 146;
			_la = _input.La(1);
			if (_la==LEFT_PARENTHESIS) {
				{
				State = 135; Match(LEFT_PARENTHESIS);
				State = 136; formalParameter();
				State = 141;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 137; Match(3);
					State = 138; formalParameter();
					}
					}
					State = 143;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 144; Match(RIGHT_PARENTHESIS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDeclarationContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public ObjectDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_objectDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterObjectDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitObjectDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDeclarationContext objectDeclaration() {
		ObjectDeclarationContext _localctx = new ObjectDeclarationContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_objectDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(11);
			State = 149; Match(ID);
			State = 153;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 150; formalParameter();
				State = 151; Match(13);
				}
				}
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ID || _la==ATTRIBUTE_ID );
			State = 157; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Expression;
		public PrimaryExpressionContext PrimaryExpression;
		public FunctionCallExpressionContext FunctionCallExpression;
		public MacroCallExpressionContext MacroCallExpression;
		public MemberExpressionContext MemberExpression;
		public ExpressionContext Right;
		public MacroCallExpressionContext macroCallExpression() {
			return GetRuleContext<MacroCallExpressionContext>(0);
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(MetaCodeParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MetaCodeParser.OR, 0); }
		public MemberExpressionContext memberExpression() {
			return GetRuleContext<MemberExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MetaCodeParser.NOT, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 166;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				State = 160; _localctx.Operator = Match(NOT);
				State = 161; _localctx.Expression = expression(13);
				}
				break;

			case 2:
				{
				State = 162; _localctx.PrimaryExpression = primaryExpression();
				}
				break;

			case 3:
				{
				State = 163; _localctx.FunctionCallExpression = functionCallExpression();
				}
				break;

			case 4:
				{
				State = 164; _localctx.MacroCallExpression = macroCallExpression();
				}
				break;

			case 5:
				{
				State = 165; _localctx.MemberExpression = memberExpression();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 206;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 204;
					switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 168;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 169; _localctx.Operator = Match(4);
						State = 170; _localctx.Right = expression(13);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 171;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 172; _localctx.Operator = Match(6);
						State = 173; _localctx.Right = expression(12);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 174;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 175; _localctx.Operator = Match(5);
						State = 176; _localctx.Right = expression(11);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 177;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 178; _localctx.Operator = Match(18);
						State = 179; _localctx.Right = expression(10);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 180;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 181; _localctx.Operator = Match(10);
						State = 182; _localctx.Right = expression(9);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 183;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 184; _localctx.Operator = Match(16);
						State = 185; _localctx.Right = expression(8);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 187; _localctx.Operator = Match(14);
						State = 188; _localctx.Right = expression(7);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 190; _localctx.Operator = Match(20);
						State = 191; _localctx.Right = expression(6);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 192;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 193; _localctx.Operator = Match(19);
						State = 194; _localctx.Right = expression(5);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 195;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 196; _localctx.Operator = Match(12);
						State = 197; _localctx.Right = expression(4);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 198;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 199; _localctx.Operator = Match(AND);
						State = 200; _localctx.Right = expression(3);
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 202; _localctx.Operator = Match(OR);
						State = 203; _localctx.Right = expression(2);
						}
						break;
					}
					} 
				}
				State = 208;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_functionCallExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; primaryExpression();
			State = 210; Match(LEFT_PARENTHESIS);
			State = 212;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 8) | (1L << BOOLEAN) | (1L << MACRO) | (1L << NOT) | (1L << NULL) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << TREE_SELECTOR) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 211; expression(0);
				}
			}

			State = 214; Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroCallExpressionContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode MACRO() { return GetToken(MetaCodeParser.MACRO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public MacroCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_macroCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMacroCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMacroCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroCallExpressionContext macroCallExpression() {
		MacroCallExpressionContext _localctx = new MacroCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_macroCallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(MACRO);
			State = 217; Match(ID);
			State = 218; Match(LEFT_PARENTHESIS);
			State = 219; statement();
			State = 220; Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberExpressionContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public MemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_memberExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberExpressionContext memberExpression() {
		MemberExpressionContext _localctx = new MemberExpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_memberExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(ID);
			State = 225;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 223; Match(2);
					State = 224; Match(ID);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 227;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,21,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberTagExpressionContext : ParserRuleContext {
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MemberTagExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_memberTagExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMemberTagExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMemberTagExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberTagExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberTagExpressionContext memberTagExpression() {
		MemberTagExpressionContext _localctx = new MemberTagExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_memberTagExpression);
		try {
			State = 231;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; identifier();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 230; functionCallExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IToken Id;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_primaryExpression);
		int _la;
		try {
			State = 252;
			switch ( Interpreter.AdaptivePredict(_input,27,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 233; _localctx.Attributes = attributes();
					}
				}

				State = 236; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 238;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 237; _localctx.Attributes = attributes();
					}
				}

				State = 240; _localctx.Id = Match(ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 241; _localctx.Attributes = attributes();
					}
				}

				State = 244; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 246;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 245; _localctx.Attributes = attributes();
					}
				}

				State = 248; Match(LEFT_PARENTHESIS);
				State = 249; _localctx.InnerExpression = expression(0);
				State = 250; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStatementContext : ParserRuleContext {
		public IToken FunctionName;
		public FormalParameterContext Parameter;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStatementContext functionStatement() {
		FunctionStatementContext _localctx = new FunctionStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_functionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(FUNCTION);
			State = 255; _localctx.FunctionName = Match(ID);
			State = 256; Match(LEFT_PARENTHESIS);
			State = 257; _localctx.Parameter = formalParameter();
			State = 262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 258; Match(3);
				State = 259; _localctx.Parameter = formalParameter();
				}
				}
				State = 264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 265; Match(RIGHT_PARENTHESIS);
			State = 268;
			_la = _input.La(1);
			if (_la==9) {
				{
				State = 266; Match(9);
				State = 267; _localctx.ReturnType = typeName();
				}
			}

			State = 270; Match(DO);
			State = 271; _localctx.BodyStatements = statements();
			State = 272; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroStatementContext : ParserRuleContext {
		public IToken Type;
		public IToken MacroName;
		public IToken Identifier;
		public IToken Selector;
		public StatementsContext BodyStatements;
		public ITerminalNode MACRO() { return GetToken(MetaCodeParser.MACRO, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode TREE_SELECTOR() { return GetToken(MetaCodeParser.TREE_SELECTOR, 0); }
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(MetaCodeParser.IMPLICIT, 0); }
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public ITerminalNode EXPLICIT() { return GetToken(MetaCodeParser.EXPLICIT, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public MacroStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_macroStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMacroStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMacroStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroStatementContext macroStatement() {
		MacroStatementContext _localctx = new MacroStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_macroStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			switch (_input.La(1)) {
			case IMPLICIT:
				{
				State = 274; _localctx.Type = Match(IMPLICIT);
				}
				break;
			case EXPLICIT:
				{
				State = 275; _localctx.Type = Match(EXPLICIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 278; Match(MACRO);
			State = 279; _localctx.MacroName = Match(ID);
			State = 280; Match(LEFT_PARENTHESIS);
			State = 281; _localctx.Identifier = Match(ID);
			State = 282; Match(9);
			State = 283; _localctx.Selector = Match(TREE_SELECTOR);
			State = 284; Match(RIGHT_PARENTHESIS);
			State = 285; Match(DO);
			State = 286; _localctx.BodyStatements = statements();
			State = 287; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken Var;
		public IToken Id;
		public TypeNameContext VariableType;
		public ExpressionContext ArrayExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_foreachStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(FOREACH);
			State = 290; Match(LEFT_PARENTHESIS);
			State = 292;
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 291; _localctx.Var = Match(VAR);
				}
			}

			State = 294; _localctx.Id = Match(ID);
			State = 297;
			_la = _input.La(1);
			if (_la==9) {
				{
				State = 295; Match(9);
				State = 296; _localctx.VariableType = typeName();
				}
			}

			State = 299; Match(IN);
			State = 300; _localctx.ArrayExpression = expression(0);
			State = 301; Match(RIGHT_PARENTHESIS);
			State = 302; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304; Match(WHILE);
			State = 305; Match(LEFT_PARENTHESIS);
			State = 306; _localctx.ConditionExpression = expression(0);
			State = 307; Match(RIGHT_PARENTHESIS);
			State = 308; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; Match(DO);
			State = 311; _localctx.Body = statements();
			State = 312; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipStatementContext : ParserRuleContext {
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public SkipStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_skipStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterSkipStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitSkipStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipStatementContext skipStatement() {
		SkipStatementContext _localctx = new SkipStatementContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_skipStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; Match(SKIP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext ReturnExpression;
		public ITerminalNode RETURN() { return GetToken(MetaCodeParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_returnStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(RETURN);
			State = 317; _localctx.ReturnExpression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IToken Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; _localctx.Variable = Match(ID);
			State = 320; Match(ASSIGN);
			State = 321; _localctx.Value = expression(0);
			State = 330;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				State = 323;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 322; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 325; Match(IF);
				State = 326; Match(LEFT_PARENTHESIS);
				State = 327; _localctx.ConditionalExpression = expression(0);
				State = 328; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext Condition;
		public StatementsContext Statements;
		public ElseIfStatementContext ElseIfStatements;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public IReadOnlyList<ElseIfStatementContext> elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(IF);
			State = 333; Match(LEFT_PARENTHESIS);
			State = 334; _localctx.Condition = expression(0);
			State = 335; Match(RIGHT_PARENTHESIS);
			State = 336; _localctx.Statements = statements();
			State = 340;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 337; _localctx.ElseIfStatements = elseIfStatement();
					}
					} 
				}
				State = 342;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,35,_ctx);
			}
			State = 345;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 343; Match(ELSE);
				State = 344; _localctx.ElseStatements = statements();
				}
			}

			State = 347; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ExpressionContext Condition;
		public StatementsContext Statements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349; Match(ELSE);
			State = 350; Match(IF);
			State = 351; Match(LEFT_PARENTHESIS);
			State = 352; _localctx.Condition = expression(0);
			State = 353; Match(RIGHT_PARENTHESIS);
			State = 354; _localctx.Statements = statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken Name;
		public TypeNameContext Type;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 356; _localctx.Attributes = attributes();
				}
			}

			State = 359; _localctx.Name = Match(ID);
			State = 360; Match(9);
			State = 361; _localctx.Type = typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actualParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363; expression(0);
			State = 368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 364; Match(3);
				State = 365; expression(0);
				}
				}
				State = 370;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 372;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 371; attributes();
				}
			}

			State = 374; Match(ID);
			State = 379;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==2) {
				{
				{
				State = 375; Match(2);
				State = 376; Match(ID);
				}
				}
				State = 381;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberConstantContext Number;
		public StringConstantContext String;
		public BooleanConstantContext Boolean;
		public ArrayConstantContext Array;
		public IntervalConstantContext Interval;
		public IToken Null;
		public IToken TreeSelector;
		public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		public ITerminalNode TREE_SELECTOR() { return GetToken(MetaCodeParser.TREE_SELECTOR, 0); }
		public ArrayConstantContext arrayConstant() {
			return GetRuleContext<ArrayConstantContext>(0);
		}
		public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		public IntervalConstantContext intervalConstant() {
			return GetRuleContext<IntervalConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(MetaCodeParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_constant);
		try {
			State = 389;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 382; _localctx.Number = numberConstant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 383; _localctx.String = stringConstant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 384; _localctx.Boolean = booleanConstant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 385; _localctx.Array = arrayConstant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 386; _localctx.Interval = intervalConstant();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 387; _localctx.Null = Match(NULL);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 388; _localctx.TreeSelector = Match(TREE_SELECTOR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IToken Id;
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_identifier; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; _localctx.Id = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numberConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_numberConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_stringConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_booleanConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 397; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstantContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arrayConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArrayConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArrayConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstantContext arrayConstant() {
		ArrayConstantContext _localctx = new ArrayConstantContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_arrayConstant);
		int _la;
		try {
			State = 412;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399; Match(8);
				State = 400; expression(0);
				State = 405;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 401; Match(3);
					State = 402; expression(0);
					}
					}
					State = 407;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 408; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 410; Match(8);
				State = 411; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalConstantContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_intervalConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIntervalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIntervalConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalConstantContext intervalConstant() {
		IntervalConstantContext _localctx = new IntervalConstantContext(_ctx, State);
		EnterRule(_localctx, 62, RULE_intervalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 414; _localctx.Start = Match(NUMBER);
			State = 415; Match(15);
			State = 416; _localctx.End = Match(NUMBER);
			State = 419;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 417; Match(17);
				State = 418; _localctx.By = Match(NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 64, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 421; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 424;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,45,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 66, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; _localctx.Name = Match(ATTRIBUTE_ID);
			State = 438;
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 427; Match(LEFT_PARENTHESIS);
				State = 428; constant();
				State = 433;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 429; Match(3);
					State = 430; constant();
					}
					}
					State = 435;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 436; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x35\x1BB\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x6\x3L\n\x3\r\x3\xE"+
		"\x3M\x3\x4\x3\x4\x3\x4\x5\x4S\n\x4\x3\x4\x3\x4\x5\x4W\n\x4\x3\x4\x3\x4"+
		"\x5\x4[\n\x4\x3\x4\x3\x4\x5\x4_\n\x4\x3\x4\x3\x4\x5\x4\x63\n\x4\x3\x4"+
		"\x3\x4\x5\x4g\n\x4\x3\x4\x3\x4\x5\x4k\n\x4\x3\x4\x3\x4\x5\x4o\n\x4\x3"+
		"\x4\x3\x4\x5\x4s\n\x4\x3\x4\x3\x4\x5\x4w\n\x4\x3\x4\x5\x4z\n\x4\x3\x5"+
		"\x5\x5}\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x83\n\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x8E\n\x6\f\x6\xE\x6\x91\v\x6"+
		"\x3\x6\x3\x6\x5\x6\x95\n\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x6\a\x9C\n\a\r\a"+
		"\xE\a\x9D\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA9\n\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\a\b\xCF\n\b\f\b\xE\b\xD2\v\b\x3"+
		"\t\x3\t\x3\t\x5\t\xD7\n\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v"+
		"\x3\v\x3\v\x6\v\xE4\n\v\r\v\xE\v\xE5\x3\f\x3\f\x5\f\xEA\n\f\x3\r\x5\r"+
		"\xED\n\r\x3\r\x3\r\x5\r\xF1\n\r\x3\r\x3\r\x5\r\xF5\n\r\x3\r\x3\r\x5\r"+
		"\xF9\n\r\x3\r\x3\r\x3\r\x3\r\x5\r\xFF\n\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE"+
		"\x3\xE\a\xE\x107\n\xE\f\xE\xE\xE\x10A\v\xE\x3\xE\x3\xE\x3\xE\x5\xE\x10F"+
		"\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x5\xF\x117\n\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3"+
		"\x10\x5\x10\x127\n\x10\x3\x10\x3\x10\x3\x10\x5\x10\x12C\n\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x15\x3"+
		"\x15\x3\x15\x3\x15\x5\x15\x146\n\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15"+
		"\x5\x15\x14D\n\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\a\x16\x155"+
		"\n\x16\f\x16\xE\x16\x158\v\x16\x3\x16\x3\x16\x5\x16\x15C\n\x16\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x5\x18"+
		"\x168\n\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\a\x19\x171"+
		"\n\x19\f\x19\xE\x19\x174\v\x19\x3\x1A\x5\x1A\x177\n\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\a\x1A\x17C\n\x1A\f\x1A\xE\x1A\x17F\v\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x188\n\x1B\x3\x1C\x3\x1C\x3\x1D\x3"+
		"\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \a \x196\n \f \xE \x199"+
		"\v \x3 \x3 \x3 \x3 \x5 \x19F\n \x3!\x3!\x3!\x3!\x3!\x5!\x1A6\n!\x3\"\x6"+
		"\"\x1A9\n\"\r\"\xE\"\x1AA\x3#\x3#\x3#\x3#\x3#\a#\x1B2\n#\f#\xE#\x1B5\v"+
		"#\x3#\x3#\x5#\x1B9\n#\x3#\x2\x2\x3\xE$\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2"+
		"@\x2\x42\x2\x44\x2\x2\x2\x1E6\x2\x46\x3\x2\x2\x2\x4K\x3\x2\x2\x2\x6y\x3"+
		"\x2\x2\x2\b|\x3\x2\x2\x2\n\x87\x3\x2\x2\x2\f\x96\x3\x2\x2\x2\xE\xA8\x3"+
		"\x2\x2\x2\x10\xD3\x3\x2\x2\x2\x12\xDA\x3\x2\x2\x2\x14\xE0\x3\x2\x2\x2"+
		"\x16\xE9\x3\x2\x2\x2\x18\xFE\x3\x2\x2\x2\x1A\x100\x3\x2\x2\x2\x1C\x116"+
		"\x3\x2\x2\x2\x1E\x123\x3\x2\x2\x2 \x132\x3\x2\x2\x2\"\x138\x3\x2\x2\x2"+
		"$\x13C\x3\x2\x2\x2&\x13E\x3\x2\x2\x2(\x141\x3\x2\x2\x2*\x14E\x3\x2\x2"+
		"\x2,\x15F\x3\x2\x2\x2.\x167\x3\x2\x2\x2\x30\x16D\x3\x2\x2\x2\x32\x176"+
		"\x3\x2\x2\x2\x34\x187\x3\x2\x2\x2\x36\x189\x3\x2\x2\x2\x38\x18B\x3\x2"+
		"\x2\x2:\x18D\x3\x2\x2\x2<\x18F\x3\x2\x2\x2>\x19E\x3\x2\x2\x2@\x1A0\x3"+
		"\x2\x2\x2\x42\x1A8\x3\x2\x2\x2\x44\x1AC\x3\x2\x2\x2\x46G\x5\x4\x3\x2G"+
		"\x3\x3\x2\x2\x2HI\x5\x6\x4\x2IJ\a\xF\x2\x2JL\x3\x2\x2\x2KH\x3\x2\x2\x2"+
		"LM\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2N\x5\x3\x2\x2\x2Oz\x5\xE\b\x2"+
		"Pz\x5&\x14\x2QS\x5\x42\"\x2RQ\x3\x2\x2\x2RS\x3\x2\x2\x2ST\x3\x2\x2\x2"+
		"Tz\x5\x1A\xE\x2UW\x5\x42\"\x2VU\x3\x2\x2\x2VW\x3\x2\x2\x2WX\x3\x2\x2\x2"+
		"Xz\x5\x1C\xF\x2Y[\x5\x42\"\x2ZY\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\x3\x2\x2"+
		"\x2\\z\x5\b\x5\x2]_\x5\x42\"\x2^]\x3\x2\x2\x2^_\x3\x2\x2\x2_`\x3\x2\x2"+
		"\x2`z\x5\f\a\x2\x61\x63\x5\x42\"\x2\x62\x61\x3\x2\x2\x2\x62\x63\x3\x2"+
		"\x2\x2\x63\x64\x3\x2\x2\x2\x64z\x5\n\x6\x2\x65g\x5\x42\"\x2\x66\x65\x3"+
		"\x2\x2\x2\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2hz\x5*\x16\x2ik\x5\x42\"\x2ji"+
		"\x3\x2\x2\x2jk\x3\x2\x2\x2kl\x3\x2\x2\x2lz\x5\"\x12\x2mo\x5\x42\"\x2n"+
		"m\x3\x2\x2\x2no\x3\x2\x2\x2op\x3\x2\x2\x2pz\x5\x1E\x10\x2qs\x5\x42\"\x2"+
		"rq\x3\x2\x2\x2rs\x3\x2\x2\x2st\x3\x2\x2\x2tz\x5 \x11\x2uw\x5\x42\"\x2"+
		"vu\x3\x2\x2\x2vw\x3\x2\x2\x2wx\x3\x2\x2\x2xz\x5$\x13\x2yO\x3\x2\x2\x2"+
		"yP\x3\x2\x2\x2yR\x3\x2\x2\x2yV\x3\x2\x2\x2yZ\x3\x2\x2\x2y^\x3\x2\x2\x2"+
		"y\x62\x3\x2\x2\x2y\x66\x3\x2\x2\x2yj\x3\x2\x2\x2yn\x3\x2\x2\x2yr\x3\x2"+
		"\x2\x2yv\x3\x2\x2\x2z\a\x3\x2\x2\x2{}\x5\x42\"\x2|{\x3\x2\x2\x2|}\x3\x2"+
		"\x2\x2}~\x3\x2\x2\x2~\x7F\a#\x2\x2\x7F\x82\a-\x2\x2\x80\x81\a\v\x2\x2"+
		"\x81\x83\x5\x32\x1A\x2\x82\x80\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84"+
		"\x3\x2\x2\x2\x84\x85\a%\x2\x2\x85\x86\x5\xE\b\x2\x86\t\x3\x2\x2\x2\x87"+
		"\x88\a\t\x2\x2\x88\x94\a-\x2\x2\x89\x8A\a+\x2\x2\x8A\x8F\x5.\x18\x2\x8B"+
		"\x8C\a\x5\x2\x2\x8C\x8E\x5.\x18\x2\x8D\x8B\x3\x2\x2\x2\x8E\x91\x3\x2\x2"+
		"\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90\x3\x2\x2\x2\x90\x92\x3\x2\x2\x2\x91\x8F"+
		"\x3\x2\x2\x2\x92\x93\a,\x2\x2\x93\x95\x3\x2\x2\x2\x94\x89\x3\x2\x2\x2"+
		"\x94\x95\x3\x2\x2\x2\x95\v\x3\x2\x2\x2\x96\x97\a\r\x2\x2\x97\x9B\a-\x2"+
		"\x2\x98\x99\x5.\x18\x2\x99\x9A\a\xF\x2\x2\x9A\x9C\x3\x2\x2\x2\x9B\x98"+
		"\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2"+
		"\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\a\x1D\x2\x2\xA0\r\x3\x2\x2\x2\xA1\xA2"+
		"\b\b\x1\x2\xA2\xA3\a(\x2\x2\xA3\xA9\x5\xE\b\xF\xA4\xA9\x5\x18\r\x2\xA5"+
		"\xA9\x5\x10\t\x2\xA6\xA9\x5\x12\n\x2\xA7\xA9\x5\x14\v\x2\xA8\xA1\x3\x2"+
		"\x2\x2\xA8\xA4\x3\x2\x2\x2\xA8\xA5\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8"+
		"\xA7\x3\x2\x2\x2\xA9\xD0\x3\x2\x2\x2\xAA\xAB\f\xE\x2\x2\xAB\xAC\a\x6\x2"+
		"\x2\xAC\xCF\x5\xE\b\xF\xAD\xAE\f\r\x2\x2\xAE\xAF\a\b\x2\x2\xAF\xCF\x5"+
		"\xE\b\xE\xB0\xB1\f\f\x2\x2\xB1\xB2\a\a\x2\x2\xB2\xCF\x5\xE\b\r\xB3\xB4"+
		"\f\v\x2\x2\xB4\xB5\a\x14\x2\x2\xB5\xCF\x5\xE\b\f\xB6\xB7\f\n\x2\x2\xB7"+
		"\xB8\a\f\x2\x2\xB8\xCF\x5\xE\b\v\xB9\xBA\f\t\x2\x2\xBA\xBB\a\x12\x2\x2"+
		"\xBB\xCF\x5\xE\b\n\xBC\xBD\f\b\x2\x2\xBD\xBE\a\x10\x2\x2\xBE\xCF\x5\xE"+
		"\b\t\xBF\xC0\f\a\x2\x2\xC0\xC1\a\x16\x2\x2\xC1\xCF\x5\xE\b\b\xC2\xC3\f"+
		"\x6\x2\x2\xC3\xC4\a\x15\x2\x2\xC4\xCF\x5\xE\b\a\xC5\xC6\f\x5\x2\x2\xC6"+
		"\xC7\a\xE\x2\x2\xC7\xCF\x5\xE\b\x6\xC8\xC9\f\x4\x2\x2\xC9\xCA\a&\x2\x2"+
		"\xCA\xCF\x5\xE\b\x5\xCB\xCC\f\x3\x2\x2\xCC\xCD\a\'\x2\x2\xCD\xCF\x5\xE"+
		"\b\x4\xCE\xAA\x3\x2\x2\x2\xCE\xAD\x3\x2\x2\x2\xCE\xB0\x3\x2\x2\x2\xCE"+
		"\xB3\x3\x2\x2\x2\xCE\xB6\x3\x2\x2\x2\xCE\xB9\x3\x2\x2\x2\xCE\xBC\x3\x2"+
		"\x2\x2\xCE\xBF\x3\x2\x2\x2\xCE\xC2\x3\x2\x2\x2\xCE\xC5\x3\x2\x2\x2\xCE"+
		"\xC8\x3\x2\x2\x2\xCE\xCB\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2"+
		"\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xF\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3"+
		"\xD4\x5\x18\r\x2\xD4\xD6\a+\x2\x2\xD5\xD7\x5\xE\b\x2\xD6\xD5\x3\x2\x2"+
		"\x2\xD6\xD7\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xD9\a,\x2\x2\xD9\x11\x3"+
		"\x2\x2\x2\xDA\xDB\a!\x2\x2\xDB\xDC\a-\x2\x2\xDC\xDD\a+\x2\x2\xDD\xDE\x5"+
		"\x6\x4\x2\xDE\xDF\a,\x2\x2\xDF\x13\x3\x2\x2\x2\xE0\xE3\a-\x2\x2\xE1\xE2"+
		"\a\x4\x2\x2\xE2\xE4\a-\x2\x2\xE3\xE1\x3\x2\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5"+
		"\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6\x15\x3\x2\x2\x2\xE7\xEA\x5\x36"+
		"\x1C\x2\xE8\xEA\x5\x10\t\x2\xE9\xE7\x3\x2\x2\x2\xE9\xE8\x3\x2\x2\x2\xEA"+
		"\x17\x3\x2\x2\x2\xEB\xED\x5\x42\"\x2\xEC\xEB\x3\x2\x2\x2\xEC\xED\x3\x2"+
		"\x2\x2\xED\xEE\x3\x2\x2\x2\xEE\xFF\x5\x34\x1B\x2\xEF\xF1\x5\x42\"\x2\xF0"+
		"\xEF\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1\xF2\x3\x2\x2\x2\xF2\xFF\a-\x2"+
		"\x2\xF3\xF5\x5\x42\"\x2\xF4\xF3\x3\x2\x2\x2\xF4\xF5\x3\x2\x2\x2\xF5\xF6"+
		"\x3\x2\x2\x2\xF6\xFF\x5(\x15\x2\xF7\xF9\x5\x42\"\x2\xF8\xF7\x3\x2\x2\x2"+
		"\xF8\xF9\x3\x2\x2\x2\xF9\xFA\x3\x2\x2\x2\xFA\xFB\a+\x2\x2\xFB\xFC\x5\xE"+
		"\b\x2\xFC\xFD\a,\x2\x2\xFD\xFF\x3\x2\x2\x2\xFE\xEC\x3\x2\x2\x2\xFE\xF0"+
		"\x3\x2\x2\x2\xFE\xF4\x3\x2\x2\x2\xFE\xF8\x3\x2\x2\x2\xFF\x19\x3\x2\x2"+
		"\x2\x100\x101\a\x17\x2\x2\x101\x102\a-\x2\x2\x102\x103\a+\x2\x2\x103\x108"+
		"\x5.\x18\x2\x104\x105\a\x5\x2\x2\x105\x107\x5.\x18\x2\x106\x104\x3\x2"+
		"\x2\x2\x107\x10A\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x109\x3\x2\x2"+
		"\x2\x109\x10B\x3\x2\x2\x2\x10A\x108\x3\x2\x2\x2\x10B\x10E\a,\x2\x2\x10C"+
		"\x10D\a\v\x2\x2\x10D\x10F\x5\x32\x1A\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F"+
		"\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x111\a\x1C\x2\x2\x111\x112\x5"+
		"\x4\x3\x2\x112\x113\a\x1D\x2\x2\x113\x1B\x3\x2\x2\x2\x114\x117\a\x1F\x2"+
		"\x2\x115\x117\a \x2\x2\x116\x114\x3\x2\x2\x2\x116\x115\x3\x2\x2\x2\x117"+
		"\x118\x3\x2\x2\x2\x118\x119\a!\x2\x2\x119\x11A\a-\x2\x2\x11A\x11B\a+\x2"+
		"\x2\x11B\x11C\a-\x2\x2\x11C\x11D\a\v\x2\x2\x11D\x11E\a\x30\x2\x2\x11E"+
		"\x11F\a,\x2\x2\x11F\x120\a\x1C\x2\x2\x120\x121\x5\x4\x3\x2\x121\x122\a"+
		"\x1D\x2\x2\x122\x1D\x3\x2\x2\x2\x123\x124\a\x18\x2\x2\x124\x126\a+\x2"+
		"\x2\x125\x127\a#\x2\x2\x126\x125\x3\x2\x2\x2\x126\x127\x3\x2\x2\x2\x127"+
		"\x128\x3\x2\x2\x2\x128\x12B\a-\x2\x2\x129\x12A\a\v\x2\x2\x12A\x12C\x5"+
		"\x32\x1A\x2\x12B\x129\x3\x2\x2\x2\x12B\x12C\x3\x2\x2\x2\x12C\x12D\x3\x2"+
		"\x2\x2\x12D\x12E\a$\x2\x2\x12E\x12F\x5\xE\b\x2\x12F\x130\a,\x2\x2\x130"+
		"\x131\x5\x6\x4\x2\x131\x1F\x3\x2\x2\x2\x132\x133\a\x19\x2\x2\x133\x134"+
		"\a+\x2\x2\x134\x135\x5\xE\b\x2\x135\x136\a,\x2\x2\x136\x137\x5\x6\x4\x2"+
		"\x137!\x3\x2\x2\x2\x138\x139\a\x1C\x2\x2\x139\x13A\x5\x4\x3\x2\x13A\x13B"+
		"\a\x1D\x2\x2\x13B#\x3\x2\x2\x2\x13C\x13D\a\"\x2\x2\x13D%\x3\x2\x2\x2\x13E"+
		"\x13F\a*\x2\x2\x13F\x140\x5\xE\b\x2\x140\'\x3\x2\x2\x2\x141\x142\a-\x2"+
		"\x2\x142\x143\a%\x2\x2\x143\x14C\x5\xE\b\x2\x144\x146\x5\x42\"\x2\x145"+
		"\x144\x3\x2\x2\x2\x145\x146\x3\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148"+
		"\a\x1A\x2\x2\x148\x149\a+\x2\x2\x149\x14A\x5\xE\b\x2\x14A\x14B\a,\x2\x2"+
		"\x14B\x14D\x3\x2\x2\x2\x14C\x145\x3\x2\x2\x2\x14C\x14D\x3\x2\x2\x2\x14D"+
		")\x3\x2\x2\x2\x14E\x14F\a\x1A\x2\x2\x14F\x150\a+\x2\x2\x150\x151\x5\xE"+
		"\b\x2\x151\x152\a,\x2\x2\x152\x156\x5\x4\x3\x2\x153\x155\x5,\x17\x2\x154"+
		"\x153\x3\x2\x2\x2\x155\x158\x3\x2\x2\x2\x156\x154\x3\x2\x2\x2\x156\x157"+
		"\x3\x2\x2\x2\x157\x15B\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x159\x15A\a\x1B"+
		"\x2\x2\x15A\x15C\x5\x4\x3\x2\x15B\x159\x3\x2\x2\x2\x15B\x15C\x3\x2\x2"+
		"\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15E\a\x1D\x2\x2\x15E+\x3\x2\x2\x2\x15F"+
		"\x160\a\x1B\x2\x2\x160\x161\a\x1A\x2\x2\x161\x162\a+\x2\x2\x162\x163\x5"+
		"\xE\b\x2\x163\x164\a,\x2\x2\x164\x165\x5\x4\x3\x2\x165-\x3\x2\x2\x2\x166"+
		"\x168\x5\x42\"\x2\x167\x166\x3\x2\x2\x2\x167\x168\x3\x2\x2\x2\x168\x169"+
		"\x3\x2\x2\x2\x169\x16A\a-\x2\x2\x16A\x16B\a\v\x2\x2\x16B\x16C\x5\x32\x1A"+
		"\x2\x16C/\x3\x2\x2\x2\x16D\x172\x5\xE\b\x2\x16E\x16F\a\x5\x2\x2\x16F\x171"+
		"\x5\xE\b\x2\x170\x16E\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x170\x3\x2"+
		"\x2\x2\x172\x173\x3\x2\x2\x2\x173\x31\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2"+
		"\x175\x177\x5\x42\"\x2\x176\x175\x3\x2\x2\x2\x176\x177\x3\x2\x2\x2\x177"+
		"\x178\x3\x2\x2\x2\x178\x17D\a-\x2\x2\x179\x17A\a\x4\x2\x2\x17A\x17C\a"+
		"-\x2\x2\x17B\x179\x3\x2\x2\x2\x17C\x17F\x3\x2\x2\x2\x17D\x17B\x3\x2\x2"+
		"\x2\x17D\x17E\x3\x2\x2\x2\x17E\x33\x3\x2\x2\x2\x17F\x17D\x3\x2\x2\x2\x180"+
		"\x188\x5\x38\x1D\x2\x181\x188\x5:\x1E\x2\x182\x188\x5<\x1F\x2\x183\x188"+
		"\x5> \x2\x184\x188\x5@!\x2\x185\x188\a)\x2\x2\x186\x188\a\x30\x2\x2\x187"+
		"\x180\x3\x2\x2\x2\x187\x181\x3\x2\x2\x2\x187\x182\x3\x2\x2\x2\x187\x183"+
		"\x3\x2\x2\x2\x187\x184\x3\x2\x2\x2\x187\x185\x3\x2\x2\x2\x187\x186\x3"+
		"\x2\x2\x2\x188\x35\x3\x2\x2\x2\x189\x18A\a-\x2\x2\x18A\x37\x3\x2\x2\x2"+
		"\x18B\x18C\a\x33\x2\x2\x18C\x39\x3\x2\x2\x2\x18D\x18E\a\x32\x2\x2\x18E"+
		";\x3\x2\x2\x2\x18F\x190\a\x1E\x2\x2\x190=\x3\x2\x2\x2\x191\x192\a\n\x2"+
		"\x2\x192\x197\x5\xE\b\x2\x193\x194\a\x5\x2\x2\x194\x196\x5\xE\b\x2\x195"+
		"\x193\x3\x2\x2\x2\x196\x199\x3\x2\x2\x2\x197\x195\x3\x2\x2\x2\x197\x198"+
		"\x3\x2\x2\x2\x198\x19A\x3\x2\x2\x2\x199\x197\x3\x2\x2\x2\x19A\x19B\a\x3"+
		"\x2\x2\x19B\x19F\x3\x2\x2\x2\x19C\x19D\a\n\x2\x2\x19D\x19F\a\x3\x2\x2"+
		"\x19E\x191\x3\x2\x2\x2\x19E\x19C\x3\x2\x2\x2\x19F?\x3\x2\x2\x2\x1A0\x1A1"+
		"\a\x33\x2\x2\x1A1\x1A2\a\x11\x2\x2\x1A2\x1A5\a\x33\x2\x2\x1A3\x1A4\a\x13"+
		"\x2\x2\x1A4\x1A6\a\x33\x2\x2\x1A5\x1A3\x3\x2\x2\x2\x1A5\x1A6\x3\x2\x2"+
		"\x2\x1A6\x41\x3\x2\x2\x2\x1A7\x1A9\x5\x44#\x2\x1A8\x1A7\x3\x2\x2\x2\x1A9"+
		"\x1AA\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA\x1AB\x3\x2\x2\x2\x1AB\x43"+
		"\x3\x2\x2\x2\x1AC\x1B8\a\x31\x2\x2\x1AD\x1AE\a+\x2\x2\x1AE\x1B3\x5\x34"+
		"\x1B\x2\x1AF\x1B0\a\x5\x2\x2\x1B0\x1B2\x5\x34\x1B\x2\x1B1\x1AF\x3\x2\x2"+
		"\x2\x1B2\x1B5\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2"+
		"\x1B4\x1B6\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1B7\a,\x2\x2\x1B7\x1B9"+
		"\x3\x2\x2\x2\x1B8\x1AD\x3\x2\x2\x2\x1B8\x1B9\x3\x2\x2\x2\x1B9\x45\x3\x2"+
		"\x2\x2\x32MRVZ^\x62\x66jnrvy|\x82\x8F\x94\x9D\xA8\xCE\xD0\xD6\xE5\xE9"+
		"\xEC\xF0\xF4\xF8\xFE\x108\x10E\x116\x126\x12B\x145\x14C\x156\x15B\x167"+
		"\x172\x176\x17D\x187\x197\x19E\x1A5\x1AA\x1B3\x1B8";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
