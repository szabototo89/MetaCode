//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__17=1, T__16=2, T__15=3, T__14=4, T__13=5, T__12=6, T__11=7, T__10=8, 
		T__9=9, T__8=10, T__7=11, T__6=12, T__5=13, T__4=14, T__3=15, T__2=16, 
		T__1=17, T__0=18, FUNCTION=19, FOREACH=20, WHILE=21, IF=22, ELSE=23, DO=24, 
		END=25, BOOLEAN=26, SKIP=27, VAR=28, IN=29, ASSIGN=30, AND=31, OR=32, 
		NOT=33, LEFT_PARENTHESIS=34, RIGHT_PARENTHESIS=35, ID=36, COMMENT=37, 
		MULTILINE_COMMENT=38, ATTRIBUTE_ID=39, STRING=40, NUMBER=41, WHITESPACE=42, 
		NEWLINE=43;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'.'", "','", "'+'", "'*'", "'-'", "'['", "':'", "'<'", 
		"'!='", "';'", "'<='", "'>'", "'by'", "'=='", "'/'", "'>='", "'..'", "'function'", 
		"'foreach'", "'while'", "'if'", "'else'", "'do'", "'end'", "BOOLEAN", 
		"'skip'", "'var'", "'in'", "'='", "'and'", "'or'", "'not'", "'('", "')'", 
		"ID", "COMMENT", "MULTILINE_COMMENT", "ATTRIBUTE_ID", "STRING", "NUMBER", 
		"WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_expression = 4, RULE_functionCallExpression = 5, RULE_memberExpression = 6, 
		RULE_primaryExpression = 7, RULE_functionExpression = 8, RULE_foreachStatement = 9, 
		RULE_whileStatement = 10, RULE_blockStatement = 11, RULE_assignmentExpression = 12, 
		RULE_ifStatement = 13, RULE_elseIfStatement = 14, RULE_formalParameterList = 15, 
		RULE_formalParameter = 16, RULE_actualParameterList = 17, RULE_typeName = 18, 
		RULE_constant = 19, RULE_numberConstant = 20, RULE_stringConstant = 21, 
		RULE_booleanConstant = 22, RULE_arrayConstant = 23, RULE_intervalConstant = 24, 
		RULE_attributes = 25, RULE_attribute = 26;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "expression", 
		"functionCallExpression", "memberExpression", "primaryExpression", "functionExpression", 
		"foreachStatement", "whileStatement", "blockStatement", "assignmentExpression", 
		"ifStatement", "elseIfStatement", "formalParameterList", "formalParameter", 
		"actualParameterList", "typeName", "constant", "numberConstant", "stringConstant", 
		"booleanConstant", "arrayConstant", "intervalConstant", "attributes", 
		"attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 56; statement();
				State = 57; Match(11);
				}
				}
				State = 61;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << FUNCTION) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << DO) | (1L << BOOLEAN) | (1L << SKIP) | (1L << VAR) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public AttributesContext Attributes;
		public VariableDeclarationContext VariableDeclaration;
		public IfStatementContext If;
		public BlockStatementContext Block;
		public ForeachStatementContext Foreach;
		public WhileStatementContext While;
		public IToken Skip;
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 88;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 63; _localctx.Expression = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 64; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 67; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 69;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 68; _localctx.Attributes = attributes();
					}
				}

				State = 71; _localctx.If = ifStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 73;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 72; _localctx.Attributes = attributes();
					}
				}

				State = 75; _localctx.Block = blockStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 77;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 76; _localctx.Attributes = attributes();
					}
				}

				State = 79; _localctx.Foreach = foreachStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 81;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 80; _localctx.Attributes = attributes();
					}
				}

				State = 83; _localctx.While = whileStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 85;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 84; _localctx.Attributes = attributes();
					}
				}

				State = 87; _localctx.Skip = Match(SKIP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 90; _localctx.Attributes = attributes();
				}
			}

			State = 93; Match(VAR);
			State = 94; _localctx.VariableName = Match(ID);
			State = 97;
			_la = _input.La(1);
			if (_la==8) {
				{
				State = 95; Match(8);
				State = 96; _localctx.VariableType = typeName();
				}
			}

			State = 99; Match(ASSIGN);
			State = 100; _localctx.VariableDefaultValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Expression;
		public ExpressionContext Right;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(MetaCodeParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MetaCodeParser.OR, 0); }
		public MemberExpressionContext memberExpression() {
			return GetRuleContext<MemberExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MetaCodeParser.NOT, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 103; _localctx.Operator = Match(NOT);
				State = 104; _localctx.Expression = expression(13);
				}
				break;

			case 2:
				{
				State = 105; primaryExpression();
				}
				break;

			case 3:
				{
				State = 106; functionCallExpression();
				}
				break;

			case 4:
				{
				State = 107; memberExpression();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 148;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 146;
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 110;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 111; _localctx.Operator = Match(4);
						State = 112; _localctx.Right = expression(13);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 113;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 114; _localctx.Operator = Match(6);
						State = 115; _localctx.Right = expression(12);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 116;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 117; _localctx.Operator = Match(5);
						State = 118; _localctx.Right = expression(11);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 119;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 120; _localctx.Operator = Match(16);
						State = 121; _localctx.Right = expression(10);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 122;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 123; _localctx.Operator = Match(9);
						State = 124; _localctx.Right = expression(9);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 125;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 126; _localctx.Operator = Match(13);
						State = 127; _localctx.Right = expression(8);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 128;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 129; _localctx.Operator = Match(12);
						State = 130; _localctx.Right = expression(7);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 131;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 132; _localctx.Operator = Match(17);
						State = 133; _localctx.Right = expression(6);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 134;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 135; _localctx.Operator = Match(15);
						State = 136; _localctx.Right = expression(5);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 137;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 138; _localctx.Operator = Match(10);
						State = 139; _localctx.Right = expression(4);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 140;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 141; _localctx.Operator = Match(AND);
						State = 142; _localctx.Right = expression(3);
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 143;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 144; _localctx.Operator = Match(OR);
						State = 145; _localctx.Right = expression(2);
						}
						break;
					}
					} 
				}
				State = 150;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionCallExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; primaryExpression();
			State = 152; Match(LEFT_PARENTHESIS);
			State = 154;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << FUNCTION) | (1L << BOOLEAN) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 153; expression(0);
				}
			}

			State = 156; Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberExpressionContext : ParserRuleContext {
		public FunctionCallExpressionContext functionCallExpression(int i) {
			return GetRuleContext<FunctionCallExpressionContext>(i);
		}
		public IReadOnlyList<FunctionCallExpressionContext> functionCallExpression() {
			return GetRuleContexts<FunctionCallExpressionContext>();
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public MemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_memberExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberExpressionContext memberExpression() {
		MemberExpressionContext _localctx = new MemberExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_memberExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; primaryExpression();
			State = 164;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 159; Match(2);
					State = 162;
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						State = 160; Match(ID);
						}
						break;

					case 2:
						{
						State = 161; functionCallExpression();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 166;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IToken Id;
		public FunctionExpressionContext Function;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_primaryExpression);
		int _la;
		try {
			State = 191;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 168; _localctx.Attributes = attributes();
					}
				}

				State = 171; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 172; _localctx.Attributes = attributes();
					}
				}

				State = 175; _localctx.Id = Match(ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 177;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 176; _localctx.Attributes = attributes();
					}
				}

				State = 179; _localctx.Function = functionExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 181;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 180; _localctx.Attributes = attributes();
					}
				}

				State = 183; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 185;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 184; _localctx.Attributes = attributes();
					}
				}

				State = 187; Match(LEFT_PARENTHESIS);
				State = 188; _localctx.InnerExpression = expression(0);
				State = 189; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		public IToken FunctionName;
		public FormalParameterListContext Parameters;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public ExpressionContext BodyExpression;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionExpression);
		int _la;
		try {
			State = 225;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 193; Match(FUNCTION);
				State = 195;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 194; _localctx.FunctionName = Match(ID);
					}
				}

				State = 197; Match(LEFT_PARENTHESIS);
				State = 199;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 198; _localctx.Parameters = formalParameterList();
					}
				}

				State = 201; Match(RIGHT_PARENTHESIS);
				State = 204;
				_la = _input.La(1);
				if (_la==8) {
					{
					State = 202; Match(8);
					State = 203; _localctx.ReturnType = typeName();
					}
				}

				State = 206; Match(DO);
				State = 207; _localctx.BodyStatements = statements();
				State = 208; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 210; Match(FUNCTION);
				State = 212;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 211; _localctx.FunctionName = Match(ID);
					}
				}

				State = 214; Match(LEFT_PARENTHESIS);
				State = 216;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 215; _localctx.Parameters = formalParameterList();
					}
				}

				State = 218; Match(RIGHT_PARENTHESIS);
				State = 221;
				_la = _input.La(1);
				if (_la==8) {
					{
					State = 219; Match(8);
					State = 220; _localctx.ReturnType = typeName();
					}
				}

				State = 223; Match(ASSIGN);
				State = 224; _localctx.BodyExpression = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken Id;
		public ExpressionContext ArrayExpression;
		public StatementContext Body;
		public IToken VarId;
		public TypeNameContext TypeName;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_foreachStatement);
		try {
			State = 246;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; Match(FOREACH);
				State = 228; Match(LEFT_PARENTHESIS);
				State = 229; _localctx.Id = Match(ID);
				State = 230; Match(IN);
				State = 231; _localctx.ArrayExpression = expression(0);
				State = 232; Match(RIGHT_PARENTHESIS);
				State = 233; _localctx.Body = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; Match(FOREACH);
				State = 236; Match(LEFT_PARENTHESIS);
				State = 237; Match(VAR);
				State = 238; _localctx.VarId = Match(ID);
				State = 239; Match(8);
				State = 240; _localctx.TypeName = typeName();
				State = 241; Match(IN);
				State = 242; _localctx.ArrayExpression = expression(0);
				State = 243; Match(RIGHT_PARENTHESIS);
				State = 244; _localctx.Body = statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(WHILE);
			State = 249; Match(LEFT_PARENTHESIS);
			State = 250; _localctx.ConditionExpression = expression(0);
			State = 251; Match(RIGHT_PARENTHESIS);
			State = 252; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(DO);
			State = 255; _localctx.Body = statements();
			State = 256; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IToken Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258; _localctx.Variable = Match(ID);
			State = 259; Match(ASSIGN);
			State = 260; _localctx.Value = expression(0);
			State = 269;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 262;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 261; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 264; Match(IF);
				State = 265; Match(LEFT_PARENTHESIS);
				State = 266; _localctx.ConditionalExpression = expression(0);
				State = 267; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext Condition;
		public StatementsContext Statements;
		public ElseIfStatementContext ElseIfExpressions;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public IReadOnlyList<ElseIfStatementContext> elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(IF);
			State = 272; Match(LEFT_PARENTHESIS);
			State = 273; _localctx.Condition = expression(0);
			State = 274; Match(RIGHT_PARENTHESIS);
			State = 275; _localctx.Statements = statements();
			State = 279;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 276; _localctx.ElseIfExpressions = elseIfStatement();
					}
					} 
				}
				State = 281;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			State = 284;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 282; Match(ELSE);
				State = 283; _localctx.ElseStatements = statements();
				}
			}

			State = 286; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; Match(ELSE);
			State = 289; Match(IF);
			State = 290; Match(LEFT_PARENTHESIS);
			State = 291; expression(0);
			State = 292; Match(RIGHT_PARENTHESIS);
			State = 293; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; formalParameter();
			State = 300;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 296; Match(3);
				State = 297; formalParameter();
				}
				}
				State = 302;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 303; attributes();
				}
			}

			State = 306; Match(ID);
			State = 307; Match(8);
			State = 308; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actualParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310; expression(0);
			State = 315;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 311; Match(3);
				State = 312; expression(0);
				}
				}
				State = 317;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 318; attributes();
				}
			}

			State = 321; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberConstantContext Number;
		public StringConstantContext String;
		public BooleanConstantContext Boolean;
		public ArrayConstantContext Array;
		public IntervalConstantContext Interval;
		public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		public ArrayConstantContext arrayConstant() {
			return GetRuleContext<ArrayConstantContext>(0);
		}
		public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		public IntervalConstantContext intervalConstant() {
			return GetRuleContext<IntervalConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_constant);
		try {
			State = 328;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 323; _localctx.Number = numberConstant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 324; _localctx.String = stringConstant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 325; _localctx.Boolean = booleanConstant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 326; _localctx.Array = arrayConstant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 327; _localctx.Interval = intervalConstant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numberConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_numberConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 330; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_stringConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_booleanConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstantContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arrayConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArrayConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArrayConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstantContext arrayConstant() {
		ArrayConstantContext _localctx = new ArrayConstantContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_arrayConstant);
		int _la;
		try {
			State = 355;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 336; Match(7);
				State = 337; expression(0);
				State = 342;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 338; Match(3);
					State = 339; expression(0);
					}
					}
					State = 344;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 345; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 347; Match(7);
				State = 348; expression(0);
				State = 349; Match(18);
				State = 350; expression(0);
				State = 351; Match(1);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 353; Match(7);
				State = 354; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalConstantContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_intervalConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIntervalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIntervalConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalConstantContext intervalConstant() {
		IntervalConstantContext _localctx = new IntervalConstantContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_intervalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 357; _localctx.Start = Match(NUMBER);
			State = 358; Match(18);
			State = 359; _localctx.End = Match(NUMBER);
			{
			State = 360; Match(14);
			State = 361; _localctx.By = Match(NUMBER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 364;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 363; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 366;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,41,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368; _localctx.Name = Match(ATTRIBUTE_ID);
			State = 380;
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 369; Match(LEFT_PARENTHESIS);
				State = 370; constant();
				State = 375;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 371; Match(3);
					State = 372; constant();
					}
					}
					State = 377;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 378; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3-\x181\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x6\x3>\n\x3\r\x3\xE"+
		"\x3?\x3\x4\x3\x4\x5\x4\x44\n\x4\x3\x4\x3\x4\x5\x4H\n\x4\x3\x4\x3\x4\x5"+
		"\x4L\n\x4\x3\x4\x3\x4\x5\x4P\n\x4\x3\x4\x3\x4\x5\x4T\n\x4\x3\x4\x3\x4"+
		"\x5\x4X\n\x4\x3\x4\x5\x4[\n\x4\x3\x5\x5\x5^\n\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x5\x5\x64\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x5\x6o\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x95\n\x6\f\x6\xE\x6\x98\v\x6\x3\a\x3\a\x3"+
		"\a\x5\a\x9D\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b\xA5\n\b\x6\b\xA7\n"+
		"\b\r\b\xE\b\xA8\x3\t\x5\t\xAC\n\t\x3\t\x3\t\x5\t\xB0\n\t\x3\t\x3\t\x5"+
		"\t\xB4\n\t\x3\t\x3\t\x5\t\xB8\n\t\x3\t\x3\t\x5\t\xBC\n\t\x3\t\x3\t\x3"+
		"\t\x3\t\x5\t\xC2\n\t\x3\n\x3\n\x5\n\xC6\n\n\x3\n\x3\n\x5\n\xCA\n\n\x3"+
		"\n\x3\n\x3\n\x5\n\xCF\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\xD7\n\n\x3"+
		"\n\x3\n\x5\n\xDB\n\n\x3\n\x3\n\x3\n\x5\n\xE0\n\n\x3\n\x3\n\x5\n\xE4\n"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xF9\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x109\n\xE\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x5\xE\x110\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3"+
		"\xF\a\xF\x118\n\xF\f\xF\xE\xF\x11B\v\xF\x3\xF\x3\xF\x5\xF\x11F\n\xF\x3"+
		"\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\a\x11\x12D\n\x11\f\x11\xE\x11\x130\v\x11\x3\x12\x5\x12\x133\n"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\a\x13\x13C\n\x13"+
		"\f\x13\xE\x13\x13F\v\x13\x3\x14\x5\x14\x142\n\x14\x3\x14\x3\x14\x3\x15"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x5\x15\x14B\n\x15\x3\x16\x3\x16\x3\x17\x3"+
		"\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\a\x19\x157\n\x19\f\x19"+
		"\xE\x19\x15A\v\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x19\x5\x19\x166\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1B\x6\x1B\x16F\n\x1B\r\x1B\xE\x1B\x170\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\a\x1C\x178\n\x1C\f\x1C\xE\x1C\x17B\v\x1C\x3\x1C\x3\x1C"+
		"\x5\x1C\x17F\n\x1C\x3\x1C\x2\x2\x3\n\x1D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f"+
		"\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x2\x2\x1A9\x2"+
		"\x38\x3\x2\x2\x2\x4=\x3\x2\x2\x2\x6Z\x3\x2\x2\x2\b]\x3\x2\x2\x2\nn\x3"+
		"\x2\x2\x2\f\x99\x3\x2\x2\x2\xE\xA0\x3\x2\x2\x2\x10\xC1\x3\x2\x2\x2\x12"+
		"\xE3\x3\x2\x2\x2\x14\xF8\x3\x2\x2\x2\x16\xFA\x3\x2\x2\x2\x18\x100\x3\x2"+
		"\x2\x2\x1A\x104\x3\x2\x2\x2\x1C\x111\x3\x2\x2\x2\x1E\x122\x3\x2\x2\x2"+
		" \x129\x3\x2\x2\x2\"\x132\x3\x2\x2\x2$\x138\x3\x2\x2\x2&\x141\x3\x2\x2"+
		"\x2(\x14A\x3\x2\x2\x2*\x14C\x3\x2\x2\x2,\x14E\x3\x2\x2\x2.\x150\x3\x2"+
		"\x2\x2\x30\x165\x3\x2\x2\x2\x32\x167\x3\x2\x2\x2\x34\x16E\x3\x2\x2\x2"+
		"\x36\x172\x3\x2\x2\x2\x38\x39\x5\x4\x3\x2\x39\x3\x3\x2\x2\x2:;\x5\x6\x4"+
		"\x2;<\a\r\x2\x2<>\x3\x2\x2\x2=:\x3\x2\x2\x2>?\x3\x2\x2\x2?=\x3\x2\x2\x2"+
		"?@\x3\x2\x2\x2@\x5\x3\x2\x2\x2\x41[\x5\n\x6\x2\x42\x44\x5\x34\x1B\x2\x43"+
		"\x42\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45[\x5\b\x5"+
		"\x2\x46H\x5\x34\x1B\x2G\x46\x3\x2\x2\x2GH\x3\x2\x2\x2HI\x3\x2\x2\x2I["+
		"\x5\x1C\xF\x2JL\x5\x34\x1B\x2KJ\x3\x2\x2\x2KL\x3\x2\x2\x2LM\x3\x2\x2\x2"+
		"M[\x5\x18\r\x2NP\x5\x34\x1B\x2ON\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\x3\x2\x2"+
		"\x2Q[\x5\x14\v\x2RT\x5\x34\x1B\x2SR\x3\x2\x2\x2ST\x3\x2\x2\x2TU\x3\x2"+
		"\x2\x2U[\x5\x16\f\x2VX\x5\x34\x1B\x2WV\x3\x2\x2\x2WX\x3\x2\x2\x2XY\x3"+
		"\x2\x2\x2Y[\a\x1D\x2\x2Z\x41\x3\x2\x2\x2Z\x43\x3\x2\x2\x2ZG\x3\x2\x2\x2"+
		"ZK\x3\x2\x2\x2ZO\x3\x2\x2\x2ZS\x3\x2\x2\x2ZW\x3\x2\x2\x2[\a\x3\x2\x2\x2"+
		"\\^\x5\x34\x1B\x2]\\\x3\x2\x2\x2]^\x3\x2\x2\x2^_\x3\x2\x2\x2_`\a\x1E\x2"+
		"\x2`\x63\a&\x2\x2\x61\x62\a\n\x2\x2\x62\x64\x5&\x14\x2\x63\x61\x3\x2\x2"+
		"\x2\x63\x64\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\a \x2\x2\x66g\x5\n"+
		"\x6\x2g\t\x3\x2\x2\x2hi\b\x6\x1\x2ij\a#\x2\x2jo\x5\n\x6\xFko\x5\x10\t"+
		"\x2lo\x5\f\a\x2mo\x5\xE\b\x2nh\x3\x2\x2\x2nk\x3\x2\x2\x2nl\x3\x2\x2\x2"+
		"nm\x3\x2\x2\x2o\x96\x3\x2\x2\x2pq\f\xE\x2\x2qr\a\x6\x2\x2r\x95\x5\n\x6"+
		"\xFst\f\r\x2\x2tu\a\b\x2\x2u\x95\x5\n\x6\xEvw\f\f\x2\x2wx\a\a\x2\x2x\x95"+
		"\x5\n\x6\ryz\f\v\x2\x2z{\a\x12\x2\x2{\x95\x5\n\x6\f|}\f\n\x2\x2}~\a\v"+
		"\x2\x2~\x95\x5\n\x6\v\x7F\x80\f\t\x2\x2\x80\x81\a\xF\x2\x2\x81\x95\x5"+
		"\n\x6\n\x82\x83\f\b\x2\x2\x83\x84\a\xE\x2\x2\x84\x95\x5\n\x6\t\x85\x86"+
		"\f\a\x2\x2\x86\x87\a\x13\x2\x2\x87\x95\x5\n\x6\b\x88\x89\f\x6\x2\x2\x89"+
		"\x8A\a\x11\x2\x2\x8A\x95\x5\n\x6\a\x8B\x8C\f\x5\x2\x2\x8C\x8D\a\f\x2\x2"+
		"\x8D\x95\x5\n\x6\x6\x8E\x8F\f\x4\x2\x2\x8F\x90\a!\x2\x2\x90\x95\x5\n\x6"+
		"\x5\x91\x92\f\x3\x2\x2\x92\x93\a\"\x2\x2\x93\x95\x5\n\x6\x4\x94p\x3\x2"+
		"\x2\x2\x94s\x3\x2\x2\x2\x94v\x3\x2\x2\x2\x94y\x3\x2\x2\x2\x94|\x3\x2\x2"+
		"\x2\x94\x7F\x3\x2\x2\x2\x94\x82\x3\x2\x2\x2\x94\x85\x3\x2\x2\x2\x94\x88"+
		"\x3\x2\x2\x2\x94\x8B\x3\x2\x2\x2\x94\x8E\x3\x2\x2\x2\x94\x91\x3\x2\x2"+
		"\x2\x95\x98\x3\x2\x2\x2\x96\x94\x3\x2\x2\x2\x96\x97\x3\x2\x2\x2\x97\v"+
		"\x3\x2\x2\x2\x98\x96\x3\x2\x2\x2\x99\x9A\x5\x10\t\x2\x9A\x9C\a$\x2\x2"+
		"\x9B\x9D\x5\n\x6\x2\x9C\x9B\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x3"+
		"\x2\x2\x2\x9E\x9F\a%\x2\x2\x9F\r\x3\x2\x2\x2\xA0\xA6\x5\x10\t\x2\xA1\xA4"+
		"\a\x4\x2\x2\xA2\xA5\a&\x2\x2\xA3\xA5\x5\f\a\x2\xA4\xA2\x3\x2\x2\x2\xA4"+
		"\xA3\x3\x2\x2\x2\xA5\xA7\x3\x2\x2\x2\xA6\xA1\x3\x2\x2\x2\xA7\xA8\x3\x2"+
		"\x2\x2\xA8\xA6\x3\x2\x2\x2\xA8\xA9\x3\x2\x2\x2\xA9\xF\x3\x2\x2\x2\xAA"+
		"\xAC\x5\x34\x1B\x2\xAB\xAA\x3\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x3"+
		"\x2\x2\x2\xAD\xC2\x5(\x15\x2\xAE\xB0\x5\x34\x1B\x2\xAF\xAE\x3\x2\x2\x2"+
		"\xAF\xB0\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xC2\a&\x2\x2\xB2\xB4\x5\x34"+
		"\x1B\x2\xB3\xB2\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2\xB5"+
		"\xC2\x5\x12\n\x2\xB6\xB8\x5\x34\x1B\x2\xB7\xB6\x3\x2\x2\x2\xB7\xB8\x3"+
		"\x2\x2\x2\xB8\xB9\x3\x2\x2\x2\xB9\xC2\x5\x1A\xE\x2\xBA\xBC\x5\x34\x1B"+
		"\x2\xBB\xBA\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBE"+
		"\a$\x2\x2\xBE\xBF\x5\n\x6\x2\xBF\xC0\a%\x2\x2\xC0\xC2\x3\x2\x2\x2\xC1"+
		"\xAB\x3\x2\x2\x2\xC1\xAF\x3\x2\x2\x2\xC1\xB3\x3\x2\x2\x2\xC1\xB7\x3\x2"+
		"\x2\x2\xC1\xBB\x3\x2\x2\x2\xC2\x11\x3\x2\x2\x2\xC3\xC5\a\x15\x2\x2\xC4"+
		"\xC6\a&\x2\x2\xC5\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\x3\x2\x2"+
		"\x2\xC7\xC9\a$\x2\x2\xC8\xCA\x5 \x11\x2\xC9\xC8\x3\x2\x2\x2\xC9\xCA\x3"+
		"\x2\x2\x2\xCA\xCB\x3\x2\x2\x2\xCB\xCE\a%\x2\x2\xCC\xCD\a\n\x2\x2\xCD\xCF"+
		"\x5&\x14\x2\xCE\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2"+
		"\xD0\xD1\a\x1A\x2\x2\xD1\xD2\x5\x4\x3\x2\xD2\xD3\a\x1B\x2\x2\xD3\xE4\x3"+
		"\x2\x2\x2\xD4\xD6\a\x15\x2\x2\xD5\xD7\a&\x2\x2\xD6\xD5\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\a$\x2\x2\xD9\xDB\x5 \x11"+
		"\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDF"+
		"\a%\x2\x2\xDD\xDE\a\n\x2\x2\xDE\xE0\x5&\x14\x2\xDF\xDD\x3\x2\x2\x2\xDF"+
		"\xE0\x3\x2\x2\x2\xE0\xE1\x3\x2\x2\x2\xE1\xE2\a \x2\x2\xE2\xE4\x5\n\x6"+
		"\x2\xE3\xC3\x3\x2\x2\x2\xE3\xD4\x3\x2\x2\x2\xE4\x13\x3\x2\x2\x2\xE5\xE6"+
		"\a\x16\x2\x2\xE6\xE7\a$\x2\x2\xE7\xE8\a&\x2\x2\xE8\xE9\a\x1F\x2\x2\xE9"+
		"\xEA\x5\n\x6\x2\xEA\xEB\a%\x2\x2\xEB\xEC\x5\x6\x4\x2\xEC\xF9\x3\x2\x2"+
		"\x2\xED\xEE\a\x16\x2\x2\xEE\xEF\a$\x2\x2\xEF\xF0\a\x1E\x2\x2\xF0\xF1\a"+
		"&\x2\x2\xF1\xF2\a\n\x2\x2\xF2\xF3\x5&\x14\x2\xF3\xF4\a\x1F\x2\x2\xF4\xF5"+
		"\x5\n\x6\x2\xF5\xF6\a%\x2\x2\xF6\xF7\x5\x6\x4\x2\xF7\xF9\x3\x2\x2\x2\xF8"+
		"\xE5\x3\x2\x2\x2\xF8\xED\x3\x2\x2\x2\xF9\x15\x3\x2\x2\x2\xFA\xFB\a\x17"+
		"\x2\x2\xFB\xFC\a$\x2\x2\xFC\xFD\x5\n\x6\x2\xFD\xFE\a%\x2\x2\xFE\xFF\x5"+
		"\x6\x4\x2\xFF\x17\x3\x2\x2\x2\x100\x101\a\x1A\x2\x2\x101\x102\x5\x4\x3"+
		"\x2\x102\x103\a\x1B\x2\x2\x103\x19\x3\x2\x2\x2\x104\x105\a&\x2\x2\x105"+
		"\x106\a \x2\x2\x106\x10F\x5\n\x6\x2\x107\x109\x5\x34\x1B\x2\x108\x107"+
		"\x3\x2\x2\x2\x108\x109\x3\x2\x2\x2\x109\x10A\x3\x2\x2\x2\x10A\x10B\a\x18"+
		"\x2\x2\x10B\x10C\a$\x2\x2\x10C\x10D\x5\n\x6\x2\x10D\x10E\a%\x2\x2\x10E"+
		"\x110\x3\x2\x2\x2\x10F\x108\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x1B"+
		"\x3\x2\x2\x2\x111\x112\a\x18\x2\x2\x112\x113\a$\x2\x2\x113\x114\x5\n\x6"+
		"\x2\x114\x115\a%\x2\x2\x115\x119\x5\x4\x3\x2\x116\x118\x5\x1E\x10\x2\x117"+
		"\x116\x3\x2\x2\x2\x118\x11B\x3\x2\x2\x2\x119\x117\x3\x2\x2\x2\x119\x11A"+
		"\x3\x2\x2\x2\x11A\x11E\x3\x2\x2\x2\x11B\x119\x3\x2\x2\x2\x11C\x11D\a\x19"+
		"\x2\x2\x11D\x11F\x5\x4\x3\x2\x11E\x11C\x3\x2\x2\x2\x11E\x11F\x3\x2\x2"+
		"\x2\x11F\x120\x3\x2\x2\x2\x120\x121\a\x1B\x2\x2\x121\x1D\x3\x2\x2\x2\x122"+
		"\x123\a\x19\x2\x2\x123\x124\a\x18\x2\x2\x124\x125\a$\x2\x2\x125\x126\x5"+
		"\n\x6\x2\x126\x127\a%\x2\x2\x127\x128\x5\x4\x3\x2\x128\x1F\x3\x2\x2\x2"+
		"\x129\x12E\x5\"\x12\x2\x12A\x12B\a\x5\x2\x2\x12B\x12D\x5\"\x12\x2\x12C"+
		"\x12A\x3\x2\x2\x2\x12D\x130\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12E\x12F"+
		"\x3\x2\x2\x2\x12F!\x3\x2\x2\x2\x130\x12E\x3\x2\x2\x2\x131\x133\x5\x34"+
		"\x1B\x2\x132\x131\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x134\x3\x2\x2"+
		"\x2\x134\x135\a&\x2\x2\x135\x136\a\n\x2\x2\x136\x137\x5&\x14\x2\x137#"+
		"\x3\x2\x2\x2\x138\x13D\x5\n\x6\x2\x139\x13A\a\x5\x2\x2\x13A\x13C\x5\n"+
		"\x6\x2\x13B\x139\x3\x2\x2\x2\x13C\x13F\x3\x2\x2\x2\x13D\x13B\x3\x2\x2"+
		"\x2\x13D\x13E\x3\x2\x2\x2\x13E%\x3\x2\x2\x2\x13F\x13D\x3\x2\x2\x2\x140"+
		"\x142\x5\x34\x1B\x2\x141\x140\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\x143"+
		"\x3\x2\x2\x2\x143\x144\a&\x2\x2\x144\'\x3\x2\x2\x2\x145\x14B\x5*\x16\x2"+
		"\x146\x14B\x5,\x17\x2\x147\x14B\x5.\x18\x2\x148\x14B\x5\x30\x19\x2\x149"+
		"\x14B\x5\x32\x1A\x2\x14A\x145\x3\x2\x2\x2\x14A\x146\x3\x2\x2\x2\x14A\x147"+
		"\x3\x2\x2\x2\x14A\x148\x3\x2\x2\x2\x14A\x149\x3\x2\x2\x2\x14B)\x3\x2\x2"+
		"\x2\x14C\x14D\a+\x2\x2\x14D+\x3\x2\x2\x2\x14E\x14F\a*\x2\x2\x14F-\x3\x2"+
		"\x2\x2\x150\x151\a\x1C\x2\x2\x151/\x3\x2\x2\x2\x152\x153\a\t\x2\x2\x153"+
		"\x158\x5\n\x6\x2\x154\x155\a\x5\x2\x2\x155\x157\x5\n\x6\x2\x156\x154\x3"+
		"\x2\x2\x2\x157\x15A\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2\x158\x159\x3\x2"+
		"\x2\x2\x159\x15B\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15B\x15C\a\x3\x2\x2"+
		"\x15C\x166\x3\x2\x2\x2\x15D\x15E\a\t\x2\x2\x15E\x15F\x5\n\x6\x2\x15F\x160"+
		"\a\x14\x2\x2\x160\x161\x5\n\x6\x2\x161\x162\a\x3\x2\x2\x162\x166\x3\x2"+
		"\x2\x2\x163\x164\a\t\x2\x2\x164\x166\a\x3\x2\x2\x165\x152\x3\x2\x2\x2"+
		"\x165\x15D\x3\x2\x2\x2\x165\x163\x3\x2\x2\x2\x166\x31\x3\x2\x2\x2\x167"+
		"\x168\a+\x2\x2\x168\x169\a\x14\x2\x2\x169\x16A\a+\x2\x2\x16A\x16B\a\x10"+
		"\x2\x2\x16B\x16C\a+\x2\x2\x16C\x33\x3\x2\x2\x2\x16D\x16F\x5\x36\x1C\x2"+
		"\x16E\x16D\x3\x2\x2\x2\x16F\x170\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x170"+
		"\x171\x3\x2\x2\x2\x171\x35\x3\x2\x2\x2\x172\x17E\a)\x2\x2\x173\x174\a"+
		"$\x2\x2\x174\x179\x5(\x15\x2\x175\x176\a\x5\x2\x2\x176\x178\x5(\x15\x2"+
		"\x177\x175\x3\x2\x2\x2\x178\x17B\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x179"+
		"\x17A\x3\x2\x2\x2\x17A\x17C\x3\x2\x2\x2\x17B\x179\x3\x2\x2\x2\x17C\x17D"+
		"\a%\x2\x2\x17D\x17F\x3\x2\x2\x2\x17E\x173\x3\x2\x2\x2\x17E\x17F\x3\x2"+
		"\x2\x2\x17F\x37\x3\x2\x2\x2.?\x43GKOSWZ]\x63n\x94\x96\x9C\xA4\xA8\xAB"+
		"\xAF\xB3\xB7\xBB\xC1\xC5\xC9\xCE\xD6\xDA\xDF\xE3\xF8\x108\x10F\x119\x11E"+
		"\x12E\x132\x13D\x141\x14A\x158\x165\x170\x179\x17E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
