//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__17=1, T__16=2, T__15=3, T__14=4, T__13=5, T__12=6, T__11=7, T__10=8, 
		T__9=9, T__8=10, T__7=11, T__6=12, T__5=13, T__4=14, T__3=15, T__2=16, 
		T__1=17, T__0=18, FUNCTION=19, FOREACH=20, WHILE=21, IF=22, ELSE=23, DO=24, 
		END=25, BOOLEAN=26, SKIP=27, VAR=28, IN=29, ASSIGN=30, AND=31, OR=32, 
		NOT=33, NULL=34, LEFT_PARENTHESIS=35, RIGHT_PARENTHESIS=36, ID=37, COMMENT=38, 
		MULTILINE_COMMENT=39, ATTRIBUTE_ID=40, STRING=41, NUMBER=42, WHITESPACE=43, 
		NEWLINE=44;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "'.'", "','", "'+'", "'*'", "'-'", "'['", "':'", "'<'", 
		"'!='", "';'", "'<='", "'to'", "'>'", "'by'", "'=='", "'/'", "'>='", "'function'", 
		"'foreach'", "'while'", "'if'", "'else'", "'do'", "'end'", "BOOLEAN", 
		"'skip'", "'var'", "'in'", "'='", "'and'", "'or'", "'not'", "'null'", 
		"'('", "')'", "ID", "COMMENT", "MULTILINE_COMMENT", "ATTRIBUTE_ID", "STRING", 
		"NUMBER", "WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_expression = 4, RULE_functionCallExpression = 5, RULE_memberExpression = 6, 
		RULE_primaryExpression = 7, RULE_functionExpression = 8, RULE_foreachStatement = 9, 
		RULE_whileStatement = 10, RULE_blockStatement = 11, RULE_skipStatement = 12, 
		RULE_assignmentExpression = 13, RULE_ifStatement = 14, RULE_elseIfStatement = 15, 
		RULE_formalParameterList = 16, RULE_formalParameter = 17, RULE_actualParameterList = 18, 
		RULE_typeName = 19, RULE_constant = 20, RULE_numberConstant = 21, RULE_stringConstant = 22, 
		RULE_booleanConstant = 23, RULE_arrayConstant = 24, RULE_intervalConstant = 25, 
		RULE_attributes = 26, RULE_attribute = 27;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "expression", 
		"functionCallExpression", "memberExpression", "primaryExpression", "functionExpression", 
		"foreachStatement", "whileStatement", "blockStatement", "skipStatement", 
		"assignmentExpression", "ifStatement", "elseIfStatement", "formalParameterList", 
		"formalParameter", "actualParameterList", "typeName", "constant", "numberConstant", 
		"stringConstant", "booleanConstant", "arrayConstant", "intervalConstant", 
		"attributes", "attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 58; statement();
				State = 59; Match(11);
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << FUNCTION) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << DO) | (1L << BOOLEAN) | (1L << SKIP) | (1L << VAR) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public AttributesContext Attributes;
		public VariableDeclarationContext VariableDeclaration;
		public IfStatementContext If;
		public BlockStatementContext Block;
		public ForeachStatementContext Foreach;
		public WhileStatementContext While;
		public SkipStatementContext Skip;
		public BlockStatementContext blockStatement() {
			return GetRuleContext<BlockStatementContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public SkipStatementContext skipStatement() {
			return GetRuleContext<SkipStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForeachStatementContext foreachStatement() {
			return GetRuleContext<ForeachStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		int _la;
		try {
			State = 90;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; _localctx.Expression = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
				case 1:
					{
					State = 66; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 69; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 70; _localctx.Attributes = attributes();
					}
				}

				State = 73; _localctx.If = ifStatement();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 75;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 74; _localctx.Attributes = attributes();
					}
				}

				State = 77; _localctx.Block = blockStatement();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 79;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 78; _localctx.Attributes = attributes();
					}
				}

				State = 81; _localctx.Foreach = foreachStatement();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 83;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 82; _localctx.Attributes = attributes();
					}
				}

				State = 85; _localctx.While = whileStatement();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 87;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 86; _localctx.Attributes = attributes();
					}
				}

				State = 89; _localctx.Skip = skipStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 92; _localctx.Attributes = attributes();
				}
			}

			State = 95; Match(VAR);
			State = 96; _localctx.VariableName = Match(ID);
			State = 99;
			_la = _input.La(1);
			if (_la==8) {
				{
				State = 97; Match(8);
				State = 98; _localctx.VariableType = typeName();
				}
			}

			State = 101; Match(ASSIGN);
			State = 102; _localctx.VariableDefaultValue = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext Left;
		public IToken Operator;
		public ExpressionContext Expression;
		public ExpressionContext Right;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public ITerminalNode AND() { return GetToken(MetaCodeParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MetaCodeParser.OR, 0); }
		public MemberExpressionContext memberExpression() {
			return GetRuleContext<MemberExpressionContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(MetaCodeParser.NOT, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				State = 105; _localctx.Operator = Match(NOT);
				State = 106; _localctx.Expression = expression(13);
				}
				break;

			case 2:
				{
				State = 107; primaryExpression();
				}
				break;

			case 3:
				{
				State = 108; functionCallExpression();
				}
				break;

			case 4:
				{
				State = 109; memberExpression();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 150;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 148;
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 112;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 113; _localctx.Operator = Match(4);
						State = 114; _localctx.Right = expression(13);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 115;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 116; _localctx.Operator = Match(6);
						State = 117; _localctx.Right = expression(12);
						}
						break;

					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 118;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 119; _localctx.Operator = Match(5);
						State = 120; _localctx.Right = expression(11);
						}
						break;

					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 121;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 122; _localctx.Operator = Match(17);
						State = 123; _localctx.Right = expression(10);
						}
						break;

					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 125; _localctx.Operator = Match(9);
						State = 126; _localctx.Right = expression(9);
						}
						break;

					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 128; _localctx.Operator = Match(14);
						State = 129; _localctx.Right = expression(8);
						}
						break;

					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 131; _localctx.Operator = Match(12);
						State = 132; _localctx.Right = expression(7);
						}
						break;

					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 134; _localctx.Operator = Match(18);
						State = 135; _localctx.Right = expression(6);
						}
						break;

					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 137; _localctx.Operator = Match(16);
						State = 138; _localctx.Right = expression(5);
						}
						break;

					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 140; _localctx.Operator = Match(10);
						State = 141; _localctx.Right = expression(4);
						}
						break;

					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 142;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 143; _localctx.Operator = Match(AND);
						State = 144; _localctx.Right = expression(3);
						}
						break;

					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						_localctx.Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 146; _localctx.Operator = Match(OR);
						State = 147; _localctx.Right = expression(2);
						}
						break;
					}
					} 
				}
				State = 152;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionCallExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; primaryExpression();
			State = 154; Match(LEFT_PARENTHESIS);
			State = 156;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 7) | (1L << FUNCTION) | (1L << BOOLEAN) | (1L << NOT) | (1L << LEFT_PARENTHESIS) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 155; expression(0);
				}
			}

			State = 158; Match(RIGHT_PARENTHESIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberExpressionContext : ParserRuleContext {
		public FunctionCallExpressionContext functionCallExpression(int i) {
			return GetRuleContext<FunctionCallExpressionContext>(i);
		}
		public IReadOnlyList<FunctionCallExpressionContext> functionCallExpression() {
			return GetRuleContexts<FunctionCallExpressionContext>();
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public MemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_memberExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberExpressionContext memberExpression() {
		MemberExpressionContext _localctx = new MemberExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_memberExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; primaryExpression();
			State = 166;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 161; Match(2);
					State = 164;
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						State = 162; Match(ID);
						}
						break;

					case 2:
						{
						State = 163; functionCallExpression();
						}
						break;
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 168;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IToken Id;
		public FunctionExpressionContext Function;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_primaryExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_primaryExpression);
		int _la;
		try {
			State = 193;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 171;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 170; _localctx.Attributes = attributes();
					}
				}

				State = 173; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 174; _localctx.Attributes = attributes();
					}
				}

				State = 177; _localctx.Id = Match(ID);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 179;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 178; _localctx.Attributes = attributes();
					}
				}

				State = 181; _localctx.Function = functionExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 182; _localctx.Attributes = attributes();
					}
				}

				State = 185; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 187;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 186; _localctx.Attributes = attributes();
					}
				}

				State = 189; Match(LEFT_PARENTHESIS);
				State = 190; _localctx.InnerExpression = expression(0);
				State = 191; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		public IToken FunctionName;
		public FormalParameterListContext Parameters;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public ExpressionContext BodyExpression;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_functionExpression);
		int _la;
		try {
			State = 227;
			switch ( Interpreter.AdaptivePredict(_input,28,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195; Match(FUNCTION);
				State = 197;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 196; _localctx.FunctionName = Match(ID);
					}
				}

				State = 199; Match(LEFT_PARENTHESIS);
				State = 201;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 200; _localctx.Parameters = formalParameterList();
					}
				}

				State = 203; Match(RIGHT_PARENTHESIS);
				State = 206;
				_la = _input.La(1);
				if (_la==8) {
					{
					State = 204; Match(8);
					State = 205; _localctx.ReturnType = typeName();
					}
				}

				State = 208; Match(DO);
				State = 209; _localctx.BodyStatements = statements();
				State = 210; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 212; Match(FUNCTION);
				State = 214;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 213; _localctx.FunctionName = Match(ID);
					}
				}

				State = 216; Match(LEFT_PARENTHESIS);
				State = 218;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 217; _localctx.Parameters = formalParameterList();
					}
				}

				State = 220; Match(RIGHT_PARENTHESIS);
				State = 223;
				_la = _input.La(1);
				if (_la==8) {
					{
					State = 221; Match(8);
					State = 222; _localctx.ReturnType = typeName();
					}
				}

				State = 225; Match(ASSIGN);
				State = 226; _localctx.BodyExpression = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachStatementContext : ParserRuleContext {
		public IToken Id;
		public ExpressionContext ArrayExpression;
		public StatementContext Body;
		public IToken VarId;
		public TypeNameContext TypeName;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public ForeachStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachStatementContext foreachStatement() {
		ForeachStatementContext _localctx = new ForeachStatementContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_foreachStatement);
		try {
			State = 248;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 229; Match(FOREACH);
				State = 230; Match(LEFT_PARENTHESIS);
				State = 231; _localctx.Id = Match(ID);
				State = 232; Match(IN);
				State = 233; _localctx.ArrayExpression = expression(0);
				State = 234; Match(RIGHT_PARENTHESIS);
				State = 235; _localctx.Body = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237; Match(FOREACH);
				State = 238; Match(LEFT_PARENTHESIS);
				State = 239; Match(VAR);
				State = 240; _localctx.VarId = Match(ID);
				State = 241; Match(8);
				State = 242; _localctx.TypeName = typeName();
				State = 243; Match(IN);
				State = 244; _localctx.ArrayExpression = expression(0);
				State = 245; Match(RIGHT_PARENTHESIS);
				State = 246; _localctx.Body = statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public StatementContext Body;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(WHILE);
			State = 251; Match(LEFT_PARENTHESIS);
			State = 252; _localctx.ConditionExpression = expression(0);
			State = 253; Match(RIGHT_PARENTHESIS);
			State = 254; _localctx.Body = statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_blockStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(DO);
			State = 257; _localctx.Body = statements();
			State = 258; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SkipStatementContext : ParserRuleContext {
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public SkipStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_skipStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterSkipStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitSkipStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SkipStatementContext skipStatement() {
		SkipStatementContext _localctx = new SkipStatementContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_skipStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(SKIP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IToken Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; _localctx.Variable = Match(ID);
			State = 263; Match(ASSIGN);
			State = 264; _localctx.Value = expression(0);
			State = 273;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				{
				State = 266;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 265; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 268; Match(IF);
				State = 269; Match(LEFT_PARENTHESIS);
				State = 270; _localctx.ConditionalExpression = expression(0);
				State = 271; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext Condition;
		public StatementsContext Statements;
		public ElseIfStatementContext ElseIfExpressions;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public IReadOnlyList<ElseIfStatementContext> elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(IF);
			State = 276; Match(LEFT_PARENTHESIS);
			State = 277; _localctx.Condition = expression(0);
			State = 278; Match(RIGHT_PARENTHESIS);
			State = 279; _localctx.Statements = statements();
			State = 283;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 280; _localctx.ElseIfExpressions = elseIfStatement();
					}
					} 
				}
				State = 285;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,32,_ctx);
			}
			State = 288;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 286; Match(ELSE);
				State = 287; _localctx.ElseStatements = statements();
				}
			}

			State = 290; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfStatement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292; Match(ELSE);
			State = 293; Match(IF);
			State = 294; Match(LEFT_PARENTHESIS);
			State = 295; expression(0);
			State = 296; Match(RIGHT_PARENTHESIS);
			State = 297; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; formalParameter();
			State = 304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 300; Match(3);
				State = 301; formalParameter();
				}
				}
				State = 306;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 307; attributes();
				}
			}

			State = 310; Match(ID);
			State = 311; Match(8);
			State = 312; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actualParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 314; expression(0);
			State = 319;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 315; Match(3);
				State = 316; expression(0);
				}
				}
				State = 321;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 323;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 322; attributes();
				}
			}

			State = 325; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberConstantContext Number;
		public StringConstantContext String;
		public BooleanConstantContext Boolean;
		public ArrayConstantContext Array;
		public IntervalConstantContext Interval;
		public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		public ArrayConstantContext arrayConstant() {
			return GetRuleContext<ArrayConstantContext>(0);
		}
		public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		public IntervalConstantContext intervalConstant() {
			return GetRuleContext<IntervalConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_constant);
		try {
			State = 332;
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; _localctx.Number = numberConstant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; _localctx.String = stringConstant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329; _localctx.Boolean = booleanConstant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330; _localctx.Array = arrayConstant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 331; _localctx.Interval = intervalConstant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numberConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_numberConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_stringConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 336; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_booleanConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 338; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstantContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arrayConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArrayConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArrayConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstantContext arrayConstant() {
		ArrayConstantContext _localctx = new ArrayConstantContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_arrayConstant);
		int _la;
		try {
			State = 353;
			switch ( Interpreter.AdaptivePredict(_input,40,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 340; Match(7);
				State = 341; expression(0);
				State = 346;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 342; Match(3);
					State = 343; expression(0);
					}
					}
					State = 348;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 349; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351; Match(7);
				State = 352; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalConstantContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_intervalConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIntervalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIntervalConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalConstantContext intervalConstant() {
		IntervalConstantContext _localctx = new IntervalConstantContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_intervalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 355; _localctx.Start = Match(NUMBER);
			State = 356; Match(13);
			State = 357; _localctx.End = Match(NUMBER);
			State = 360;
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 358; Match(15);
				State = 359; _localctx.By = Match(NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 362; attribute();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 365;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,42,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; _localctx.Name = Match(ATTRIBUTE_ID);
			State = 379;
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 368; Match(LEFT_PARENTHESIS);
				State = 369; constant();
				State = 374;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 370; Match(3);
					State = 371; constant();
					}
					}
					State = 376;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 377; Match(RIGHT_PARENTHESIS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 12);

		case 1: return Precpred(_ctx, 11);

		case 2: return Precpred(_ctx, 10);

		case 3: return Precpred(_ctx, 9);

		case 4: return Precpred(_ctx, 8);

		case 5: return Precpred(_ctx, 7);

		case 6: return Precpred(_ctx, 6);

		case 7: return Precpred(_ctx, 5);

		case 8: return Precpred(_ctx, 4);

		case 9: return Precpred(_ctx, 3);

		case 10: return Precpred(_ctx, 2);

		case 11: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3.\x180\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x6\x3@"+
		"\n\x3\r\x3\xE\x3\x41\x3\x4\x3\x4\x5\x4\x46\n\x4\x3\x4\x3\x4\x5\x4J\n\x4"+
		"\x3\x4\x3\x4\x5\x4N\n\x4\x3\x4\x3\x4\x5\x4R\n\x4\x3\x4\x3\x4\x5\x4V\n"+
		"\x4\x3\x4\x3\x4\x5\x4Z\n\x4\x3\x4\x5\x4]\n\x4\x3\x5\x5\x5`\n\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5\x66\n\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x5\x6q\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x97\n\x6\f\x6\xE\x6\x9A\v"+
		"\x6\x3\a\x3\a\x3\a\x5\a\x9F\n\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x5\b\xA7"+
		"\n\b\x6\b\xA9\n\b\r\b\xE\b\xAA\x3\t\x5\t\xAE\n\t\x3\t\x3\t\x5\t\xB2\n"+
		"\t\x3\t\x3\t\x5\t\xB6\n\t\x3\t\x3\t\x5\t\xBA\n\t\x3\t\x3\t\x5\t\xBE\n"+
		"\t\x3\t\x3\t\x3\t\x3\t\x5\t\xC4\n\t\x3\n\x3\n\x5\n\xC8\n\n\x3\n\x3\n\x5"+
		"\n\xCC\n\n\x3\n\x3\n\x3\n\x5\n\xD1\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5"+
		"\n\xD9\n\n\x3\n\x3\n\x5\n\xDD\n\n\x3\n\x3\n\x3\n\x5\n\xE2\n\n\x3\n\x3"+
		"\n\x5\n\xE6\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xFB\n\v\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF\x5"+
		"\xF\x10D\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x114\n\xF\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10\x11C\n\x10\f\x10\xE\x10\x11F\v"+
		"\x10\x3\x10\x3\x10\x5\x10\x123\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\a\x12\x131\n\x12\f\x12"+
		"\xE\x12\x134\v\x12\x3\x13\x5\x13\x137\n\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x3\x14\x3\x14\x3\x14\a\x14\x140\n\x14\f\x14\xE\x14\x143\v\x14\x3\x15"+
		"\x5\x15\x146\n\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x5"+
		"\x16\x14F\n\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\a\x1A\x15B\n\x1A\f\x1A\xE\x1A\x15E\v\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x164\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5"+
		"\x1B\x16B\n\x1B\x3\x1C\x6\x1C\x16E\n\x1C\r\x1C\xE\x1C\x16F\x3\x1D\x3\x1D"+
		"\x3\x1D\x3\x1D\x3\x1D\a\x1D\x177\n\x1D\f\x1D\xE\x1D\x17A\v\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x17E\n\x1D\x3\x1D\x2\x2\x3\n\x1E\x2\x2\x4\x2\x6\x2\b\x2"+
		"\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E"+
		"\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2"+
		"\x2\x2\x1A7\x2:\x3\x2\x2\x2\x4?\x3\x2\x2\x2\x6\\\x3\x2\x2\x2\b_\x3\x2"+
		"\x2\x2\np\x3\x2\x2\x2\f\x9B\x3\x2\x2\x2\xE\xA2\x3\x2\x2\x2\x10\xC3\x3"+
		"\x2\x2\x2\x12\xE5\x3\x2\x2\x2\x14\xFA\x3\x2\x2\x2\x16\xFC\x3\x2\x2\x2"+
		"\x18\x102\x3\x2\x2\x2\x1A\x106\x3\x2\x2\x2\x1C\x108\x3\x2\x2\x2\x1E\x115"+
		"\x3\x2\x2\x2 \x126\x3\x2\x2\x2\"\x12D\x3\x2\x2\x2$\x136\x3\x2\x2\x2&\x13C"+
		"\x3\x2\x2\x2(\x145\x3\x2\x2\x2*\x14E\x3\x2\x2\x2,\x150\x3\x2\x2\x2.\x152"+
		"\x3\x2\x2\x2\x30\x154\x3\x2\x2\x2\x32\x163\x3\x2\x2\x2\x34\x165\x3\x2"+
		"\x2\x2\x36\x16D\x3\x2\x2\x2\x38\x171\x3\x2\x2\x2:;\x5\x4\x3\x2;\x3\x3"+
		"\x2\x2\x2<=\x5\x6\x4\x2=>\a\r\x2\x2>@\x3\x2\x2\x2?<\x3\x2\x2\x2@\x41\x3"+
		"\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x5\x3\x2\x2\x2\x43"+
		"]\x5\n\x6\x2\x44\x46\x5\x36\x1C\x2\x45\x44\x3\x2\x2\x2\x45\x46\x3\x2\x2"+
		"\x2\x46G\x3\x2\x2\x2G]\x5\b\x5\x2HJ\x5\x36\x1C\x2IH\x3\x2\x2\x2IJ\x3\x2"+
		"\x2\x2JK\x3\x2\x2\x2K]\x5\x1E\x10\x2LN\x5\x36\x1C\x2ML\x3\x2\x2\x2MN\x3"+
		"\x2\x2\x2NO\x3\x2\x2\x2O]\x5\x18\r\x2PR\x5\x36\x1C\x2QP\x3\x2\x2\x2QR"+
		"\x3\x2\x2\x2RS\x3\x2\x2\x2S]\x5\x14\v\x2TV\x5\x36\x1C\x2UT\x3\x2\x2\x2"+
		"UV\x3\x2\x2\x2VW\x3\x2\x2\x2W]\x5\x16\f\x2XZ\x5\x36\x1C\x2YX\x3\x2\x2"+
		"\x2YZ\x3\x2\x2\x2Z[\x3\x2\x2\x2[]\x5\x1A\xE\x2\\\x43\x3\x2\x2\x2\\\x45"+
		"\x3\x2\x2\x2\\I\x3\x2\x2\x2\\M\x3\x2\x2\x2\\Q\x3\x2\x2\x2\\U\x3\x2\x2"+
		"\x2\\Y\x3\x2\x2\x2]\a\x3\x2\x2\x2^`\x5\x36\x1C\x2_^\x3\x2\x2\x2_`\x3\x2"+
		"\x2\x2`\x61\x3\x2\x2\x2\x61\x62\a\x1E\x2\x2\x62\x65\a\'\x2\x2\x63\x64"+
		"\a\n\x2\x2\x64\x66\x5(\x15\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2"+
		"\x66g\x3\x2\x2\x2gh\a \x2\x2hi\x5\n\x6\x2i\t\x3\x2\x2\x2jk\b\x6\x1\x2"+
		"kl\a#\x2\x2lq\x5\n\x6\xFmq\x5\x10\t\x2nq\x5\f\a\x2oq\x5\xE\b\x2pj\x3\x2"+
		"\x2\x2pm\x3\x2\x2\x2pn\x3\x2\x2\x2po\x3\x2\x2\x2q\x98\x3\x2\x2\x2rs\f"+
		"\xE\x2\x2st\a\x6\x2\x2t\x97\x5\n\x6\xFuv\f\r\x2\x2vw\a\b\x2\x2w\x97\x5"+
		"\n\x6\xExy\f\f\x2\x2yz\a\a\x2\x2z\x97\x5\n\x6\r{|\f\v\x2\x2|}\a\x13\x2"+
		"\x2}\x97\x5\n\x6\f~\x7F\f\n\x2\x2\x7F\x80\a\v\x2\x2\x80\x97\x5\n\x6\v"+
		"\x81\x82\f\t\x2\x2\x82\x83\a\x10\x2\x2\x83\x97\x5\n\x6\n\x84\x85\f\b\x2"+
		"\x2\x85\x86\a\xE\x2\x2\x86\x97\x5\n\x6\t\x87\x88\f\a\x2\x2\x88\x89\a\x14"+
		"\x2\x2\x89\x97\x5\n\x6\b\x8A\x8B\f\x6\x2\x2\x8B\x8C\a\x12\x2\x2\x8C\x97"+
		"\x5\n\x6\a\x8D\x8E\f\x5\x2\x2\x8E\x8F\a\f\x2\x2\x8F\x97\x5\n\x6\x6\x90"+
		"\x91\f\x4\x2\x2\x91\x92\a!\x2\x2\x92\x97\x5\n\x6\x5\x93\x94\f\x3\x2\x2"+
		"\x94\x95\a\"\x2\x2\x95\x97\x5\n\x6\x4\x96r\x3\x2\x2\x2\x96u\x3\x2\x2\x2"+
		"\x96x\x3\x2\x2\x2\x96{\x3\x2\x2\x2\x96~\x3\x2\x2\x2\x96\x81\x3\x2\x2\x2"+
		"\x96\x84\x3\x2\x2\x2\x96\x87\x3\x2\x2\x2\x96\x8A\x3\x2\x2\x2\x96\x8D\x3"+
		"\x2\x2\x2\x96\x90\x3\x2\x2\x2\x96\x93\x3\x2\x2\x2\x97\x9A\x3\x2\x2\x2"+
		"\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\v\x3\x2\x2\x2\x9A\x98\x3"+
		"\x2\x2\x2\x9B\x9C\x5\x10\t\x2\x9C\x9E\a%\x2\x2\x9D\x9F\x5\n\x6\x2\x9E"+
		"\x9D\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA0\x3\x2\x2\x2\xA0\xA1\a&\x2"+
		"\x2\xA1\r\x3\x2\x2\x2\xA2\xA8\x5\x10\t\x2\xA3\xA6\a\x4\x2\x2\xA4\xA7\a"+
		"\'\x2\x2\xA5\xA7\x5\f\a\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA5\x3\x2\x2\x2\xA7"+
		"\xA9\x3\x2\x2\x2\xA8\xA3\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xA8\x3\x2"+
		"\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xF\x3\x2\x2\x2\xAC\xAE\x5\x36\x1C\x2\xAD"+
		"\xAC\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xC4\x5*\x16"+
		"\x2\xB0\xB2\x5\x36\x1C\x2\xB1\xB0\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2"+
		"\xB3\x3\x2\x2\x2\xB3\xC4\a\'\x2\x2\xB4\xB6\x5\x36\x1C\x2\xB5\xB4\x3\x2"+
		"\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xC4\x5\x12\n\x2\xB8"+
		"\xBA\x5\x36\x1C\x2\xB9\xB8\x3\x2\x2\x2\xB9\xBA\x3\x2\x2\x2\xBA\xBB\x3"+
		"\x2\x2\x2\xBB\xC4\x5\x1C\xF\x2\xBC\xBE\x5\x36\x1C\x2\xBD\xBC\x3\x2\x2"+
		"\x2\xBD\xBE\x3\x2\x2\x2\xBE\xBF\x3\x2\x2\x2\xBF\xC0\a%\x2\x2\xC0\xC1\x5"+
		"\n\x6\x2\xC1\xC2\a&\x2\x2\xC2\xC4\x3\x2\x2\x2\xC3\xAD\x3\x2\x2\x2\xC3"+
		"\xB1\x3\x2\x2\x2\xC3\xB5\x3\x2\x2\x2\xC3\xB9\x3\x2\x2\x2\xC3\xBD\x3\x2"+
		"\x2\x2\xC4\x11\x3\x2\x2\x2\xC5\xC7\a\x15\x2\x2\xC6\xC8\a\'\x2\x2\xC7\xC6"+
		"\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\xCB\a%\x2\x2"+
		"\xCA\xCC\x5\"\x12\x2\xCB\xCA\x3\x2\x2\x2\xCB\xCC\x3\x2\x2\x2\xCC\xCD\x3"+
		"\x2\x2\x2\xCD\xD0\a&\x2\x2\xCE\xCF\a\n\x2\x2\xCF\xD1\x5(\x15\x2\xD0\xCE"+
		"\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\x3\x2\x2\x2\xD2\xD3\a\x1A\x2"+
		"\x2\xD3\xD4\x5\x4\x3\x2\xD4\xD5\a\x1B\x2\x2\xD5\xE6\x3\x2\x2\x2\xD6\xD8"+
		"\a\x15\x2\x2\xD7\xD9\a\'\x2\x2\xD8\xD7\x3\x2\x2\x2\xD8\xD9\x3\x2\x2\x2"+
		"\xD9\xDA\x3\x2\x2\x2\xDA\xDC\a%\x2\x2\xDB\xDD\x5\"\x12\x2\xDC\xDB\x3\x2"+
		"\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE\xE1\a&\x2\x2\xDF\xE0"+
		"\a\n\x2\x2\xE0\xE2\x5(\x15\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2"+
		"\xE2\xE3\x3\x2\x2\x2\xE3\xE4\a \x2\x2\xE4\xE6\x5\n\x6\x2\xE5\xC5\x3\x2"+
		"\x2\x2\xE5\xD6\x3\x2\x2\x2\xE6\x13\x3\x2\x2\x2\xE7\xE8\a\x16\x2\x2\xE8"+
		"\xE9\a%\x2\x2\xE9\xEA\a\'\x2\x2\xEA\xEB\a\x1F\x2\x2\xEB\xEC\x5\n\x6\x2"+
		"\xEC\xED\a&\x2\x2\xED\xEE\x5\x6\x4\x2\xEE\xFB\x3\x2\x2\x2\xEF\xF0\a\x16"+
		"\x2\x2\xF0\xF1\a%\x2\x2\xF1\xF2\a\x1E\x2\x2\xF2\xF3\a\'\x2\x2\xF3\xF4"+
		"\a\n\x2\x2\xF4\xF5\x5(\x15\x2\xF5\xF6\a\x1F\x2\x2\xF6\xF7\x5\n\x6\x2\xF7"+
		"\xF8\a&\x2\x2\xF8\xF9\x5\x6\x4\x2\xF9\xFB\x3\x2\x2\x2\xFA\xE7\x3\x2\x2"+
		"\x2\xFA\xEF\x3\x2\x2\x2\xFB\x15\x3\x2\x2\x2\xFC\xFD\a\x17\x2\x2\xFD\xFE"+
		"\a%\x2\x2\xFE\xFF\x5\n\x6\x2\xFF\x100\a&\x2\x2\x100\x101\x5\x6\x4\x2\x101"+
		"\x17\x3\x2\x2\x2\x102\x103\a\x1A\x2\x2\x103\x104\x5\x4\x3\x2\x104\x105"+
		"\a\x1B\x2\x2\x105\x19\x3\x2\x2\x2\x106\x107\a\x1D\x2\x2\x107\x1B\x3\x2"+
		"\x2\x2\x108\x109\a\'\x2\x2\x109\x10A\a \x2\x2\x10A\x113\x5\n\x6\x2\x10B"+
		"\x10D\x5\x36\x1C\x2\x10C\x10B\x3\x2\x2\x2\x10C\x10D\x3\x2\x2\x2\x10D\x10E"+
		"\x3\x2\x2\x2\x10E\x10F\a\x18\x2\x2\x10F\x110\a%\x2\x2\x110\x111\x5\n\x6"+
		"\x2\x111\x112\a&\x2\x2\x112\x114\x3\x2\x2\x2\x113\x10C\x3\x2\x2\x2\x113"+
		"\x114\x3\x2\x2\x2\x114\x1D\x3\x2\x2\x2\x115\x116\a\x18\x2\x2\x116\x117"+
		"\a%\x2\x2\x117\x118\x5\n\x6\x2\x118\x119\a&\x2\x2\x119\x11D\x5\x4\x3\x2"+
		"\x11A\x11C\x5 \x11\x2\x11B\x11A\x3\x2\x2\x2\x11C\x11F\x3\x2\x2\x2\x11D"+
		"\x11B\x3\x2\x2\x2\x11D\x11E\x3\x2\x2\x2\x11E\x122\x3\x2\x2\x2\x11F\x11D"+
		"\x3\x2\x2\x2\x120\x121\a\x19\x2\x2\x121\x123\x5\x4\x3\x2\x122\x120\x3"+
		"\x2\x2\x2\x122\x123\x3\x2\x2\x2\x123\x124\x3\x2\x2\x2\x124\x125\a\x1B"+
		"\x2\x2\x125\x1F\x3\x2\x2\x2\x126\x127\a\x19\x2\x2\x127\x128\a\x18\x2\x2"+
		"\x128\x129\a%\x2\x2\x129\x12A\x5\n\x6\x2\x12A\x12B\a&\x2\x2\x12B\x12C"+
		"\x5\x4\x3\x2\x12C!\x3\x2\x2\x2\x12D\x132\x5$\x13\x2\x12E\x12F\a\x5\x2"+
		"\x2\x12F\x131\x5$\x13\x2\x130\x12E\x3\x2\x2\x2\x131\x134\x3\x2\x2\x2\x132"+
		"\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133#\x3\x2\x2\x2\x134\x132\x3"+
		"\x2\x2\x2\x135\x137\x5\x36\x1C\x2\x136\x135\x3\x2\x2\x2\x136\x137\x3\x2"+
		"\x2\x2\x137\x138\x3\x2\x2\x2\x138\x139\a\'\x2\x2\x139\x13A\a\n\x2\x2\x13A"+
		"\x13B\x5(\x15\x2\x13B%\x3\x2\x2\x2\x13C\x141\x5\n\x6\x2\x13D\x13E\a\x5"+
		"\x2\x2\x13E\x140\x5\n\x6\x2\x13F\x13D\x3\x2\x2\x2\x140\x143\x3\x2\x2\x2"+
		"\x141\x13F\x3\x2\x2\x2\x141\x142\x3\x2\x2\x2\x142\'\x3\x2\x2\x2\x143\x141"+
		"\x3\x2\x2\x2\x144\x146\x5\x36\x1C\x2\x145\x144\x3\x2\x2\x2\x145\x146\x3"+
		"\x2\x2\x2\x146\x147\x3\x2\x2\x2\x147\x148\a\'\x2\x2\x148)\x3\x2\x2\x2"+
		"\x149\x14F\x5,\x17\x2\x14A\x14F\x5.\x18\x2\x14B\x14F\x5\x30\x19\x2\x14C"+
		"\x14F\x5\x32\x1A\x2\x14D\x14F\x5\x34\x1B\x2\x14E\x149\x3\x2\x2\x2\x14E"+
		"\x14A\x3\x2\x2\x2\x14E\x14B\x3\x2\x2\x2\x14E\x14C\x3\x2\x2\x2\x14E\x14D"+
		"\x3\x2\x2\x2\x14F+\x3\x2\x2\x2\x150\x151\a,\x2\x2\x151-\x3\x2\x2\x2\x152"+
		"\x153\a+\x2\x2\x153/\x3\x2\x2\x2\x154\x155\a\x1C\x2\x2\x155\x31\x3\x2"+
		"\x2\x2\x156\x157\a\t\x2\x2\x157\x15C\x5\n\x6\x2\x158\x159\a\x5\x2\x2\x159"+
		"\x15B\x5\n\x6\x2\x15A\x158\x3\x2\x2\x2\x15B\x15E\x3\x2\x2\x2\x15C\x15A"+
		"\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15F\x3\x2\x2\x2\x15E\x15C\x3"+
		"\x2\x2\x2\x15F\x160\a\x3\x2\x2\x160\x164\x3\x2\x2\x2\x161\x162\a\t\x2"+
		"\x2\x162\x164\a\x3\x2\x2\x163\x156\x3\x2\x2\x2\x163\x161\x3\x2\x2\x2\x164"+
		"\x33\x3\x2\x2\x2\x165\x166\a,\x2\x2\x166\x167\a\xF\x2\x2\x167\x16A\a,"+
		"\x2\x2\x168\x169\a\x11\x2\x2\x169\x16B\a,\x2\x2\x16A\x168\x3\x2\x2\x2"+
		"\x16A\x16B\x3\x2\x2\x2\x16B\x35\x3\x2\x2\x2\x16C\x16E\x5\x38\x1D\x2\x16D"+
		"\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2\x16F\x16D\x3\x2\x2\x2\x16F\x170"+
		"\x3\x2\x2\x2\x170\x37\x3\x2\x2\x2\x171\x17D\a*\x2\x2\x172\x173\a%\x2\x2"+
		"\x173\x178\x5*\x16\x2\x174\x175\a\x5\x2\x2\x175\x177\x5*\x16\x2\x176\x174"+
		"\x3\x2\x2\x2\x177\x17A\x3\x2\x2\x2\x178\x176\x3\x2\x2\x2\x178\x179\x3"+
		"\x2\x2\x2\x179\x17B\x3\x2\x2\x2\x17A\x178\x3\x2\x2\x2\x17B\x17C\a&\x2"+
		"\x2\x17C\x17E\x3\x2\x2\x2\x17D\x172\x3\x2\x2\x2\x17D\x17E\x3\x2\x2\x2"+
		"\x17E\x39\x3\x2\x2\x2/\x41\x45IMQUY\\_\x65p\x96\x98\x9E\xA6\xAA\xAD\xB1"+
		"\xB5\xB9\xBD\xC3\xC7\xCB\xD0\xD8\xDC\xE1\xE5\xFA\x10C\x113\x11D\x122\x132"+
		"\x136\x141\x145\x14E\x15C\x163\x16A\x16F\x178\x17D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
