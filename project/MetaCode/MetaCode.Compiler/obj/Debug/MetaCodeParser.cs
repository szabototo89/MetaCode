//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__7=1, T__6=2, T__5=3, T__4=4, T__3=5, T__2=6, T__1=7, T__0=8, FUNCTION=9, 
		FOREACH=10, WHILE=11, IF=12, ELSE=13, DO=14, END=15, BOOLEAN=16, SKIP=17, 
		VAR=18, IN=19, ASSIGN=20, ID=21, COMMENT=22, MULTILINE_COMMENT=23, ATTRIBUTE_ID=24, 
		STRING=25, NUMBER=26, WHITESPACE=27, NEWLINE=28;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "')'", "','", "'by'", "'['", "':'", "'('", "'..'", 
		"'function'", "'foreach'", "'while'", "'if'", "'else'", "'do'", "'end'", 
		"BOOLEAN", "'skip'", "'var'", "'in'", "'='", "ID", "COMMENT", "MULTILINE_COMMENT", 
		"ATTRIBUTE_ID", "STRING", "NUMBER", "WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_expression = 4, RULE_functionExpression = 5, RULE_foreachExpression = 6, 
		RULE_whileExpression = 7, RULE_blockExpression = 8, RULE_assignmentExpression = 9, 
		RULE_ifExpression = 10, RULE_elseIfExpression = 11, RULE_parameterList = 12, 
		RULE_parameter = 13, RULE_typeName = 14, RULE_constant = 15, RULE_array = 16, 
		RULE_interval = 17, RULE_attributes = 18, RULE_attribute = 19;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "expression", 
		"functionExpression", "foreachExpression", "whileExpression", "blockExpression", 
		"assignmentExpression", "ifExpression", "elseIfExpression", "parameterList", 
		"parameter", "typeName", "constant", "array", "interval", "attributes", 
		"attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext Values;
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 42; _localctx.Values = statement();
				}
				}
				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 5) | (1L << 7) | (1L << FUNCTION) | (1L << FOREACH) | (1L << WHILE) | (1L << IF) | (1L << DO) | (1L << BOOLEAN) | (1L << SKIP) | (1L << VAR) | (1L << ID) | (1L << ATTRIBUTE_ID) | (1L << STRING) | (1L << NUMBER) | (1L << NEWLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public VariableDeclarationContext VariableDeclaration;
		public ITerminalNode NEWLINE() { return GetToken(MetaCodeParser.NEWLINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 50;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; _localctx.Expression = expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 52; _localctx.Attributes = attributes();
				}
			}

			State = 55; Match(VAR);
			State = 56; _localctx.VariableName = Match(ID);
			State = 59;
			_la = _input.La(1);
			if (_la==6) {
				{
				State = 57; Match(6);
				State = 58; _localctx.VariableType = typeName();
				}
			}

			State = 61; Match(ASSIGN);
			State = 62; _localctx.VariableDefaultValue = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IToken Skip;
		public FunctionExpressionContext Function;
		public BlockExpressionContext Block;
		public IfExpressionContext If;
		public ForeachExpressionContext Foreach;
		public WhileExpressionContext While;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public WhileExpressionContext whileExpression() {
			return GetRuleContext<WhileExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ForeachExpressionContext foreachExpression() {
			return GetRuleContext<ForeachExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_expression);
		int _la;
		try {
			State = 103;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 64; _localctx.Attributes = attributes();
					}
				}

				State = 67; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 68; _localctx.Attributes = attributes();
					}
				}

				State = 71; _localctx.Skip = Match(SKIP);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 73;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 72; _localctx.Attributes = attributes();
					}
				}

				State = 75; _localctx.Function = functionExpression();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 77;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 76; _localctx.Attributes = attributes();
					}
				}

				State = 79; _localctx.Block = blockExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 81;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 80; _localctx.Attributes = attributes();
					}
				}

				State = 83; _localctx.If = ifExpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 85;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 84; _localctx.Attributes = attributes();
					}
				}

				State = 87; _localctx.Foreach = foreachExpression();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 89;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 88; _localctx.Attributes = attributes();
					}
				}

				State = 91; _localctx.While = whileExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 93;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 92; _localctx.Attributes = attributes();
					}
				}

				State = 95; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 97;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 96; _localctx.Attributes = attributes();
					}
				}

				State = 99; Match(7);
				State = 100; _localctx.InnerExpression = expression();
				State = 101; Match(2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		public IToken FunctionName;
		public ParameterListContext Parameters;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public ExpressionContext BodyExpression;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionExpression);
		int _la;
		try {
			State = 137;
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(FUNCTION);
				State = 107;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 106; _localctx.FunctionName = Match(ID);
					}
				}

				State = 109; Match(7);
				State = 111;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 110; _localctx.Parameters = parameterList();
					}
				}

				State = 113; Match(2);
				State = 116;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 114; Match(6);
					State = 115; _localctx.ReturnType = typeName();
					}
				}

				State = 118; Match(DO);
				State = 119; _localctx.BodyStatements = statements();
				State = 120; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; Match(FUNCTION);
				State = 124;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 123; _localctx.FunctionName = Match(ID);
					}
				}

				State = 126; Match(7);
				State = 128;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 127; _localctx.Parameters = parameterList();
					}
				}

				State = 130; Match(2);
				State = 133;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 131; Match(6);
					State = 132; _localctx.ReturnType = typeName();
					}
				}

				State = 135; Match(ASSIGN);
				State = 136; _localctx.BodyExpression = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachExpressionContext : ParserRuleContext {
		public ExpressionContext Body;
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public ForeachExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachExpressionContext foreachExpression() {
		ForeachExpressionContext _localctx = new ForeachExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_foreachExpression);
		try {
			State = 158;
			switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 139; Match(FOREACH);
				State = 140; Match(7);
				State = 141; Match(ID);
				State = 142; Match(IN);
				State = 143; expression();
				State = 144; Match(2);
				State = 145; _localctx.Body = expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147; Match(FOREACH);
				State = 148; Match(7);
				State = 149; Match(VAR);
				State = 150; Match(ID);
				State = 151; Match(6);
				State = 152; Match(ID);
				State = 153; Match(IN);
				State = 154; expression();
				State = 155; Match(2);
				State = 156; _localctx.Body = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileExpressionContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public ExpressionContext Body;
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public WhileExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileExpressionContext whileExpression() {
		WhileExpressionContext _localctx = new WhileExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_whileExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(WHILE);
			State = 161; Match(7);
			State = 162; _localctx.ConditionExpression = expression();
			State = 163; Match(2);
			State = 164; _localctx.Body = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExpressionContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExpressionContext blockExpression() {
		BlockExpressionContext _localctx = new BlockExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_blockExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(DO);
			State = 167; _localctx.Body = statements();
			State = 168; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IToken Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; _localctx.Variable = Match(ID);
			State = 171; Match(ASSIGN);
			State = 172; _localctx.Value = expression();
			State = 181;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				State = 174;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 173; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 176; Match(IF);
				State = 177; Match(7);
				State = 178; _localctx.ConditionalExpression = expression();
				State = 179; Match(2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		public ExpressionContext Condition;
		public ElseIfExpressionContext ElseIfExpressions;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<ElseIfExpressionContext> elseIfExpression() {
			return GetRuleContexts<ElseIfExpressionContext>();
		}
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public ElseIfExpressionContext elseIfExpression(int i) {
			return GetRuleContext<ElseIfExpressionContext>(i);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_ifExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(IF);
			State = 184; Match(7);
			State = 185; _localctx.Condition = expression();
			State = 186; Match(2);
			State = 187; statements();
			State = 191;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 188; _localctx.ElseIfExpressions = elseIfExpression();
					}
					} 
				}
				State = 193;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
			}
			State = 196;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 194; Match(ELSE);
				State = 195; _localctx.ElseStatements = statements();
				}
			}

			State = 198; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfExpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfExpressionContext elseIfExpression() {
		ElseIfExpressionContext _localctx = new ElseIfExpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_elseIfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(ELSE);
			State = 201; Match(IF);
			State = 202; Match(7);
			State = 203; expression();
			State = 204; Match(2);
			State = 205; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public IReadOnlyList<ParameterContext> parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; parameter();
			State = 212;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 208; Match(3);
				State = 209; parameter();
				}
				}
				State = 214;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_parameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 215; attributes();
				}
			}

			State = 218; Match(ID);
			State = 219; Match(6);
			State = 220; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 222; attributes();
				}
			}

			State = 225; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_constant);
		try {
			State = 232;
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 227; Match(NUMBER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(STRING);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 229; Match(BOOLEAN);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 230; array();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 231; interval();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_array; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_array);
		int _la;
		try {
			State = 247;
			switch ( Interpreter.AdaptivePredict(_input,31,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; Match(5);
				State = 235; expression();
				State = 240;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 236; Match(3);
					State = 237; expression();
					}
					}
					State = 242;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 243; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 245; Match(5);
				State = 246; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_interval; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterval(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_interval);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; _localctx.Start = Match(NUMBER);
			State = 250; Match(8);
			State = 251; _localctx.End = Match(NUMBER);
			{
			State = 252; Match(4);
			State = 253; _localctx.By = Match(NUMBER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 255; attribute();
				}
				}
				State = 258;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ATTRIBUTE_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_attribute);
		int _la;
		try {
			State = 273;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260; _localctx.Name = Match(ATTRIBUTE_ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 261; _localctx.Name = Match(ATTRIBUTE_ID);
				State = 262; Match(5);
				State = 263; constant();
				State = 268;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 264; Match(3);
					State = 265; constant();
					}
					}
					State = 270;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 271; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E\x116\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x3\x6\x3.\n\x3\r\x3\xE\x3/\x3\x4\x3\x4\x3\x4\x5\x4\x35"+
		"\n\x4\x3\x5\x5\x5\x38\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5>\n\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x5\x6\x44\n\x6\x3\x6\x3\x6\x5\x6H\n\x6\x3\x6\x3\x6\x5"+
		"\x6L\n\x6\x3\x6\x3\x6\x5\x6P\n\x6\x3\x6\x3\x6\x5\x6T\n\x6\x3\x6\x3\x6"+
		"\x5\x6X\n\x6\x3\x6\x3\x6\x5\x6\\\n\x6\x3\x6\x3\x6\x5\x6`\n\x6\x3\x6\x3"+
		"\x6\x5\x6\x64\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6j\n\x6\x3\a\x3\a\x5\a"+
		"n\n\a\x3\a\x3\a\x5\ar\n\a\x3\a\x3\a\x3\a\x5\aw\n\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x5\a\x7F\n\a\x3\a\x3\a\x5\a\x83\n\a\x3\a\x3\a\x3\a\x5\a\x88"+
		"\n\a\x3\a\x3\a\x5\a\x8C\n\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b\xA1\n\b\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x5\v"+
		"\xB1\n\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xB8\n\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\a\f\xC0\n\f\f\f\xE\f\xC3\v\f\x3\f\x3\f\x5\f\xC7\n\f\x3\f\x3\f"+
		"\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\xD5\n\xE\f"+
		"\xE\xE\xE\xD8\v\xE\x3\xF\x5\xF\xDB\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\x10"+
		"\x5\x10\xE2\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5"+
		"\x11\xEB\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\xF1\n\x12\f\x12\xE\x12"+
		"\xF4\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\xFA\n\x12\x3\x13\x3\x13"+
		"\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x6\x14\x103\n\x14\r\x14\xE\x14\x104"+
		"\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\a\x15\x10D\n\x15\f\x15\xE\x15"+
		"\x110\v\x15\x3\x15\x3\x15\x5\x15\x114\n\x15\x3\x15\x2\x2\x2\x16\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A"+
		"\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\x2\x12F\x2*\x3\x2\x2\x2\x4-"+
		"\x3\x2\x2\x2\x6\x34\x3\x2\x2\x2\b\x37\x3\x2\x2\x2\ni\x3\x2\x2\x2\f\x8B"+
		"\x3\x2\x2\x2\xE\xA0\x3\x2\x2\x2\x10\xA2\x3\x2\x2\x2\x12\xA8\x3\x2\x2\x2"+
		"\x14\xAC\x3\x2\x2\x2\x16\xB9\x3\x2\x2\x2\x18\xCA\x3\x2\x2\x2\x1A\xD1\x3"+
		"\x2\x2\x2\x1C\xDA\x3\x2\x2\x2\x1E\xE1\x3\x2\x2\x2 \xEA\x3\x2\x2\x2\"\xF9"+
		"\x3\x2\x2\x2$\xFB\x3\x2\x2\x2&\x102\x3\x2\x2\x2(\x113\x3\x2\x2\x2*+\x5"+
		"\x4\x3\x2+\x3\x3\x2\x2\x2,.\x5\x6\x4\x2-,\x3\x2\x2\x2./\x3\x2\x2\x2/-"+
		"\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x5\x3\x2\x2\x2\x31\x35\x5\n\x6\x2\x32"+
		"\x35\x5\b\x5\x2\x33\x35\a\x1E\x2\x2\x34\x31\x3\x2\x2\x2\x34\x32\x3\x2"+
		"\x2\x2\x34\x33\x3\x2\x2\x2\x35\a\x3\x2\x2\x2\x36\x38\x5&\x14\x2\x37\x36"+
		"\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39:\a\x14\x2\x2"+
		":=\a\x17\x2\x2;<\a\b\x2\x2<>\x5\x1E\x10\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2"+
		">?\x3\x2\x2\x2?@\a\x16\x2\x2@\x41\x5\n\x6\x2\x41\t\x3\x2\x2\x2\x42\x44"+
		"\x5&\x14\x2\x43\x42\x3\x2\x2\x2\x43\x44\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2"+
		"\x45j\x5 \x11\x2\x46H\x5&\x14\x2G\x46\x3\x2\x2\x2GH\x3\x2\x2\x2HI\x3\x2"+
		"\x2\x2Ij\a\x13\x2\x2JL\x5&\x14\x2KJ\x3\x2\x2\x2KL\x3\x2\x2\x2LM\x3\x2"+
		"\x2\x2Mj\x5\f\a\x2NP\x5&\x14\x2ON\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\x3\x2\x2"+
		"\x2Qj\x5\x12\n\x2RT\x5&\x14\x2SR\x3\x2\x2\x2ST\x3\x2\x2\x2TU\x3\x2\x2"+
		"\x2Uj\x5\x16\f\x2VX\x5&\x14\x2WV\x3\x2\x2\x2WX\x3\x2\x2\x2XY\x3\x2\x2"+
		"\x2Yj\x5\xE\b\x2Z\\\x5&\x14\x2[Z\x3\x2\x2\x2[\\\x3\x2\x2\x2\\]\x3\x2\x2"+
		"\x2]j\x5\x10\t\x2^`\x5&\x14\x2_^\x3\x2\x2\x2_`\x3\x2\x2\x2`\x61\x3\x2"+
		"\x2\x2\x61j\x5\x14\v\x2\x62\x64\x5&\x14\x2\x63\x62\x3\x2\x2\x2\x63\x64"+
		"\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\x66\a\t\x2\x2\x66g\x5\n\x6\x2gh\a"+
		"\x4\x2\x2hj\x3\x2\x2\x2i\x43\x3\x2\x2\x2iG\x3\x2\x2\x2iK\x3\x2\x2\x2i"+
		"O\x3\x2\x2\x2iS\x3\x2\x2\x2iW\x3\x2\x2\x2i[\x3\x2\x2\x2i_\x3\x2\x2\x2"+
		"i\x63\x3\x2\x2\x2j\v\x3\x2\x2\x2km\a\v\x2\x2ln\a\x17\x2\x2ml\x3\x2\x2"+
		"\x2mn\x3\x2\x2\x2no\x3\x2\x2\x2oq\a\t\x2\x2pr\x5\x1A\xE\x2qp\x3\x2\x2"+
		"\x2qr\x3\x2\x2\x2rs\x3\x2\x2\x2sv\a\x4\x2\x2tu\a\b\x2\x2uw\x5\x1E\x10"+
		"\x2vt\x3\x2\x2\x2vw\x3\x2\x2\x2wx\x3\x2\x2\x2xy\a\x10\x2\x2yz\x5\x4\x3"+
		"\x2z{\a\x11\x2\x2{\x8C\x3\x2\x2\x2|~\a\v\x2\x2}\x7F\a\x17\x2\x2~}\x3\x2"+
		"\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2\x80\x82\a\t\x2\x2\x81\x83"+
		"\x5\x1A\xE\x2\x82\x81\x3\x2\x2\x2\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2\x2"+
		"\x2\x84\x87\a\x4\x2\x2\x85\x86\a\b\x2\x2\x86\x88\x5\x1E\x10\x2\x87\x85"+
		"\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8A\a\x16\x2"+
		"\x2\x8A\x8C\x5\n\x6\x2\x8Bk\x3\x2\x2\x2\x8B|\x3\x2\x2\x2\x8C\r\x3\x2\x2"+
		"\x2\x8D\x8E\a\f\x2\x2\x8E\x8F\a\t\x2\x2\x8F\x90\a\x17\x2\x2\x90\x91\a"+
		"\x15\x2\x2\x91\x92\x5\n\x6\x2\x92\x93\a\x4\x2\x2\x93\x94\x5\n\x6\x2\x94"+
		"\xA1\x3\x2\x2\x2\x95\x96\a\f\x2\x2\x96\x97\a\t\x2\x2\x97\x98\a\x14\x2"+
		"\x2\x98\x99\a\x17\x2\x2\x99\x9A\a\b\x2\x2\x9A\x9B\a\x17\x2\x2\x9B\x9C"+
		"\a\x15\x2\x2\x9C\x9D\x5\n\x6\x2\x9D\x9E\a\x4\x2\x2\x9E\x9F\x5\n\x6\x2"+
		"\x9F\xA1\x3\x2\x2\x2\xA0\x8D\x3\x2\x2\x2\xA0\x95\x3\x2\x2\x2\xA1\xF\x3"+
		"\x2\x2\x2\xA2\xA3\a\r\x2\x2\xA3\xA4\a\t\x2\x2\xA4\xA5\x5\n\x6\x2\xA5\xA6"+
		"\a\x4\x2\x2\xA6\xA7\x5\n\x6\x2\xA7\x11\x3\x2\x2\x2\xA8\xA9\a\x10\x2\x2"+
		"\xA9\xAA\x5\x4\x3\x2\xAA\xAB\a\x11\x2\x2\xAB\x13\x3\x2\x2\x2\xAC\xAD\a"+
		"\x17\x2\x2\xAD\xAE\a\x16\x2\x2\xAE\xB7\x5\n\x6\x2\xAF\xB1\x5&\x14\x2\xB0"+
		"\xAF\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\a\xE"+
		"\x2\x2\xB3\xB4\a\t\x2\x2\xB4\xB5\x5\n\x6\x2\xB5\xB6\a\x4\x2\x2\xB6\xB8"+
		"\x3\x2\x2\x2\xB7\xB0\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\x15\x3\x2\x2"+
		"\x2\xB9\xBA\a\xE\x2\x2\xBA\xBB\a\t\x2\x2\xBB\xBC\x5\n\x6\x2\xBC\xBD\a"+
		"\x4\x2\x2\xBD\xC1\x5\x4\x3\x2\xBE\xC0\x5\x18\r\x2\xBF\xBE\x3\x2\x2\x2"+
		"\xC0\xC3\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2\xC1\xC2\x3\x2\x2\x2\xC2\xC6\x3"+
		"\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC4\xC5\a\xF\x2\x2\xC5\xC7\x5\x4\x3\x2\xC6"+
		"\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\a\x11"+
		"\x2\x2\xC9\x17\x3\x2\x2\x2\xCA\xCB\a\xF\x2\x2\xCB\xCC\a\xE\x2\x2\xCC\xCD"+
		"\a\t\x2\x2\xCD\xCE\x5\n\x6\x2\xCE\xCF\a\x4\x2\x2\xCF\xD0\x5\x4\x3\x2\xD0"+
		"\x19\x3\x2\x2\x2\xD1\xD6\x5\x1C\xF\x2\xD2\xD3\a\x5\x2\x2\xD3\xD5\x5\x1C"+
		"\xF\x2\xD4\xD2\x3\x2\x2\x2\xD5\xD8\x3\x2\x2\x2\xD6\xD4\x3\x2\x2\x2\xD6"+
		"\xD7\x3\x2\x2\x2\xD7\x1B\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2\xD9\xDB\x5&\x14"+
		"\x2\xDA\xD9\x3\x2\x2\x2\xDA\xDB\x3\x2\x2\x2\xDB\xDC\x3\x2\x2\x2\xDC\xDD"+
		"\a\x17\x2\x2\xDD\xDE\a\b\x2\x2\xDE\xDF\x5\x1E\x10\x2\xDF\x1D\x3\x2\x2"+
		"\x2\xE0\xE2\x5&\x14\x2\xE1\xE0\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\xE3"+
		"\x3\x2\x2\x2\xE3\xE4\a\x17\x2\x2\xE4\x1F\x3\x2\x2\x2\xE5\xEB\a\x1C\x2"+
		"\x2\xE6\xEB\a\x1B\x2\x2\xE7\xEB\a\x12\x2\x2\xE8\xEB\x5\"\x12\x2\xE9\xEB"+
		"\x5$\x13\x2\xEA\xE5\x3\x2\x2\x2\xEA\xE6\x3\x2\x2\x2\xEA\xE7\x3\x2\x2\x2"+
		"\xEA\xE8\x3\x2\x2\x2\xEA\xE9\x3\x2\x2\x2\xEB!\x3\x2\x2\x2\xEC\xED\a\a"+
		"\x2\x2\xED\xF2\x5\n\x6\x2\xEE\xEF\a\x5\x2\x2\xEF\xF1\x5\n\x6\x2\xF0\xEE"+
		"\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2"+
		"\x2\xF3\xF5\x3\x2\x2\x2\xF4\xF2\x3\x2\x2\x2\xF5\xF6\a\x3\x2\x2\xF6\xFA"+
		"\x3\x2\x2\x2\xF7\xF8\a\a\x2\x2\xF8\xFA\a\x3\x2\x2\xF9\xEC\x3\x2\x2\x2"+
		"\xF9\xF7\x3\x2\x2\x2\xFA#\x3\x2\x2\x2\xFB\xFC\a\x1C\x2\x2\xFC\xFD\a\n"+
		"\x2\x2\xFD\xFE\a\x1C\x2\x2\xFE\xFF\a\x6\x2\x2\xFF\x100\a\x1C\x2\x2\x100"+
		"%\x3\x2\x2\x2\x101\x103\x5(\x15\x2\x102\x101\x3\x2\x2\x2\x103\x104\x3"+
		"\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105\'\x3\x2\x2"+
		"\x2\x106\x114\a\x1A\x2\x2\x107\x108\a\x1A\x2\x2\x108\x109\a\a\x2\x2\x109"+
		"\x10E\x5 \x11\x2\x10A\x10B\a\x5\x2\x2\x10B\x10D\x5 \x11\x2\x10C\x10A\x3"+
		"\x2\x2\x2\x10D\x110\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10E\x10F\x3\x2"+
		"\x2\x2\x10F\x111\x3\x2\x2\x2\x110\x10E\x3\x2\x2\x2\x111\x112\a\x3\x2\x2"+
		"\x112\x114\x3\x2\x2\x2\x113\x106\x3\x2\x2\x2\x113\x107\x3\x2\x2\x2\x114"+
		")\x3\x2\x2\x2%/\x34\x37=\x43GKOSW[_\x63imqv~\x82\x87\x8B\xA0\xB0\xB7\xC1"+
		"\xC6\xD6\xDA\xE1\xEA\xF2\xF9\x104\x10E\x113";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
