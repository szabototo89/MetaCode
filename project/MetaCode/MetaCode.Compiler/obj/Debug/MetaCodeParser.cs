//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Development\Projects\MetaCode\project\MetaCode\MetaCode.Compiler\Grammar\MetaCode.g4 by ANTLR 4.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace MetaCode.Compiler.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class MetaCodeParser : Parser {
	public const int
		T__7=1, T__6=2, T__5=3, T__4=4, T__3=5, T__2=6, T__1=7, T__0=8, FUNCTION=9, 
		FOREACH=10, WHILE=11, IF=12, ELSE=13, DO=14, END=15, BOOLEAN=16, SKIP=17, 
		VAR=18, IN=19, ASSIGN=20, ID=21, COMMENT=22, MULTILINE_COMMENT=23, ATTRIBUTE_ID=24, 
		STRING=25, NUMBER=26, WHITESPACE=27, NEWLINE=28;
	public static readonly string[] tokenNames = {
		"<INVALID>", "']'", "')'", "','", "'by'", "'['", "':'", "'('", "'..'", 
		"'function'", "'foreach'", "'while'", "'if'", "'else'", "'do'", "'end'", 
		"BOOLEAN", "'skip'", "'var'", "'in'", "'='", "ID", "COMMENT", "MULTILINE_COMMENT", 
		"ATTRIBUTE_ID", "STRING", "NUMBER", "WHITESPACE", "NEWLINE"
	};
	public const int
		RULE_init = 0, RULE_statements = 1, RULE_statement = 2, RULE_variableDeclaration = 3, 
		RULE_expression = 4, RULE_functionCallExpression = 5, RULE_functionExpression = 6, 
		RULE_foreachExpression = 7, RULE_whileExpression = 8, RULE_blockExpression = 9, 
		RULE_assignmentExpression = 10, RULE_ifExpression = 11, RULE_elseIfExpression = 12, 
		RULE_formalParameterList = 13, RULE_formalParameter = 14, RULE_actualParameterList = 15, 
		RULE_typeName = 16, RULE_constant = 17, RULE_numberConstant = 18, RULE_stringConstant = 19, 
		RULE_booleanConstant = 20, RULE_arrayConstant = 21, RULE_intervalConstant = 22, 
		RULE_attributes = 23, RULE_attribute = 24;
	public static readonly string[] ruleNames = {
		"init", "statements", "statement", "variableDeclaration", "expression", 
		"functionCallExpression", "functionExpression", "foreachExpression", "whileExpression", 
		"blockExpression", "assignmentExpression", "ifExpression", "elseIfExpression", 
		"formalParameterList", "formalParameter", "actualParameterList", "typeName", 
		"constant", "numberConstant", "stringConstant", "booleanConstant", "arrayConstant", 
		"intervalConstant", "attributes", "attribute"
	};

	public override string GrammarFileName { get { return "MetaCode.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MetaCodeParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class InitContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public InitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_init; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InitContext init() {
		InitContext _localctx = new InitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_init);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementContext Values;
		public IReadOnlyList<StatementContext> statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statements; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 52; _localctx.Values = statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 55;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			} while ( _alt!=2 && _alt!=-1 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ExpressionContext Expression;
		public VariableDeclarationContext VariableDeclaration;
		public ITerminalNode NEWLINE() { return GetToken(MetaCodeParser.NEWLINE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_statement; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 60;
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; _localctx.Expression = expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; _localctx.VariableDeclaration = variableDeclaration();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59; Match(NEWLINE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AttributesContext Attributes;
		public IToken VariableName;
		public TypeNameContext VariableType;
		public ExpressionContext VariableDefaultValue;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variableDeclaration; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 62; _localctx.Attributes = attributes();
				}
			}

			State = 65; Match(VAR);
			State = 66; _localctx.VariableName = Match(ID);
			State = 69;
			_la = _input.La(1);
			if (_la==6) {
				{
				State = 67; Match(6);
				State = 68; _localctx.VariableType = typeName();
				}
			}

			State = 71; Match(ASSIGN);
			State = 72; _localctx.VariableDefaultValue = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AttributesContext Attributes;
		public ConstantContext Constant;
		public IToken Skip;
		public FunctionExpressionContext Function;
		public BlockExpressionContext Block;
		public IfExpressionContext If;
		public ForeachExpressionContext Foreach;
		public WhileExpressionContext While;
		public AssignmentExpressionContext Assignment;
		public ExpressionContext InnerExpression;
		public IfExpressionContext ifExpression() {
			return GetRuleContext<IfExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public BlockExpressionContext blockExpression() {
			return GetRuleContext<BlockExpressionContext>(0);
		}
		public ITerminalNode SKIP() { return GetToken(MetaCodeParser.SKIP, 0); }
		public FunctionExpressionContext functionExpression() {
			return GetRuleContext<FunctionExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public WhileExpressionContext whileExpression() {
			return GetRuleContext<WhileExpressionContext>(0);
		}
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ForeachExpressionContext foreachExpression() {
			return GetRuleContext<ForeachExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_expression);
		int _la;
		try {
			State = 118;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 74; _localctx.Attributes = attributes();
					}
				}

				State = 77; _localctx.Constant = constant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				if (!(isInMemberCall(ID))) throw new FailedPredicateException(this, "isInMemberCall(ID)");
				State = 80;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 79; _localctx.Attributes = attributes();
					}
				}

				State = 82; functionCallExpression();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 84;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 83; _localctx.Attributes = attributes();
					}
				}

				State = 86; _localctx.Skip = Match(SKIP);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 88;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 87; _localctx.Attributes = attributes();
					}
				}

				State = 90; _localctx.Function = functionExpression();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 91; _localctx.Attributes = attributes();
					}
				}

				State = 94; _localctx.Block = blockExpression();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 96;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 95; _localctx.Attributes = attributes();
					}
				}

				State = 98; _localctx.If = ifExpression();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 100;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 99; _localctx.Attributes = attributes();
					}
				}

				State = 102; _localctx.Foreach = foreachExpression();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 104;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 103; _localctx.Attributes = attributes();
					}
				}

				State = 106; _localctx.While = whileExpression();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 108;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 107; _localctx.Attributes = attributes();
					}
				}

				State = 110; _localctx.Assignment = assignmentExpression();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 112;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 111; _localctx.Attributes = attributes();
					}
				}

				State = 114; Match(7);
				State = 115; _localctx.InnerExpression = expression();
				State = 116; Match(2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ActualParameterListContext actualParameterList() {
			return GetRuleContext<ActualParameterListContext>(0);
		}
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCallExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_functionCallExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(ID);
			State = 121; Match(7);
			State = 123;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 122; actualParameterList();
				}
				break;
			}
			State = 125; Match(2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionExpressionContext : ParserRuleContext {
		public IToken FunctionName;
		public FormalParameterListContext Parameters;
		public TypeNameContext ReturnType;
		public StatementsContext BodyStatements;
		public ExpressionContext BodyExpression;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public ITerminalNode FUNCTION() { return GetToken(MetaCodeParser.FUNCTION, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public FunctionExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionExpressionContext functionExpression() {
		FunctionExpressionContext _localctx = new FunctionExpressionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_functionExpression);
		int _la;
		try {
			State = 159;
			switch ( Interpreter.AdaptivePredict(_input,22,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 127; Match(FUNCTION);
				State = 129;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 128; _localctx.FunctionName = Match(ID);
					}
				}

				State = 131; Match(7);
				State = 133;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 132; _localctx.Parameters = formalParameterList();
					}
				}

				State = 135; Match(2);
				State = 138;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 136; Match(6);
					State = 137; _localctx.ReturnType = typeName();
					}
				}

				State = 140; Match(DO);
				State = 141; _localctx.BodyStatements = statements();
				State = 142; Match(END);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 144; Match(FUNCTION);
				State = 146;
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 145; _localctx.FunctionName = Match(ID);
					}
				}

				State = 148; Match(7);
				State = 150;
				_la = _input.La(1);
				if (_la==ID || _la==ATTRIBUTE_ID) {
					{
					State = 149; _localctx.Parameters = formalParameterList();
					}
				}

				State = 152; Match(2);
				State = 155;
				_la = _input.La(1);
				if (_la==6) {
					{
					State = 153; Match(6);
					State = 154; _localctx.ReturnType = typeName();
					}
				}

				State = 157; Match(ASSIGN);
				State = 158; _localctx.BodyExpression = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachExpressionContext : ParserRuleContext {
		public ExpressionContext Body;
		public ITerminalNode IN() { return GetToken(MetaCodeParser.IN, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode VAR() { return GetToken(MetaCodeParser.VAR, 0); }
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(MetaCodeParser.ID); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ITerminalNode FOREACH() { return GetToken(MetaCodeParser.FOREACH, 0); }
		public ITerminalNode ID(int i) {
			return GetToken(MetaCodeParser.ID, i);
		}
		public ForeachExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_foreachExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterForeachExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitForeachExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeachExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachExpressionContext foreachExpression() {
		ForeachExpressionContext _localctx = new ForeachExpressionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_foreachExpression);
		try {
			State = 180;
			switch ( Interpreter.AdaptivePredict(_input,23,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 161; Match(FOREACH);
				State = 162; Match(7);
				State = 163; Match(ID);
				State = 164; Match(IN);
				State = 165; expression();
				State = 166; Match(2);
				State = 167; _localctx.Body = expression();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 169; Match(FOREACH);
				State = 170; Match(7);
				State = 171; Match(VAR);
				State = 172; Match(ID);
				State = 173; Match(6);
				State = 174; Match(ID);
				State = 175; Match(IN);
				State = 176; expression();
				State = 177; Match(2);
				State = 178; _localctx.Body = expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileExpressionContext : ParserRuleContext {
		public ExpressionContext ConditionExpression;
		public ExpressionContext Body;
		public ITerminalNode WHILE() { return GetToken(MetaCodeParser.WHILE, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public WhileExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_whileExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterWhileExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitWhileExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileExpressionContext whileExpression() {
		WhileExpressionContext _localctx = new WhileExpressionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_whileExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(WHILE);
			State = 183; Match(7);
			State = 184; _localctx.ConditionExpression = expression();
			State = 185; Match(2);
			State = 186; _localctx.Body = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExpressionContext : ParserRuleContext {
		public StatementsContext Body;
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode DO() { return GetToken(MetaCodeParser.DO, 0); }
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public BlockExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_blockExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBlockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBlockExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockExpressionContext blockExpression() {
		BlockExpressionContext _localctx = new BlockExpressionContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_blockExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(DO);
			State = 189; _localctx.Body = statements();
			State = 190; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public IToken Variable;
		public ExpressionContext Value;
		public AttributesContext ConditionalAttributes;
		public ExpressionContext ConditionalExpression;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN() { return GetToken(MetaCodeParser.ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_assignmentExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext assignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_assignmentExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 192; _localctx.Variable = Match(ID);
			State = 193; Match(ASSIGN);
			State = 194; _localctx.Value = expression();
			State = 203;
			switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
			case 1:
				{
				State = 196;
				_la = _input.La(1);
				if (_la==ATTRIBUTE_ID) {
					{
					State = 195; _localctx.ConditionalAttributes = attributes();
					}
				}

				State = 198; Match(IF);
				State = 199; Match(7);
				State = 200; _localctx.ConditionalExpression = expression();
				State = 201; Match(2);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExpressionContext : ParserRuleContext {
		public ExpressionContext Condition;
		public ElseIfExpressionContext ElseIfExpressions;
		public StatementsContext ElseStatements;
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public IReadOnlyList<ElseIfExpressionContext> elseIfExpression() {
			return GetRuleContexts<ElseIfExpressionContext>();
		}
		public IReadOnlyList<StatementsContext> statements() {
			return GetRuleContexts<StatementsContext>();
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementsContext statements(int i) {
			return GetRuleContext<StatementsContext>(i);
		}
		public ElseIfExpressionContext elseIfExpression(int i) {
			return GetRuleContext<ElseIfExpressionContext>(i);
		}
		public ITerminalNode END() { return GetToken(MetaCodeParser.END, 0); }
		public IfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_ifExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfExpressionContext ifExpression() {
		IfExpressionContext _localctx = new IfExpressionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_ifExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(IF);
			State = 206; Match(7);
			State = 207; _localctx.Condition = expression();
			State = 208; Match(2);
			State = 209; statements();
			State = 213;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			while ( _alt!=2 && _alt!=-1 ) {
				if ( _alt==1 ) {
					{
					{
					State = 210; _localctx.ElseIfExpressions = elseIfExpression();
					}
					} 
				}
				State = 215;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,26,_ctx);
			}
			State = 218;
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 216; Match(ELSE);
				State = 217; _localctx.ElseStatements = statements();
				}
			}

			State = 220; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfExpressionContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MetaCodeParser.IF, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode ELSE() { return GetToken(MetaCodeParser.ELSE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ElseIfExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_elseIfExpression; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterElseIfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitElseIfExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfExpressionContext elseIfExpression() {
		ElseIfExpressionContext _localctx = new ElseIfExpressionContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_elseIfExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(ELSE);
			State = 223; Match(IF);
			State = 224; Match(7);
			State = 225; expression();
			State = 226; Match(2);
			State = 227; statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public IReadOnlyList<FormalParameterContext> formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_formalParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; formalParameter();
			State = 234;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 230; Match(3);
				State = 231; formalParameter();
				}
				}
				State = 236;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_formalParameter; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_formalParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 237; attributes();
				}
			}

			State = 240; Match(ID);
			State = 241; Match(6);
			State = 242; typeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualParameterListContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ActualParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_actualParameterList; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterActualParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitActualParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualParameterListContext actualParameterList() {
		ActualParameterListContext _localctx = new ActualParameterListContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_actualParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; expression();
			State = 249;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==3) {
				{
				{
				State = 245; Match(3);
				State = 246; expression();
				}
				}
				State = 251;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ID() { return GetToken(MetaCodeParser.ID, 0); }
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_typeName; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_typeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253;
			_la = _input.La(1);
			if (_la==ATTRIBUTE_ID) {
				{
				State = 252; attributes();
				}
			}

			State = 255; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public NumberConstantContext Number;
		public StringConstantContext String;
		public BooleanConstantContext Boolean;
		public ArrayConstantContext Array;
		public IntervalConstantContext Interval;
		public NumberConstantContext numberConstant() {
			return GetRuleContext<NumberConstantContext>(0);
		}
		public ArrayConstantContext arrayConstant() {
			return GetRuleContext<ArrayConstantContext>(0);
		}
		public BooleanConstantContext booleanConstant() {
			return GetRuleContext<BooleanConstantContext>(0);
		}
		public IntervalConstantContext intervalConstant() {
			return GetRuleContext<IntervalConstantContext>(0);
		}
		public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_constant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_constant);
		try {
			State = 262;
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 257; _localctx.Number = numberConstant();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258; _localctx.String = stringConstant();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 259; _localctx.Boolean = booleanConstant();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 260; _localctx.Array = arrayConstant();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 261; _localctx.Interval = intervalConstant();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberConstantContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MetaCodeParser.NUMBER, 0); }
		public NumberConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_numberConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterNumberConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitNumberConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberConstantContext numberConstant() {
		NumberConstantContext _localctx = new NumberConstantContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_numberConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(MetaCodeParser.STRING, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_stringConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterStringConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitStringConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_stringConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanConstantContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(MetaCodeParser.BOOLEAN, 0); }
		public BooleanConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_booleanConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterBooleanConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitBooleanConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanConstantContext booleanConstant() {
		BooleanConstantContext _localctx = new BooleanConstantContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_booleanConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; Match(BOOLEAN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayConstantContext : ParserRuleContext {
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ArrayConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_arrayConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterArrayConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitArrayConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayConstantContext arrayConstant() {
		ArrayConstantContext _localctx = new ArrayConstantContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_arrayConstant);
		int _la;
		try {
			State = 283;
			switch ( Interpreter.AdaptivePredict(_input,34,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; Match(5);
				State = 271; expression();
				State = 276;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 272; Match(3);
					State = 273; expression();
					}
					}
					State = 278;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 279; Match(1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281; Match(5);
				State = 282; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalConstantContext : ParserRuleContext {
		public IToken Start;
		public IToken End;
		public IToken By;
		public ITerminalNode NUMBER(int i) {
			return GetToken(MetaCodeParser.NUMBER, i);
		}
		public IReadOnlyList<ITerminalNode> NUMBER() { return GetTokens(MetaCodeParser.NUMBER); }
		public IntervalConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_intervalConstant; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterIntervalConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitIntervalConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntervalConstantContext intervalConstant() {
		IntervalConstantContext _localctx = new IntervalConstantContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_intervalConstant);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; _localctx.Start = Match(NUMBER);
			State = 286; Match(8);
			State = 287; _localctx.End = Match(NUMBER);
			{
			State = 288; Match(4);
			State = 289; _localctx.By = Match(NUMBER);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public IReadOnlyList<AttributeContext> attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attributes; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 291; attribute();
				}
				}
				State = 294;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ATTRIBUTE_ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken Name;
		public ConstantContext constant(int i) {
			return GetRuleContext<ConstantContext>(i);
		}
		public IReadOnlyList<ConstantContext> constant() {
			return GetRuleContexts<ConstantContext>();
		}
		public ITerminalNode ATTRIBUTE_ID() { return GetToken(MetaCodeParser.ATTRIBUTE_ID, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_attribute; }
		public override void EnterRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMetaCodeListener typedListener = listener as IMetaCodeListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMetaCodeVisitor<TResult> typedVisitor = visitor as IMetaCodeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_attribute);
		int _la;
		try {
			State = 309;
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 296; _localctx.Name = Match(ATTRIBUTE_ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 297; _localctx.Name = Match(ATTRIBUTE_ID);
				State = 298; Match(5);
				State = 299; constant();
				State = 304;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==3) {
					{
					{
					State = 300; Match(3);
					State = 301; constant();
					}
					}
					State = 306;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 307; Match(1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return isInMemberCall(ID);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1E\x13A\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x3\x2"+
		"\x3\x2\x3\x3\x6\x3\x38\n\x3\r\x3\xE\x3\x39\x3\x4\x3\x4\x3\x4\x5\x4?\n"+
		"\x4\x3\x5\x5\x5\x42\n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5H\n\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x6\x5\x6N\n\x6\x3\x6\x3\x6\x3\x6\x5\x6S\n\x6\x3\x6\x3\x6"+
		"\x5\x6W\n\x6\x3\x6\x3\x6\x5\x6[\n\x6\x3\x6\x3\x6\x5\x6_\n\x6\x3\x6\x3"+
		"\x6\x5\x6\x63\n\x6\x3\x6\x3\x6\x5\x6g\n\x6\x3\x6\x3\x6\x5\x6k\n\x6\x3"+
		"\x6\x3\x6\x5\x6o\n\x6\x3\x6\x3\x6\x5\x6s\n\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x5\x6y\n\x6\x3\a\x3\a\x3\a\x5\a~\n\a\x3\a\x3\a\x3\b\x3\b\x5\b\x84\n\b"+
		"\x3\b\x3\b\x5\b\x88\n\b\x3\b\x3\b\x3\b\x5\b\x8D\n\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x5\b\x95\n\b\x3\b\x3\b\x5\b\x99\n\b\x3\b\x3\b\x3\b\x5\b\x9E"+
		"\n\b\x3\b\x3\b\x5\b\xA2\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\t\xB7\n\t\x3\n"+
		"\x3\n\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x5\f"+
		"\xC7\n\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\f\xCE\n\f\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\a\r\xD6\n\r\f\r\xE\r\xD9\v\r\x3\r\x3\r\x5\r\xDD\n\r\x3\r\x3\r"+
		"\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\a\xF\xEB"+
		"\n\xF\f\xF\xE\xF\xEE\v\xF\x3\x10\x5\x10\xF1\n\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x11\a\x11\xFA\n\x11\f\x11\xE\x11\xFD\v\x11\x3"+
		"\x12\x5\x12\x100\n\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x13"+
		"\x5\x13\x109\n\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\a\x17\x115\n\x17\f\x17\xE\x17\x118\v\x17\x3\x17\x3"+
		"\x17\x3\x17\x3\x17\x5\x17\x11E\n\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x18\x3\x19\x6\x19\x127\n\x19\r\x19\xE\x19\x128\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\a\x1A\x131\n\x1A\f\x1A\xE\x1A\x134\v\x1A\x3\x1A"+
		"\x3\x1A\x5\x1A\x138\n\x1A\x3\x1A\x2\x2\x2\x1B\x2\x2\x4\x2\x6\x2\b\x2\n"+
		"\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2"+
		" \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x2\x2\x152\x2\x34\x3\x2"+
		"\x2\x2\x4\x37\x3\x2\x2\x2\x6>\x3\x2\x2\x2\b\x41\x3\x2\x2\x2\nx\x3\x2\x2"+
		"\x2\fz\x3\x2\x2\x2\xE\xA1\x3\x2\x2\x2\x10\xB6\x3\x2\x2\x2\x12\xB8\x3\x2"+
		"\x2\x2\x14\xBE\x3\x2\x2\x2\x16\xC2\x3\x2\x2\x2\x18\xCF\x3\x2\x2\x2\x1A"+
		"\xE0\x3\x2\x2\x2\x1C\xE7\x3\x2\x2\x2\x1E\xF0\x3\x2\x2\x2 \xF6\x3\x2\x2"+
		"\x2\"\xFF\x3\x2\x2\x2$\x108\x3\x2\x2\x2&\x10A\x3\x2\x2\x2(\x10C\x3\x2"+
		"\x2\x2*\x10E\x3\x2\x2\x2,\x11D\x3\x2\x2\x2.\x11F\x3\x2\x2\x2\x30\x126"+
		"\x3\x2\x2\x2\x32\x137\x3\x2\x2\x2\x34\x35\x5\x4\x3\x2\x35\x3\x3\x2\x2"+
		"\x2\x36\x38\x5\x6\x4\x2\x37\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\x37"+
		"\x3\x2\x2\x2\x39:\x3\x2\x2\x2:\x5\x3\x2\x2\x2;?\x5\n\x6\x2<?\x5\b\x5\x2"+
		"=?\a\x1E\x2\x2>;\x3\x2\x2\x2><\x3\x2\x2\x2>=\x3\x2\x2\x2?\a\x3\x2\x2\x2"+
		"@\x42\x5\x30\x19\x2\x41@\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x43\x3\x2"+
		"\x2\x2\x43\x44\a\x14\x2\x2\x44G\a\x17\x2\x2\x45\x46\a\b\x2\x2\x46H\x5"+
		"\"\x12\x2G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2HI\x3\x2\x2\x2IJ\a\x16\x2\x2J"+
		"K\x5\n\x6\x2K\t\x3\x2\x2\x2LN\x5\x30\x19\x2ML\x3\x2\x2\x2MN\x3\x2\x2\x2"+
		"NO\x3\x2\x2\x2Oy\x5$\x13\x2PR\x6\x6\x2\x2QS\x5\x30\x19\x2RQ\x3\x2\x2\x2"+
		"RS\x3\x2\x2\x2ST\x3\x2\x2\x2Ty\x5\f\a\x2UW\x5\x30\x19\x2VU\x3\x2\x2\x2"+
		"VW\x3\x2\x2\x2WX\x3\x2\x2\x2Xy\a\x13\x2\x2Y[\x5\x30\x19\x2ZY\x3\x2\x2"+
		"\x2Z[\x3\x2\x2\x2[\\\x3\x2\x2\x2\\y\x5\xE\b\x2]_\x5\x30\x19\x2^]\x3\x2"+
		"\x2\x2^_\x3\x2\x2\x2_`\x3\x2\x2\x2`y\x5\x14\v\x2\x61\x63\x5\x30\x19\x2"+
		"\x62\x61\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64y\x5\x18"+
		"\r\x2\x65g\x5\x30\x19\x2\x66\x65\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\x3\x2"+
		"\x2\x2hy\x5\x10\t\x2ik\x5\x30\x19\x2ji\x3\x2\x2\x2jk\x3\x2\x2\x2kl\x3"+
		"\x2\x2\x2ly\x5\x12\n\x2mo\x5\x30\x19\x2nm\x3\x2\x2\x2no\x3\x2\x2\x2op"+
		"\x3\x2\x2\x2py\x5\x16\f\x2qs\x5\x30\x19\x2rq\x3\x2\x2\x2rs\x3\x2\x2\x2"+
		"st\x3\x2\x2\x2tu\a\t\x2\x2uv\x5\n\x6\x2vw\a\x4\x2\x2wy\x3\x2\x2\x2xM\x3"+
		"\x2\x2\x2xP\x3\x2\x2\x2xV\x3\x2\x2\x2xZ\x3\x2\x2\x2x^\x3\x2\x2\x2x\x62"+
		"\x3\x2\x2\x2x\x66\x3\x2\x2\x2xj\x3\x2\x2\x2xn\x3\x2\x2\x2xr\x3\x2\x2\x2"+
		"y\v\x3\x2\x2\x2z{\a\x17\x2\x2{}\a\t\x2\x2|~\x5 \x11\x2}|\x3\x2\x2\x2}"+
		"~\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x80\a\x4\x2\x2\x80\r\x3\x2\x2\x2\x81"+
		"\x83\a\v\x2\x2\x82\x84\a\x17\x2\x2\x83\x82\x3\x2\x2\x2\x83\x84\x3\x2\x2"+
		"\x2\x84\x85\x3\x2\x2\x2\x85\x87\a\t\x2\x2\x86\x88\x5\x1C\xF\x2\x87\x86"+
		"\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x89\x3\x2\x2\x2\x89\x8C\a\x4\x2\x2"+
		"\x8A\x8B\a\b\x2\x2\x8B\x8D\x5\"\x12\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3"+
		"\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x8F\a\x10\x2\x2\x8F\x90\x5\x4\x3\x2"+
		"\x90\x91\a\x11\x2\x2\x91\xA2\x3\x2\x2\x2\x92\x94\a\v\x2\x2\x93\x95\a\x17"+
		"\x2\x2\x94\x93\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x96\x3\x2\x2\x2\x96"+
		"\x98\a\t\x2\x2\x97\x99\x5\x1C\xF\x2\x98\x97\x3\x2\x2\x2\x98\x99\x3\x2"+
		"\x2\x2\x99\x9A\x3\x2\x2\x2\x9A\x9D\a\x4\x2\x2\x9B\x9C\a\b\x2\x2\x9C\x9E"+
		"\x5\"\x12\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\x9F\x3\x2\x2"+
		"\x2\x9F\xA0\a\x16\x2\x2\xA0\xA2\x5\n\x6\x2\xA1\x81\x3\x2\x2\x2\xA1\x92"+
		"\x3\x2\x2\x2\xA2\xF\x3\x2\x2\x2\xA3\xA4\a\f\x2\x2\xA4\xA5\a\t\x2\x2\xA5"+
		"\xA6\a\x17\x2\x2\xA6\xA7\a\x15\x2\x2\xA7\xA8\x5\n\x6\x2\xA8\xA9\a\x4\x2"+
		"\x2\xA9\xAA\x5\n\x6\x2\xAA\xB7\x3\x2\x2\x2\xAB\xAC\a\f\x2\x2\xAC\xAD\a"+
		"\t\x2\x2\xAD\xAE\a\x14\x2\x2\xAE\xAF\a\x17\x2\x2\xAF\xB0\a\b\x2\x2\xB0"+
		"\xB1\a\x17\x2\x2\xB1\xB2\a\x15\x2\x2\xB2\xB3\x5\n\x6\x2\xB3\xB4\a\x4\x2"+
		"\x2\xB4\xB5\x5\n\x6\x2\xB5\xB7\x3\x2\x2\x2\xB6\xA3\x3\x2\x2\x2\xB6\xAB"+
		"\x3\x2\x2\x2\xB7\x11\x3\x2\x2\x2\xB8\xB9\a\r\x2\x2\xB9\xBA\a\t\x2\x2\xBA"+
		"\xBB\x5\n\x6\x2\xBB\xBC\a\x4\x2\x2\xBC\xBD\x5\n\x6\x2\xBD\x13\x3\x2\x2"+
		"\x2\xBE\xBF\a\x10\x2\x2\xBF\xC0\x5\x4\x3\x2\xC0\xC1\a\x11\x2\x2\xC1\x15"+
		"\x3\x2\x2\x2\xC2\xC3\a\x17\x2\x2\xC3\xC4\a\x16\x2\x2\xC4\xCD\x5\n\x6\x2"+
		"\xC5\xC7\x5\x30\x19\x2\xC6\xC5\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC8"+
		"\x3\x2\x2\x2\xC8\xC9\a\xE\x2\x2\xC9\xCA\a\t\x2\x2\xCA\xCB\x5\n\x6\x2\xCB"+
		"\xCC\a\x4\x2\x2\xCC\xCE\x3\x2\x2\x2\xCD\xC6\x3\x2\x2\x2\xCD\xCE\x3\x2"+
		"\x2\x2\xCE\x17\x3\x2\x2\x2\xCF\xD0\a\xE\x2\x2\xD0\xD1\a\t\x2\x2\xD1\xD2"+
		"\x5\n\x6\x2\xD2\xD3\a\x4\x2\x2\xD3\xD7\x5\x4\x3\x2\xD4\xD6\x5\x1A\xE\x2"+
		"\xD5\xD4\x3\x2\x2\x2\xD6\xD9\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3"+
		"\x2\x2\x2\xD8\xDC\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\xDA\xDB\a\xF\x2\x2\xDB"+
		"\xDD\x5\x4\x3\x2\xDC\xDA\x3\x2\x2\x2\xDC\xDD\x3\x2\x2\x2\xDD\xDE\x3\x2"+
		"\x2\x2\xDE\xDF\a\x11\x2\x2\xDF\x19\x3\x2\x2\x2\xE0\xE1\a\xF\x2\x2\xE1"+
		"\xE2\a\xE\x2\x2\xE2\xE3\a\t\x2\x2\xE3\xE4\x5\n\x6\x2\xE4\xE5\a\x4\x2\x2"+
		"\xE5\xE6\x5\x4\x3\x2\xE6\x1B\x3\x2\x2\x2\xE7\xEC\x5\x1E\x10\x2\xE8\xE9"+
		"\a\x5\x2\x2\xE9\xEB\x5\x1E\x10\x2\xEA\xE8\x3\x2\x2\x2\xEB\xEE\x3\x2\x2"+
		"\x2\xEC\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\x1D\x3\x2\x2\x2\xEE\xEC"+
		"\x3\x2\x2\x2\xEF\xF1\x5\x30\x19\x2\xF0\xEF\x3\x2\x2\x2\xF0\xF1\x3\x2\x2"+
		"\x2\xF1\xF2\x3\x2\x2\x2\xF2\xF3\a\x17\x2\x2\xF3\xF4\a\b\x2\x2\xF4\xF5"+
		"\x5\"\x12\x2\xF5\x1F\x3\x2\x2\x2\xF6\xFB\x5\n\x6\x2\xF7\xF8\a\x5\x2\x2"+
		"\xF8\xFA\x5\n\x6\x2\xF9\xF7\x3\x2\x2\x2\xFA\xFD\x3\x2\x2\x2\xFB\xF9\x3"+
		"\x2\x2\x2\xFB\xFC\x3\x2\x2\x2\xFC!\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFE"+
		"\x100\x5\x30\x19\x2\xFF\xFE\x3\x2\x2\x2\xFF\x100\x3\x2\x2\x2\x100\x101"+
		"\x3\x2\x2\x2\x101\x102\a\x17\x2\x2\x102#\x3\x2\x2\x2\x103\x109\x5&\x14"+
		"\x2\x104\x109\x5(\x15\x2\x105\x109\x5*\x16\x2\x106\x109\x5,\x17\x2\x107"+
		"\x109\x5.\x18\x2\x108\x103\x3\x2\x2\x2\x108\x104\x3\x2\x2\x2\x108\x105"+
		"\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x107\x3\x2\x2\x2\x109%\x3\x2\x2"+
		"\x2\x10A\x10B\a\x1C\x2\x2\x10B\'\x3\x2\x2\x2\x10C\x10D\a\x1B\x2\x2\x10D"+
		")\x3\x2\x2\x2\x10E\x10F\a\x12\x2\x2\x10F+\x3\x2\x2\x2\x110\x111\a\a\x2"+
		"\x2\x111\x116\x5\n\x6\x2\x112\x113\a\x5\x2\x2\x113\x115\x5\n\x6\x2\x114"+
		"\x112\x3\x2\x2\x2\x115\x118\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x116\x117"+
		"\x3\x2\x2\x2\x117\x119\x3\x2\x2\x2\x118\x116\x3\x2\x2\x2\x119\x11A\a\x3"+
		"\x2\x2\x11A\x11E\x3\x2\x2\x2\x11B\x11C\a\a\x2\x2\x11C\x11E\a\x3\x2\x2"+
		"\x11D\x110\x3\x2\x2\x2\x11D\x11B\x3\x2\x2\x2\x11E-\x3\x2\x2\x2\x11F\x120"+
		"\a\x1C\x2\x2\x120\x121\a\n\x2\x2\x121\x122\a\x1C\x2\x2\x122\x123\a\x6"+
		"\x2\x2\x123\x124\a\x1C\x2\x2\x124/\x3\x2\x2\x2\x125\x127\x5\x32\x1A\x2"+
		"\x126\x125\x3\x2\x2\x2\x127\x128\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128"+
		"\x129\x3\x2\x2\x2\x129\x31\x3\x2\x2\x2\x12A\x138\a\x1A\x2\x2\x12B\x12C"+
		"\a\x1A\x2\x2\x12C\x12D\a\a\x2\x2\x12D\x132\x5$\x13\x2\x12E\x12F\a\x5\x2"+
		"\x2\x12F\x131\x5$\x13\x2\x130\x12E\x3\x2\x2\x2\x131\x134\x3\x2\x2\x2\x132"+
		"\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x135\x3\x2\x2\x2\x134\x132"+
		"\x3\x2\x2\x2\x135\x136\a\x3\x2\x2\x136\x138\x3\x2\x2\x2\x137\x12A\x3\x2"+
		"\x2\x2\x137\x12B\x3\x2\x2\x2\x138\x33\x3\x2\x2\x2(\x39>\x41GMRVZ^\x62"+
		"\x66jnrx}\x83\x87\x8C\x94\x98\x9D\xA1\xB6\xC6\xCD\xD7\xDC\xEC\xF0\xFB"+
		"\xFF\x108\x116\x11D\x128\x132\x137";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace MetaCode.Compiler.Grammar
